%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: pub_papers_2.pdf
%%Creator: Adobe Acrobat 10.1.3
%%For: WangJingyi
%%CreationDate: 2012-5-18, 22:23:29
%%BoundingBox: 0 0 422 628
%%HiResBoundingBox: 0 0 421.7409 627.8573
%%CropBox: 0 0 421.7409 627.8573
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 828 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2012-05-18T15:31:27+08:00"
   xmp:CreateDate="2012-05-18T15:19:30+08:00"
   xmp:MetadataDate="2012-05-18T15:31:27+08:00"
   xmp:CreatorTool="VTeX PDF Tools"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:e77346e6-5066-4ad1-b26b-21647cc76a17"
   xmpMM:InstanceID="uuid:c4589ae0-7b4e-4526-a5a7-072ce7d1ebfe"
   pdf:Producer="Acrobat Distiller 9.4.5 (Windows)"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -627.857 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 627.857 li
421.741 627.857 li
421.741 0 li
cp
clp
false sop
/0 
[/DeviceRGB] /CSA add_res
.137422 .122799 .126081 rgb
%ADOBeginSubsetFont: WGJAAA+PAText Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /WGJAAA+PAText def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) MicroPress Inc., 2001, 2003. All rights reserved.) def
/Weight (Regular) def
/ItalicAngle 0 def
/BaseFontName (PAText) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 57 /nine put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 72 /H put
dup 73 /I put
dup 78 /N put
dup 80 /P put
dup 83 /S put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 121 /y put
def
/FontBBox {-166 -283 1021 927} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0 459 469 689 709 726 728] def
/OtherBlues [-283 -278 266 276] def
/BlueScale 0.03963 def
/StdHW [31] def
/StdVW [84] def
/StemSnapV [84 95 107] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
37 dict dup begin
/comma <1C60D8A8C9B8707CD00AB2797105BE7312DBFE5D5152D3B38B9B8FDA
33D2FF17F12F85728904CC36606A9AFA7E4BCEDE1958ACFD> |-
/zero <1C60D8A8C9B7A73D39411EB989D5C60161441F11DB8DDE45E37AF4505
ED6AA37860F27F97E92951B5D275EB8F0B8B895731E545E39D6163B8CCE8ACC4
DC5425164CC01BA03C0E2E7D476F5C1314E8820DD976A47142B1B875262AC837
B37> |-
/one <1C60D8A8C9B7A73DC60B9EAD24D327D7AA7D0738821A5B40AF4515A4B4
C215B26543768B5C78075A5E592D74FAA25B1E39FE39859116E5F8A4CCF4B36C
39003FBDD2370FBF5F5EA3EF050A94F081658B320A40C464119C22C4B0DEFFED
4459871434088D036C24E444995B834781541BBF9174365F8F2521CDAC2E> |-
/two <1C60D8A8C9B7A73DC67A2056743B7CAB88164EDA3D6F32A32E69E4CCF0
BC5DA2AFCE8A761A43A17ACBEC9257CB1A8E910BAD59E94269D3BB847CC7BB45
89EFCAF6D964BD2183D3D0DC1C19B8FBF16D465A96C245800D46C547782F2497
6FD37E7E011EF30AF53D59D6F0FA6C2267C980F10F1B6621C7B38D61DD476C63
463844> |-
/three <1C60D8A8C9B7A73D395B17BE472BF1EF77AE52BEDBA1363D1AB1AD54
0BCB22AD2D61596314328212870D68BC882A4506BB5FBA9CA9E2930A7E987B37
13C60E3E3375BB939D41BEF39365788CA14F48E391B19013D2D201B07ECA3325
686EE06DB22F4641183DCB464B3152BA8AA519A8F8AD9B9F05F56D7D59617E7A
4FB92FBFB854D8B02AFCA0E625F515A73CEF2A9D9FB7DB1EA98CDAEE521BB5E1
B545963A226291E599D7A14C10D243DE06A38D9EA3E152CA1676F854> |-
/four <1C60D8A8C9B7A73DC2CDA5FEA220DD215C3E6EE6278DEDC5970B57C30
BC8D7089D57B025EAAAAE3269AA8EB1AC50ADA19D90153432A5E0ABAF87AFFBD
6E00CE346D55B43E053B7A5E4AB5D41A084473105C48988EF4DA065C3B1A0FCC
67B06383149A4EC72F1EACEA0B888EB992B8A262E01AB29F37E76C9335961B97
2875C05DABABA5060B507D33B208016CDB2573AB00E24B271DBED0F6318E1D4B
59623D45807AB31996084D01869865199D3F07E9B8D8694> |-
/six <1C60D8A8C9B7A73D3943BAC8A48E5C123D1C8DC22B09E9C419B6BE3837
D9F0950FAFC6BA056347C466594905570ADA3B6782A25E3A3D694BFCCDE35686
B0279434C6E37BAFB23A195DF82FD7B11176AF9C1C7500D87051E2539AD6EA02
ACAD64B5820D802750177C6F5D4CB868CC37F2BCE21ACC1E2A6A9522D709A74B
1386F54B39AE6D3D0A49> |-
/nine <1C60D8A8C9B7A73DC2110DE3725AC6F9D915A64B4E9FB2CB5FC7595A2
5611FBE6BD095EE51111996662A13BCD5354D60FD63AA0BAE7F0AD477412F2A0
6AEDFFF9CF5E1CA740825EAEF41006CE517DDC079CB9BA611E5605E18350CB26
3F6CED56FBA79AF4E507FD2B16BC4B918AE5464977D2B483470F73156B73E> |-
/A <1C60D8A8C9B6FF868A0D40CC9AB00FD2F20A053D0C8A0A000E32141B63BE
74DB34670B0F2C8F64D48B2D6B5C6042FA0E850CACADBCC398700C45D6024EBF
CDE4440831B969179FB7D3281D799E1D9733646099B1055B62E30EBD88AF6BEC
F4772D06CBE056EEB28522A53B74E59135D8890E2E69A4780FFAE4BEDCD3E892
34CC65ED6FBEEC70E470E6B158497417270CE8EC5E83A62FAECB5709A7FE5613
0C0F1025C25F0FC15088BD3B07154BA438B556CD71A6985D7E30BF663138E803
DAB841484DCE808BD47F> |-
/C <1C60D8A8C9B638183F62B3C8A86C65B9BB6F504B1D6AC3FFE6180CD7CD44
632E85FF73EAF02744EF9308274755B69139E09187A5F70C01E84B0AC7455975
AEAED107B0FD91FE218DAD53392B7BB63DD46F1B0B7D5296922AFA3026266367
12A238A506A221002F622D346D580F7B4BEC96EE6F> |-
/D <1C60D8A8C9B6FB5FAE8215D7AEAFD586DD34D0984C4A0C53E5E728864EA5
8521721BE11BBD96BE2A7203D226B0E235222D0D66680BB849B1F3AD5E6B09B1
530EFC0E1EF92F5DB2F0FC0640965B927447A7B4AAE8DBD60BC7D3BEC2722FB0
6E1C7D6A17C556701EDC5C5B8B674009A89479C1761D55684648B8F29A4FD2D6
CA9F700F3DB2F368F056A96BCD7C8B1705E6EE04EABE1FCB35C9886659462045
497818EBECD299BE2DBF9570938BCC1F78E185D010EAB680606B99C8A0D9A3> |-
/H <1C60D8A8C9B6B5EDE6C0C6B839013DA5F848C63F3F5EC0A42A082A8F5F99
876DBB2D01C50DE3D22E1AFB2754E266272396C0E2B276B833AB84AD2B58B78F
4BDEBDD60F495A6D18DED05E925A488CA0D3A9ECA9EB779207C5D23D738A10C0
F556325770D38C4A5470E163B674CA8CEFD565337759AD112EB0EC2BBD20C89C
813425A6FD491E217089FD69C261EB79B119243F4C10A3429C6A77414F9996AC
C1BF480C749F40E39EAF29CE87C3A8751D1AFF65DB4A2AB3298AC5505B5C8173
52D81956A35BDBABE3FD12A91E051293483AF3CEEC4C3A0A6295FD8B0BE0A133
D26AC3C51DEF640CA1E4530E258A28D5DA1076FFCF19C1995CEB15B16AD3BED9
FC2207322000EEC8ADF03329F07E3FFCA76EFE949C09B044926499901C22E5B3
F7247627> |-
/I <1C60D8A8C9B81BEA11F9AF990B47F8DD2519AED5F511BC20F0B8E45351D5
8A701E0C5972158A1650514518C14B854C3E7B9D3FFB46B10103E4AB13A9BD4B
F2F4A739586EA1E00A4E63A7FDB075B7C27383705CF71E8FB6B94EA77FD3F8FD
E59525D21603155EB0401B470A22A59784E378298FD4FB45C7BAFC5286992B1D
2FD53A2F258335> |-
/N <1C60D8A8C9B6B278CB2A4FF77F1AD21C98D833F92F74871F380605ADBB8C
D21679F9D27EBFD6A5F223C68B8A1DCB6DB8E1DDC1BFFABA5D6F92E89DCD2D7B
338895DE87C207C4B3FA229332BEB6991C91ED4D14B0675F08ECBA23E92C078B
253C53E1D6B37818D8021999CF0DFB03A8160565D61797CF4C04EB536BE74504
7050F5C32AC538FF59844DCA0451AED8A6D392A08C43898E6699FD9438FB1BC9
C25A768DC939BC890A6CA9CB3A638D56550B870859B2E9E0EFDD71601F2DF232
D25197953EF16EDC5736A7E9FE1351EE58134C3FE46028CDC65CB3> |-
/P <1C60D8A8C9B7DF55E755AE904F3A9678F8570F8518485C0291D2E3008761
93348E8EB74FD1C25E6B76F11AF1E116AE69E6D4AC8C7A45FE54B710D9374593
1B2BB685479127DE4798C42E494380F75855AE602B63373A0397B9BC44EFD81A
33B0672294975B7DA08B44D8CD340FAEC69CBB987402A3ACFC52B69297BA6D87
422A4241E2C7238FACA2C94F63C98F5AECE13F7C22E35F8653453A01C4C83DE8
07590AEEF51845CD7CDF790E35497C67D8901454E49CE48389532D1BD716E738
264786> |-
/S <1C60D8A8C9B78E0565022D97E17C5CB11E466287FE5A9041C77526567D10
E2E4A8F8629F2167F102847F5ECFD6F8E7ADD36E913A917E36F97B6DD63C0970
785CDDCC54DF3CF0D7EAB2B6AE7C3AEE1429B33C0847C6411DAB12353CA0B315
5496C60D696EC6FA72A2081ACA385695DCBB2ED23F721B77612A47029BF49F07
D6FB54583ACB24E7D8438AED2C64055DC36926B4F6F3419FCB9C3A0D44603B71
E1C92688E8C872C4A5AED474F2F30AF3CF2E757EDD35166663009D65> |-
/V <1C60D8A8C9B6079F02348073E58B56BF23B465A16BD37EFDA333FCCE51F1
EFAEE18F5371173091A5E190AE856DAE219DBFBB74DEE3886CA96BE532A37120
0457C54D04A38C4B1F186BB851AC5C5836FCFDB34D398C8A02E7F21341B6A099
9ED62170EC0CB2D6474F993C2FD064247AC6FBCFB56C734D14EC746EFFA111E7
BC272ABA02E05B26813BB2DB268732B08F9606B3E761D7B650FEB3DD2A34B65F> |-
/a <1C60D8A8C9B7A73D31B841A24F336BC07713CC0A4BBE710F05D58CFAFFCD
95F46CBD3452F3C958A04ECDDC593BF4BB826EB82C5BCF7F4A54EF2D6FDF5A16
2A6397C80AF1C983CCFDB7085E7E9AA6CC940B11F04A2447BDF850A86D0CE1A5
FC55A9AE567C9D2F2D5529E87E5C36CCDB4B3F4A7C553B7CC1907CB6643D682E
13C36C43F75FD89A4E4628B7FE203AA6937FEA887893E061640E719AF9F06CFE
DD149757E475C9D4DF5D96B14046CACF1612C30C35A8DA0A1845012B03E29AB1
11273BFD39877BB70355AC4504099C240A576821E3FA19BBE52EBF9E6B58D7C5
05F2D5FE62DF08424E96484366061B7E2EF968EA36> |-
/b <1C60D8A8C9B7924C3EA8527B5E5376B4C205F4AFC3D881152B003262E2A0
EA0583FB31FA32A6F55139304742F39049F45CF0ADBAD6D9A5DEA4AFC0727675
B1901137CA4540D665EB6AE94BFD15CAFD245EC778018EEE473EDEC4EB88C131
0ED6726FF9034061C25BBAFDA26110D58373AA6E1D8E289B9F3DEF884C3AC007
A4F1AF954DB681DC37A79C6307392E61620D9F2E7DACF6DF16B1673C7859F026
4E42A39C0A9E9F3B521997131C3A582C> |-
/c <1C60D8A8C9B77FE24E589A4BC1FB0315B0D97F04C736CCFF16B84B0571BD
1E6D1DEAF415B0F5A6A5A178922BD6664718FEE09BBEF0B32A3460B4FD705941
AB560FF2F99446F7D17F91889E3E1C509B300BE615EAE48027AB6F5E5A254DD8
C674E53B5F3817B17D01AD50A81964BF4FA329562049> |-
/d <1C60D8A8C9B7D8BE9E0A9BD54295C22F9509A317014F44D6A3FF3173284D
A6D2C9390A9F225D7AEBF589B7801DC3A430DB273B1A9769F9027CB7E4A62603
F968711E31E385FBDD3D4AA0A1FE81155E0F981C65DAEF4E9064F09DDAC374EA
EF2897F25D1B5E67AA884830D57FB9E89616B876DA70F6CD841AC19A9DB3B1CA
74A74982F91AD319BD3707D8F515C307427D8681A78B5DAFE753C9B6B7533BD8
D443372D9DB8FC0F05D6073F89BF4541F479A1A59E676AE9C1D23C5C97217D34
2C824F8AA4676237EFEBE3CD62BDD919EB2C07126F3F1CAAAABB3FB5736FF491
18E09F8A78C9> |-
/e <1C60D8A8C9B75CBBDC5536C53A2F2F12FB04853C358173544F3655501FDB
F5CA76222C20A6B01CE92D6AF5F535705E734DCF548AE09282339D9250F3F4A3
2A6B57AD5AA222F57883FD4866FC4AAE3AF4F49DADAF49198D4426FB98C336B4
FC53E9FC790FB4F10BB795E3628A9DB54BF35E4E17FC74DD040245018A3DDBD3
2CEA8B2CAC12A1C14DDB4FB0B05E6AAB> |-
/g <1C60D8A8C9B7EF3227731FCCDA1C13D12B3260E6BB08DCB15AD6139DF06B
C36D5E90357B0703524A3AD5344543F1F90256C1C34D84E0727C3FBA3633ED1E
CF343CC51016DE98113074762986381623C343578C4CADFD36C6734EEAF78B9F
BBF79AEC3534AED81A45EFCDD7F98217C9A7DD11A986D40559C0F4D2A04D4646
440603FBBD64542CDFC66EAE536106BE16E53E178F08BE4F4465AF6F832C125D
DFA7A6B826F59D450DC2BBB527EC3921C0E42CDAA3E1DC35A8A9A8F9F79831CC
500D04FC2A025D9B19DA0226500FC34E3AF97805F3875D9A5A278F1E828CCC43
F517E434297C88A86ADA20A309DF2083A400FA4C78599600DB943AE1F8131B4A
075D1AFAB9A19D98EE67130674FA4C4F69C22F7FF806410AA5E3E360A4E5D4BC
85C1EF93101FBC43E31BE7E6CD26AE2E66E8E3C66099CCEB306315004677FC1F
10CC12B00B6806DDEFE2E0C010DCF7D4A3A413BB1EFE9815F9FE267D6D0E202B
F3DA010E63B4DEE434E92F680064E1C3E8DC40A253353EDFB7E9E43E22F49CCB
508BA8C294EB485BB6AEFCFDA0BD50BEE660F0DD769A0A4BD98F06B98354B412
1CE9428AE53909E9> |-
/h <1C60D8A8C9B7F51B67AD9A946B5B52F13B833548BA2C2561FF793DB9A369
DB6A2D27E37A67AE4CA020C8210BBA02959217573FCF17B64784A57DD55FA9A8
BEBD9C3DCE68C403B849B737E20B88E2BDF97D7B5A8F34B8794491319D0D2F3E
0AC96987824251F72581F2AAC7E6D468FBAC0F0B69C2307B54536C788011F315
D949B1D3EE42CAEA195415D8567DEF4F0D2A4BCAE7EE9807BC384F80F97EEDFB
820EC96AFED64EB87E0B27C2779EBEC8E366DC0DD2> |-
/i <1C60D8A8C9B849F243CAAA351C33020FDC188522DC0F01FD815E33A657CB
92010EE6DFDB2002323FBE4D95568F546B094E63658C280368FDED7BEC6A520C
9081ACAFD8E1DDB2AF430AA2AE75E601159A5BFE8E1B9C1F0023A786466F395D
C7120E034248C85471B8B6538C6F5BDEC5925F707A7B9DC07AF3C0AFBE71F066
973BF3A795B8F4A04E90D5CF0A851309E25921F224D1E726D191767001E97E38
C0EE1BB15A8C> |-
/l <1C60D8A8C9B849F243CAAA3443CA0E801430AC0FCEB77141DCD53E3E53CF
35BB6EB9A0FC90FDB1357AFB347BBFE4D7A49B78F1AFB1AE26F85D8DB3E29678
ED808CB0A9D65A9E809DC4F91E596D330CA2FAD60BE033F6DDCAFE5892126505
959C1684E43DF5AB8985CB5546BD211252F505298833ED76BDDABE5A57454657
8F> |-
/m <1C60D8A8C9B59575A969B4137115B2F447FE716DEE192B352D74D06B8AA0
904799397BB21314FC69BF7BBDC5BE8B28D3CC7249746C0CEF5013BB6F380417
A3C5973D664B744941B9B8FCDFE6587682C10CF8B519F15378FD167F6312E920
542919639CA72EA3D10379BBFF8A69716AC4FF3C7E8E79AD7841AE812A711573
918BC43568E4FB18B6D244E3D17D6D30A754D598A23DFA53A86A0C601F073F0A
C81CAB18EE2866D1ECBCD3D642BF839907A3E489C7AE88106EC4541416D99F63
6067FB3FF16ABC93661C67ECAF21F40A945ACCD9E5524839EABB2C91F6E58DA8
70320CE6A82A365EBD7DE155E3E2AB1EBFF509FF99CCFDE1C62E3E4F1B0670B8
80DA46D38C0027E63E0B842C2DC012D8C77B17C89188EF45AF0080ACBC3FB951
2FE86ACAAFFD0FBFFBBCA29543B5C0165152D45C8EA4E632BA2DBEC73D9D8917
345DBBFA5C9CD86C3B40BEDC2061B7EE35EF4907996AA89424C1E6CFB7E4FB86
86A93A0CE1BB484DC3> |-
/n <1C60D8A8C9B7F51B687879ED3D19F8C79185F3DD2015C412F741E93829AE
5E00C54424B07D3D01DB94EFC07F7F93E8352629D58A986AF00D35297E20380C
DA59BB9E746F9D54FB65CCAAAD12F70B0F8FCC872D68EDCF031EE78F8903F6E8
339D784144EA7C2644AB8C52075A33AFF7D6C84E908030F052082DF63B3CC9A9
B9D8F5F4336B85963645B86896173F976629324B14DC3FA2755F1066AA136864
B735A9151194ABE7166CCCBC513E7C649F0AB390BAB3A304F3307478B9447972
E32EB4E3CBFFB4FDA43F7D1E8325C264181D0DEE0F9623EBB88565CBAC6BDCC0
6C61B915FC35355FD4D37538A4> |-
/o <1C60D8A8C9B799EB5D34ABF6B2172F0AF3B604D9C5F89A7D7EFF3D75D39C
BF75FD7E2E32623F422AE18CB4402B59582879E00EA40C0E3C089E3851F22554
4C073B76496200A91CF2FC6C7BE58C2FCFB8715B0CFE828B5C5B3B> |-
/p <1C60D8A8C9B7C2FB37FE6F829ABAB6758FCF01273322CCD13216D7408A3A
66E675FF13154DE46B76125F90CB7215B7CEE7BEEC77D97B9BA7AB0A4D1C12E6
C31E5440D8F83B6279CCF85924A6BD9D93A3EE22C1539B4F0195895CFE2F686C
770EA22EBFF3FD1BFA38B8F8A72671713C148D89F6D8A792DB87BB18B027BE65
C0C5F019B69290AB4712C8D78109E9DBD35AE262BEC95298F485900A9BBB5703
FDA5E9208070E21348EB686BCD5F26C9A7B9B83E2CFB2AD82F45B0C1EFD5589E
6F955DFE35371B8DC04678CB4198DF08B905D4053F4FD8FD0DBD3E6A8F74EC5A
7FCE4B8F8FD6AB9499E305C7B77A1EA3456D0A8E744AE566FD84930650C417A7
DCB75785F2CE2D8BA16021EDB07EBBB7C73216D9AC8062A383349F1EE1A1A354
6E0591186F5E0A31114F6993CF0F8F39D99F9B> |-
/r <1C60D8A8C9B730315209239DE1A896E974241039F4B88510CBB407C55A19
8851940B8FD077983858EFFAC8A2C773CDB708FF9B33DB38086B825A9A3BA759
534CCF035C197170A519D3EC34C71423EFAA5916AA287E89D4540CD36F2CBCD1
A888CB2E9F3736FA93CFF6D181D91C48A3396625B6AAC23B6DB9796F0A370792
5A5B7655056DD54298DD6557DB8AF4304DC62AD21740C36FB3243CEF233E5007
3060180FB4A7CA3637789029C94DFE3FB53F237D176C2649976904A55468DAFD> |-
/s <1C60D8A8C9B713D4BC3C72C059606B1E1A89540595DA582AE74803A02166
607FD7B446CF19DE4FDBC1865DE9E7B80285C6BBE9F3E26CD2EC760117968880
F76A4183C19408D712F35CCC679B1902C4EDA3D20423AC676849140B966D9CD1
AA7FFDB442D0547FF1F8680C632630038EE957ECFD7D55AC320FBB8236DB3722
1F019A96352D76CEF8F08B3BDC7CDC1608C329F9E1A6DFD3CF161F7A837642AF
1FD143A69044> |-
/t <1C60D8A8C9B824242125E7CF7D28A76CC613A1BC9B0F13974CB2C6308F3C
9EFB50149DEF86A1F92E5DEF46228AE36D9CC55D67181A41026EBC64E1136578
C87BFAB5FA8D12F4191638C990DD120FFFFD0FA6981B9616F3D641B8C2FD140C
195A24DC11D0FCAA655162CA057CA380FA118A59FDDCB86645E809208ED6DC8D
0F69ED> |-
/u <1C60D8A8C9B7C054917A0714A2EBA1BF78504B7FAF2C4FD5ADF7FE1B6831
607C85884C8A27FC78F2847B45163087B50B4DDF2A6F51C7E8D78E9A304EB05A
0BEB70F3F33F6CD93375E0DDAF09A457B72182231649141B08DDB7B240A618BE
D8E5A2EE4BE05E847456C0828C3BE635AE096E8F88441736B4425EB3AEE65163
D140E7313496FD1D40494F769EFBD94557024A9C9510B22F50C2194F33DE6459
468927B23DFE97164C56E239197E9DA8341831D2638340AE303E1E00B63CF773
29349D516F714A277F7B684B0D25A45B49C265EBA07488DBC4821D05E9831977
6F630077376CAA7D28FF335B465142386F484B22F7E9> |-
/w <1C60D8A8C9B6B7704E9B9D90C8344F5909E8C08A13CF7B0237D82DE203DD
C4A7911898DC4B01B60B9A7EFEB9108CE684BF6999B0DD3CA80AFDFF68EAB04B
5CD80EC435083C2E5BF78DA90596C282AB4F726CC3121152E0F1922DEF145459
A41ADFCBA254066BFDB35F1231AE9F2031E7ECA1CC9C4B2E210A7E18CABF503B
62E96C2AE96B9A21854275C734B70506C14EC89F0F5A8D4276745A0A76B21C5E
22817319B3120DBB944DB61364E88A2F936343388B61FDAFEBD006542734F868
43FFD2E0F807B97767EF8F2A0ECBC3F38FD532C23374727C6353101B7AC3BE47
914845491FD09783B9775C5065083276A03949D11650859C46D6> |-
/y <1C60D8A8C9B7EF3227737BFD50A79C051AE2BE11E5EA2AC9877CC522E8DE
EC5BC6D6DC4ED7BC7CA67A5A13E01F703B9238A3E62BBB69386C9712F8832B39
CA1131B8BFF4EDA16A11DC686468430F91BF0E7C8ECE3DC8B125185595C09880
7881C44BD299C07F8806D6D4B3E051C9D734CC51484F5BE291E0DD11AD653DDB
8A39DCE13D0A541A9C214F2F61737284BD59D8DB19998212086472D5795267D7
5AA87696D54EAE24AD0450D01D3F98E50796C72262E3D5BBBB52C8968A5B74BD
CBCDCDAC60> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/PHVJFN+PAText /WGJAAA+PAText findfont ct_VMDictPut
/PHVJFN+PAText*1 
[44{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two /three /four 
/.notdef /six 2{/.notdef}rp /nine 7{/.notdef}rp /A /.notdef /C 
/D 3{/.notdef}rp /H /I 4{/.notdef}rp /N /.notdef /P 
2{/.notdef}rp /S 2{/.notdef}rp /V 10{/.notdef}rp /a /b /c 
/d /e /.notdef /g /h /i 2{/.notdef}rp /l 
/m /n /o /p /.notdef /r /s /t 
/u /.notdef /w /.notdef /y 134{/.notdef}rp]
PHVJFN+PAText nf
PHVJFN+PAText*1 [7.472 0 0 -7.472 0 0 ]msf
5.81281 8.28296 mo
(Hindawi)sh
37.1264 8.28296 mo
(PublishingCorporation)
[4.50938 4.50558 4.13197 2.17436 2.17435 3.16809 4.34872 2.17435 4.34871 6.02094 5.29765 4.07974 
2.95148 4.49066 4.07974 2.95148 3.73599 2.43591 2.17435 4.07974 0 ]xsh
5.81281 17.0043 mo
(DiscreteDynamicsinNatureandSociety)
[5.78558 2.1766 3.17034 3.31981 2.81698 3.58136 2.43814 5.42694 5.78559 4.15668 4.35094 3.73825 
6.59998 2.17659 3.31982 5.0219 2.17659 6.21896 6.21143 3.73825 2.43814 4.50784 2.81699 5.4359 
3.73824 4.35095 6.43484 3.92426 4.08199 3.31981 2.17659 3.58136 2.43813 0 ]xsh
5.81281 25.7166 mo
(Volume2011,ArticleID262349,)
[4.56315 4.07677 2.1751 4.50634 6.59849 5.44488 3.73675 3.73676 3.73674 3.73674 3.73526 5.81396 
2.95221 2.43666 2.17509 3.31833 2.17511 5.4359 2.51884 7.64986 3.73674 3.73676 3.73676 3.73674 
3.73674 3.73676 0 ]xsh
%ADOBeginSubsetFont: WGJAAA+PAText AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
PHVJFN+PAText dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B8707CAD1BD6CC731392F68B8C8F3499087ADAF38B2C2
BFAC58C6D872911813CF6366127> |-
/slash <1C60D8A8C9B7DDB68A0255FB86FAE6DF15CC487BD0813C09EB77B80F
D40E841D78B4B082> |-
/five <1C60D8A8C9B7A73D3957DD70375BA417E8CAB7A83C6714FD798917510
4E63EAB053231C06B30515A34B0CE71F2171AAD5A0CF9ED262EDD95646CDC856
D8D7BE76B99A0F814CD892F8436EA0B6EBFE9535C51FB40AE4C504C295D3EE49
719BD9105DC8665B82B7CB8110355B3593A2C7E4FBDDE3C68CA83C499BCFE1A1
5EAA4C3B0B8C8D9FEDA173329B1B8200C2B177CB6787A89CCD38AE1C2A6B5723
D7C32A5A0> |-
/colon <1C60D8A8C9B8707CAD1BD6CC4A3D4A8A5FAF451AC7BEC74DF4654390
1766C20D341D62FE93AAB08FE57A12F11B1292704C9FD6B43B0D74609AAB3270
1607A492A35BAFAD9AD54B> |-
/F <1C60D8A8C9B7EF32573817D16F53708CDC5CF448387DE65D248D52581EE0
A6BC0A7E0D51996EAE03B0FB07C4594D40C749CF1D4DA20B661192DF6C6C435E
67D49577815821B311AAB44F5AA9FEF38A790FA474BCB71D01BA9B6E03CD7D4A
8E12AE78F1A80D11DD79A92BB9A9ED1BDB2335C72D928F866E13AB3DA478D824
496C5BECCEB6A1B32FA0D80875E7CFD829CD2B3EAD566DAA6F43373DC4727BD2
7B1687DE92B0B31BAFD68EACDE45F4E01D317E51BCB7C57A1911CE59C4E93BA3
A00460701792C816DABBCD657639350344E24886B50C14C9DE1C42EABF97C4B9
9CA2778E2A5C3B051D181A4817D3101760AF62D019F5B76955521BE975E63196
48178176B6A9A4C32F0DBA2E1A7753110B7EB2F3C8AE917D4AC9CD8EFA7E8C79
799FF376B0162EA99D4EDB14B6BAA65397E5F61B51B2EBE4F9ECBB3E75BE40E3
4A3C9B206040D8D8C2CFFAB02FA6806332EBDB35D35C03462D3AEE594AD0A7FC
6EF539CE6D02733DB7C5D9FB4B5C3B72747ED53BCFCF55B352CCB8402ED96F51
95822AC637E550A1A0CFBF> |-
/J <1C60D8A8C9B81F2C36D4DB231927B49C0FEE3CE8EE4305AA073E2D1335D4
A04355E813689D09A362616ACA6A839835CE8D3780321023EE943897D7388534
9D4B2AB3DAA2433F406D0A0A1A1F7CCC5E93CE8A9DF175E72FB380362C2A37BF
DE96DE93BAC4BD92BD860B7B5D7AAEED7A8873AEAC5CAF715DBEDD6EA2472BB2
3B458037> |-
systemdict /gcheck known {setglobal} if end {end} if
end
PHVJFN+PAText /Encoding get
dup 46 /period put
dup 47 /slash put
dup 53 /five put
dup 58 /colon put
dup 70 /F put
dup 74 /J put
pop
%ADOEndSubsetFont
/PHVJFN+PAText*1 
[44{/.notdef}rp /comma /.notdef /period /slash /zero /one /two 
/three /four /five /six 2{/.notdef}rp /nine /colon 6{/.notdef}rp 
/A /.notdef /C /D /.notdef /F /.notdef /H 
/I /J 3{/.notdef}rp /N /.notdef /P 2{/.notdef}rp /S 
2{/.notdef}rp /V 10{/.notdef}rp /a /b /c /d /e 
/.notdef /g /h /i 2{/.notdef}rp /l /m /n 
/o /p /.notdef /r /s /t /u /.notdef 
/w /.notdef /y 134{/.notdef}rp]
PHVJFN+PAText nf
PHVJFN+PAText*1 [7.472 0 0 -7.472 0 0 ]msf
112.499 25.7166 mo
(23)
[3.73526 0 ]xsh
121.832 25.7166 mo
(pages)
[4.49216 3.73749 4.15593 3.58061 0 ]xsh
5.81281 34.4379 mo
(doi:10.1155/2011/262349)sh
%ADOBeginSubsetFont: ONKBAA+PAText-Italic Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ONKBAA+PAText-Italic def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) MicroPress Inc., 2001, 2003. All rights reserved.) def
/Weight (Regular) def
/ItalicAngle -10 def
/BaseFontName (PAText-Italic) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 72 /H put
dup 75 /K put
dup 77 /M put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 121 /y put
dup 122 /z put
def
/FontBBox {-170 -276 1010 918} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-18 -0 470 482 689 707 733 733] def
/OtherBlues [-276 -276 273 280] def
/BlueScale 0.03963 def
/StdHW [28] def
/StdVW [64] def
/StemSnapH [28 42 56] def
/StemSnapV [64 76 88] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
39 dict dup begin
/comma <1C60D8A8C9B8707CD006FBDABC79DCAAEB4785235BCA516721A4E4AB
66E039632C6EBC8053B762E6CFB24442AA> |-
/zero <1C60D8A8C9B7A73DCEBC2D272FA87080F184DEDFF24AD1827389DD564
3848632BE9A03866D8A269E70CE280FFF943704D070CC0F69CEFDDC249453107
F31C370EEB4D6EDC8C3EE9B8392C16C4E0DBBC87FE0AD3DB1EE6F8FF3DE5D3DF
BCC4D480F87243E689F7F9FEDBE> |-
/one <1C60D8A8C9B7A73DC6076768D109D3836E5F681A383036CCFAC2675D86
92A0E464E515E77622A69C15B2356BD874AD9CE6430FB3242419575145D2494C
9B6D07779F208870060315E6D2FAD2BA361E0C63CC167C839EC857E193B60B28
FA3D71773B3DDEEF8CC97F33886F18CF> |-
/two <1C60D8A8C9B7A73DC66CD604ECAB1FCD5BD6F312BE35FCE6B577E7A3A7
8693007680853824451F53D2F835054948EF8D3ABB27315590D26A5B4E2D7586
0757F1F84AACA8F5F875B8B8D3508B59172873BFD2E5B92A5F1AFDBB0EA0CFF1
3B6A193E5ABC066F06C94954F6A96372A92087C484AEAF3541F4EF5115> |-
/five <1C60D8A8C9B7A73DCEBB5F6D633B8D52614B261EEC17E9F36F2AE9EB5
A278EE068C54EA5BE9B3E8DC1642E90C7F3BF6609DC8990CA0093021E87A880D
F180F2E4E323EB23A71AA77EBC421C1CCE16CB3312543A560ECD2150B9E0EC40
97A328CD5D832CDF9A0E4656529638A6C584D43DDED711D167F8AA7B77A063F0
7B7DB37B090FC084A3A4469F9D02F60612CB675F6628C818689357C01AA82855
003168285437F7CA619069A3636> |-
/six <1C60D8A8C9B7A73DCEAD15802688AA3A839239A74AD9158584A9A253C8
B03406CD36FCA75E0691DDA94AB994CD8BED0F0592EC78028E093351AB1D9703
46DC869561F8F170B3C788EBE157EBB8F10AB9E39630990BF2E8EE0E45D2F908
F7A9CF34E144268F58D8892667BE4F665B8A3EC7F3EDB31BF85B42512D59D688
15BDDA0980D7AADB48871A1C35FBE1207377C8E0A1FE22E0FA3F023394EE> |-
/eight <1C60D8A8C9B7A73DCEA16672B42CA3399487E2D731248191DB337EFA
DECE3C595903A37964FC71435B461E0817D02467C6882B612C531D6F3EAA337B
852581FFE4563B959ED4CF6321F504197048BB26E225F1696B3D461A2A375218
C14661B0018BD6D53992373A798B0292172B875FEA9CFF02C297C3CDEEC6A24D
997FCB32E2D64025D260A1F4D71A7980CF356D5A8AB1B2D0BD227E57777611E9
5A3E74FF924C461F97E0ECBD86D2E077BCB14AE9579994DC9FBEC35C7B7DFDFD
AD2419102DD7507C2E> |-
/A <1C60D8A8C9B6079F1DAFF944DD9E3D7C769FD00BCE6916F0A844AF30BCB9
F16C6757801341B9FCD0E6824DA85FF0D475A335EB5FA264DC440FE2E0AC603B
709580863A0FD1721E4E22506E5D8763516D89085A1D205F812F9478383EB1E5
99178B3CC6733A63CF505A629C61E94BC5C32CA60C03E2172507A7083C4F5319
E68F542609007FF14BCB769D1064F0CA57095BF1053710840774C6CCE7ABEBDE> |-
/C <1C60D8A8C9B64EDF7AB55328EBB8E7B2BC8227FDE144AC64D423FCCE691E
6A7E1F84AB2F900B9E60FE066BC2E919497C5C110D71631D4D285529AD9C88CE
52545BAE2B097EC4D9CC8FB5278CC0A8B48AA7B62975480F1C786A9EAF36B22A
A8A6D60425B7F10F540318756AF9FACD17464755D99B> |-
/D <1C60D8A8C9B6FF868A10AD16BAC730C92D81091A3D59A3ADFF6D49EE7900
1B3E9CD0242FE0A6AFD1D9B0546C01F0CFD05F0AC5D4C8D8907766EBFF576A2A
3180827A3C7E7024A26472ABD51EAD8C12C8A7B866A96A020688A6A5BCABA60C
5DFE8976E9F7878A30172D4C6AA75B10DB5638C1B5058D98AC9142A2566FB5CD
D3B5291DA28CC1E2462BC4AD21756F1D71DA7A96E9328D3CCD2DF87F04E4088E
8EF23F5B958D2EAB47EC3A04DDE63997BFBA7C0389E8D89A6B3BFF3DDBCBB9EF
329CC1C3259682F4AE9C5D8E> |-
/H <1C60D8A8C9B6FF868A00C423CDB9588AAFBD2419EEAA13873A2640FE0B4C
CC5883CFF99EC4243A9D05FB9E217E7A127BA100D38963CB4996D43A2D3C3162
FF6169A74E7532C3AA1AAA2EBB37371363951B7ACBEDBD54714B68FA13AAA7B4
445A003FCEB8728B0033D1E5F503DC06F231EE994735C8C331DE1B68329692D1
84DC422FC85872C95B9C1DF259345C5BBA440B05A6676996864C13A3A8B95F8C
2B183B5E75EB165522546290A8069EC31C14BF21ED85A85FEF5E5BC47791A10D
0E2384506450A200A43AE3C5634B1A8A989F213C0F84345397824A86A4BA7DE5
0F53853EF4DBE6A4CCA33180BFED296EFD52F4FEAB65F902C992E5907A8B43E3
D359C151D0490C394E5E4C35AB73515AFB349FEE99A2> |-
/K <1C60D8A8C9B64EDF8B80D7ABC4F21CB023266B39769731EE67B20B5DA55F
4095031082E7DC617EC0B5F008FF3D54F966A5803254FA06AEC3DB6931AF71BE
13D9BFFFA45F0AB9E764E271698AE61F31D66583B3C59FFA88D8968821AEDE0A
BD096D2A7C498DB2A7A3B9D4CBA65459B5ACA937B535510A322CA25CF852AC1C
A9E1CCBD73F097023BF0C97CD5625C162F1B188971D4CF81EAB2965C44A20AF2
20CC3333374E2D175426E8CBC96E1E058467AEBCDC1BB38CC50F36A05F328F60
4A73A65E6176D40D623A79610889432FCB8A6A254AD96DE07C2AD15689E65871
80D2BBB53308175C> |-
/M <1C60D8A8C9B5D6EF3D0A29AB9C51DCFB082CEC7C29B6848F7E33ABEABA1E
4655658F206FA54F3FD1822839E0FC8FD8D638011A6285DA90A3CBD7701BC0D8
F073E4045C868C9730A7A3C3FD3EF4E983FC417A848EBCD9FE3397E5D308D01D
5AD4B73C5F391D2309C2678C1FB2AA1734334CED334B0491A56549482BA93199
4C13DB723DF25894B6D8705C916B1DCC2CBBF02B2A2102CFC848CEE0527CF829
A5418BBF3A3F149AFE53D9B5CB4C872A274EC910FDFFDEEB190268B65362FC6E
C626E98E1C34E49659F1100D0CEC5F4CE02C2BEDA4F9CF37EFCD2065DD114083
93DD03A7FFFE688AB2F620DB4432EDC47507E5139B03EC13DDB069B3FCF6E3C3
DAAA503F182F0B52111377171A0F5B33C989003C2168> |-
/P <1C60D8A8C9B7D8BE69B6551F4D36379D9780DF81BD66BB9D4B69A8C7E181
49B0D49E284C4F2530321D0DF20501E96ECD1740420A070F0937B8F12E7B031B
F6A56E3FBBF4E94AAE18FC47B4CBBADD572EDDC9FE2A8703AA4F5D012D5406D8
2314131FF97D21CC141D2841ABAE85E5E85B264F20EE87D6019B7E18121AA3A7
585060F8FCEA06F36D79DB680DF0E64D770BDF289B1F2F7EECEC4251EBF5EB8D
D0A9D93CDAB3939AD26ADD0B25276FBC2D66DB59561E459B4D7EAAB8241DC45A
E3CF5C8198749E8A205B70> |-
/R <1C60D8A8C9B64EDF8B8D53403CE91B3064F7F11498A6650ED32ADF020DD2
63CE0D0CB141B1EAB237643A93521F47D0C3E544CA85368051B1BFA259F2596B
ACCC2020038907E87F1A4490B43980090A1CFBB23B909FA8A11C216099299F8D
0CF39B5FF9D0719F93C9938407D15D5E65FDEF99C45AC15D6F97C31397C1B158
54AA2029FAC9D2C043DED2D88F93548AE1AE37286031DF055B6681C6E1C50EC7
EB529599125600E60BCBF5CC8943D9C1F027F1D3D0038A3BD375ED8170661062
EC463246139BA5B8F6BAA7293D9B214A56CB854AC95A499E5E450DE72B138D9F
5DD235349F> |-
/S <1C60D8A8C9B7EF32A5CE17E79E33571045E13295CB210A5E7D81C599BEEB
439E21C0A473D8F58A233CFCD4149EA19BAD5828A58C9FA85B845039818E343F
E079B83E3AE3F11D993F45CD93DF93F3CA6C5261B98B2BA17DDF29555D7DEEFE
6EC6EFEDEE14134C9557718B4BDA6D41EE14910944F98D9FE357ADEA6096098C
938FB22CD5F5249B3D874F71FCE42B92313F5AE8FB623B926494EAFAAA26BB10
886D0F618E90011DA3A4229B> |-
/T <1C60D8A8C9B7D8BE69B65511B5BBDCA02122A9AF5A0EE5F8975FD10A64F0
D1B685F82FF03F23A995A5B09CCF8EB5ECF9BA878DD60675EF628076780E3CC5
B78D8BA503BAC4E0D8F1645855D36E0280D296C55B5D02928F116B88B9B8FCFE
B1FE3AE05BA8AA57B89B5EAB59E13CCA68654B6CA446913DEE26D0694BF9B0F3
49BF7EA9D421E527F4D6C04844FF16C6C5EF4C> |-
/U <1C60D8A8C9B6FF867B4A648601272014CA6612D09EDF79D257A69D6A7D02
ABBA1899F14C67FC2F3DEED5B9E31BDAD9E08A9340D5BA80659C2F35EF3B822E
646CF45EE8E555322DEED70A0812E55F8968D1EDAEC1F8AC8D86ECEA6AC10185
9E555B45D529067211530D4F62E6CF1FEF007A3D974D083DB503C4DA52E7B5B6
D9ACE096348D9CCD53D841729BFF984E0FFB9297D009A303AE01BC5D633A2101
C2CF4F3EA668ED9D32FB8E04BDCB100831EB43AB692A7043985F35ACFB1F52DC
D5109D88F37BB4CA7800A8E930DBBDC37FF109C996EE69ED1D93646D150103E0
180C495113A48DEB08A20B7253E2CE08DBA6> |-
/a <1C60D8A8C9B77FE2B9FE012C632F22072B736838F5C66DCC16A9C5025351
21F53C38B895B72BA18978B5FC16A5C0A8B2AAD433557F3A0577747F21DC162A
48A68B6A979E90881D1034BAEBCBBCC5264619AF723082803BDE37E0831F2DBC
C1A1E9697466F2FB007B0105AC73C546CA9926CA361B2BC40BB2EB0AB4E8E1B9
ABB53EB311BCA83BF95967CFF3AE0BB33849D047C234451793787659B52F460A
1DF3FE074971A045E2E5D56D55038A2C3A4487C37E7A29608A59D2F321AE0D8A
7A4C0F0D91> |-
/c <1C60D8A8C9B704CCCCAF7C44AC75C1A5378A8417EEF53B87954F266F9D57
DA0183337E34EBDE073DDB551573FA27805606F88D565E803117D4A512854BD9
0D8E9FA081D53FF7F6F8430ECA7233780B625145571D2B535AEF3092E2BCDA5E
B6F5957CFF228AB360413C40A673790001> |-
/d <1C60D8A8C9B7A73DCEC56F7CDC5FE09C5E5C6E037E3B3D11412893308E2F
F4FC714E4186FFBE3FC60AF6E54F2E5AB6A796625D892458E0796E213226DD49
DD002B21404B1CED6C243C8CD32033B02A56DECB11C03FCFA10DEF3FD6A93BAE
BA2056E862E4F8ADA226385D9FB4A9294AF4E701315ED708E7D0FCE106F478C6
9D2DADCDD80E94A92662820BDD2387012AAA8B650852D6C49279FA734692F581
004664F22F85C693FABDE70821E0C8998E46D6BBC4650E103AD3A11274A6FE4D
B4E272430DA38B5411BDB99FA98025DED924BE84929E01DD390B7686032D67D8
1B47DFD7177750> |-
/e <1C60D8A8C9B7361F75D640855CE6D435A5BC10A2DFD1011F016B3F1F42B1
944C3E836ACFD7475B57E461FC04B586A6C09ED57532A247A02CDB5255FFCAB6
495B3FCCDA9F9BA1AE5C5285D83BFFC3B5859698A97E5222E5D3621AE3529D4B
54D5F148D6C4356414C76867F84EE94CF822C3C2C89190D39AE83D0AD4016F54
1BC61A7BE9069275C492BCBBD28DB617F20EBD20E3A9F78E8A> |-
/f <1C60D8A8C9B854D0F8C5FFFB050B2055DD4A9977E3E9EDE69893012FBFAF
59710C8A4104DC9335E27CDE93858EC5BA6BA819589DC0ABD190B81877E067D0
281A1C64A5450926EE6F8FDF47C8A1CD0039A898B53D97C4146ED0BEA9CDF469
87302E87CBC1F1A31EB9B7B2D524329AF2A16A5EBD8DC5C5CF322E903BE6596F
CFE352E0E5E67D01EFF3DCF7301DC7FC9697678EFBAB519BAA57E5443E37A698
DD54E9B55E492D80348D98B0ACB6B50010E0EB98983F8FAC58813D26F70029CF> |-
/g <1C60D8A8C9B7A73DB544F2688BE10806F786BE67481232CBFCAD578807B5
E4230756C12AF3D4807A310E3F1FF2C04AE0FC75706D5D2C4E0FFC9988C6D904
C85CC2E47A9839B567B511E2BBC5CF0816487495426D32914D12C23A3F1C03A2
6E2542486544593D3058D9291DE1DDA0765EEE2D6B863C092C831BFBEE8C5998
073222C6E13EB0B14DC2E5F75181B7B0BBF0DBFC9303217D67B8AEC83BA68676
D769636659EFD22B7E3BA8401617D2F6F42F3B4FFFDA66A7D2FB468EB48046B7
582C3297F0517D3FC33E8F1FE22A4BBEEF9E2FB69A280171EBFCA54055A0CCFC
A7E478E84743B24D3E9D3B6DB6B178C76D262C806E4F0E1062B40DE8EEFD87C0
70BD118E98448D94D5C7F16123E919A435CB69E2DD9B09AF49D6ECB7655E4799
85B92519E5349EDD640B2E9A6EBF73C9E6D1207F> |-
/h <1C60D8A8C9B7A73DCCB4857F716D4687C428323502228466B9C5FE99FFFF
25220B9610E0F7FA7D82145F7FC6133E63DC1928DE16ABD59EC0C4B6609E01F4
39CA2C9E21C0A809041F6ABA00CF51AE2162A00DE535FDDBFFD81677B6CE38C9
7AF59A5EA457FAC646AC10A42F2AEC92A0384E15E723DE10652CCA30ABA2D635
6349F66E153BD0EB1E30AFFAB3C337C606EA8BB0B5521683C6E97A614AABFC85
DF7B4F1957F6F80B88F146D409BC51998FED05C44D67C68A88D5FA548939681F> |-
/i <1C60D8A8C9B854D081B4B8B838BC0A4040113A6948594F2E97E5A89CF664
10E7BB50BD956CE3F03864313E733B0F043AEEEAC0710849384444CDB89D927E
B85A881B0F7FAC788FB31F7DE7CFEB1B5E46986BF730A178DF61A8A7801BFA63
28FA1B8D2773A947AC0F1D7E1A64AD464380C358DE99FF83D43510D45ACFC74B
3E262116791A8785F3E91848C1977E3ED5C1E170DED187300946C3D9A23D69FD
B0E117B54D8315BC15CE58BE04B043> |-
/l <1C60D8A8C9B854D081B4B8B9EBC4B20CEFB816F017A07042C3BC0C1BBF6C
7FDAEC45A114931470B6460D3F8EE1BFD03AE1AB7632D8537FCD37DF2013420A
6E217DBD64E763D9B6E8C0FF49B8F7126C7A688BA64BCC9ADB86E3227C761B95
10EAB10EFF9196C4CE6ED19592> |-
/m <1C60D8A8C9B6FF86803649210238281120DEF009D16E9EAEF8FAF3E5DBF5
968C86E49F0BEA704C93BBC3C56F9CCD94444170B54304C61C40390183DBA32E
D5AFB9E376CF0B0C6795A8A055914F9FB615A44D2C378D5D53168D1AEE4633AB
EB04128A0B14BBA3EDF492759484F2EAAF4B497BC508C40C5366399299A05FD0
BEF707EBFD59F329362ED781B28F54E5014AF5A4532F0A66DC2DB71278818D43
AF8F22E9A1B445C2A9F4DAB70FD7C8452EE199E03B589ED4D68C8075B08721FB
98161D9CBC9D41B4690910DC3D5DA92B31AB88B7C2418841238FEFB3784D08A6
A0C9F30AB324F01034BDBE318417A77B84C8A76F028E181BC68A65F523892421
AACA8273E3C848DFE5CA09CD3D15FD62613D660DEEE5AE34C98410286B018B7E
70D267E89441A4D7> |-
/n <1C60D8A8C9B7EF325EF9EE6DC9A607254DF3286CC303AC6C1ADABF0BBE37
1506651458C07FB9D3D9B2D6FAC981C92FC58ECF71B507FF6E69B1D42082CA75
25A2AC8583AD481B11075671FE6DF6093EC679472AE92B666BCBA2DA85CF4544
A52F240F74279C96CB9DAEFAE3FAA552A0FA8BF379339BE54D8EC0306BB34D19
78FFBB23B57AEC055470CF14AA0C3A979AE249835BC4137F618A604C71D9A749
EBF54558E95C3008C7CF65DEAFA7FE9916F54D1A8B61F4682507E8E764AADDF8
FCFFC029AC68A4DBC2068AC891160E85581B37AD41FE03FE42EDFCDE37B010A4
41DD9F1EA130> |-
/o <1C60D8A8C9B77FE2B99E96EA261DC1D487C7D9815EDAFE7B107D09E1F6D4
AEECDE2D2875107C1149D2A552DE2A9E278F0E6FD1352004590B5BDC6A18CF61
9B590FE7EC9A4670040863DFA14D31E7C94755DEF348133746EB8AF4EA6385BF
445BB6C59485E19E684D3F60EEF1D2B87BBEC0> |-
/p <1C60D8A8C9B7A73DB57F9E42AB87CE4B8926F0FECC231124618AE3D04558
31C947D6CCADDF3BFBFF73E743ED49D7699B41C0488A928B6EA1572DEC096767
61745DFF88E3DEBC93BED4C007F9983B0B331FF65D654F381283E781C9B327EA
5965EA5DAEC83A03E593860D075C5C453C68EB1958D17EDCC89259CA11D71B16
F6B98968AEBAA27F90BA5C296C4DC31725746F5B149D6331DCD7C0B058420E11
91F045D120EDE50B1AC8E65362A5389AC73D8DA619DAD914AF6A576F17BA8839
9CBA95FC2859AFACCEDB8EB5782CA78F3787886D0D2D57D559ABFDE4EE92859B
4007BACE879BF35BA48DE4B8F23EB4036E1EEC59> |-
/r <1C60D8A8C9B7361F626C53A6A13726FBB783AED353F21ADCDF1C735E0126
9485CC309B8A075F0AE100AD898CCE9198D8ED34B958ACF3D001329734F6E1FE
5967BAC3037E070A52C3662170B51B7A7E950A26C38D8E215FAA7AC68571A273
C33BFAF52CC22CA706EBB0AC1E919F814C1FE1DAB2017FF526340F3AAD169164
71D02821D5F7841A9C0914C3C127376CB0D8C1FE1D204D98C708F9C1B12821F5
37D3> |-
/s <1C60D8A8C9B7361F75DF82DB14F176606FC82C51E26A413C1F0B2932F8BD
0073C234751192D667550545DA6646A696AA9AF5D99F22E50294B4A3E716C999
E3EC50903EC6FB8123CB94D1A0E6D3057B666B113019714D7EAA537E63193EE9
DCE6176B5942A41A55008CCB5FAF6DB4616E7D89F6B28880C29D3353AC565859
476663A6E53A83520EFED63F1404731978184CC5A4C08AF58507705D30D7D5A6
92425F9B27635BD412A1E0103854B98F97CAA2D51267FA1848> |-
/t <1C60D8A8C9B81F2C4F66781A2138EC2AFBB883063062251F1CB8062CA2A6
0510EF080AA188BEDBE73F100C4A34AF1B8DF5A34ABF85FD5EB48C85B551D89D
2FD949CBB0DE04B3F910CF2B97CE9BE5F1A1A22D9211113FE147FC6AF02D53D0
2765B34C1D8CAF441A0CC49B309254DD5487BD2EE76148872C8D> |-
/u <1C60D8A8C9B7EF325C49CEDE2146D999E99B93129D0E81192F77EE600FBB
ECECB700FC453471DBA7E96BA87FBCE15F78C4AFB58A70EE2ECA3B73CD2E90C1
6A2C0D6E07D4EF964DC7B9673F963AE0CBBF556C5EACC7955BC7E0F95582F829
270B6AD05D4D20E8F4B4434F633015451B6ED3F1A57F2672E0F2FBD62369F122
A3DBA6ED45C83771C057D232D90A86E3D8666A23886A5646C336D02B133663A5
D1E1F784AF23C4288EF585AA7281132AFF0D19F1FBDC05EB836945530B665182
F8879FE628CB117A0071A42B00E971DDF0237F8E14CB> |-
/v <1C60D8A8C9B7A73DCEA9DB4E3BB34C477FCE6F4C156341D805B569F72BAA
C9495692F749869856AAE162FC02C02B2797A51489C8537B0746AF60AD65B69B
6663E98C2261F62FA44A29F92226E6710F5BB2A52F16E9E0AC7637BD0817215C
F883ED4E1B5C262FA1BA5F66D5022CCC1767046FB0E89DEEF56FBBA25E730362
2DD0F699C8353CBFBC67DC6B427D4F894221FF6DD16130699BB2A4EE4A0B3574
346FCB185C391A51511F75726073FD7D24FE4A8956162D57228D6D8F1904345D
355CC1536DB8B33AC01740C1265F52CB2BA2137B423F65AA60FFED225954D935
39DE185F84CF9C7760471E45CCBA53A8309A353B> |-
/y <1C60D8A8C9B7A73DB544E0E41D08C9DE151736A72A3373EADD217D90A719
847EBAFA95A55C15C1D424DA88C0D1273485536374A44DBE9F38126288EA3800
441D94F41DF5DE3E44517BAB615859A569BF247F75CD7A1D353BB9C7208E48D0
2F057E5C9A835CCFD7BD9583FFDB073125706C3FA350A4B80F9BBDD5A8B950E5
DCA9B910E1981B5E0B54A6E1967BA40C7229F138D026C1C3BC57813B00BC9B81
C4B057305C2D6FB1974059D09853A530FC3E8181C44E501DB556AA01907597B6
43E6C7388D7F27084036CC5A9E9E9DE12176692B9C29EEA456FBB8B0EE973757
0812F3A139EF580A671B0C06CAE6260D79F4101DE3F11512EF5D287160091C67
D79FF927BCFE960FE0C63F4CE6324D> |-
/z <1C60D8A8C9B77FE2A0706A4E11D2596B41CC38720BE41875F0E481EDD23A
6FCBC2464F66D8A4DB3030C8EF4D736CF04D8FD36F9F4199A29E43F96709D7BC
45BC59647611D13FF8ED2109A1517D167D394D162F0AD4DF97B8723B28DC0F34
673A7A142AC577856FC7732C95A1F8AB6E2CD060C9323FC295D8E2B1712F7892
DA958F0C617E6433BC5C36C6B529BD9FCC3B84130680116324570B5CB2D2DE88
3C315398AFCE0027FC387BE39D48262AC6FDB5095C55554921DFD770B197C5B0
972BAA242C87E1C38BB9A2723E17235B36482C206A009D3C954E068FD8D1BD07
C8484F62CF63F6DFF4EFA7> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/PHVJFO+PAText-Italic /ONKBAA+PAText-Italic findfont ct_VMDictPut
/PHVJFO+PAText-Italic*1 
[44{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two 2{/.notdef}rp /five 
/six /.notdef /eight 8{/.notdef}rp /A /.notdef /C /D 
3{/.notdef}rp /H 2{/.notdef}rp /K /.notdef /M 2{/.notdef}rp /P 
/.notdef /R /S /T /U 11{/.notdef}rp /a /.notdef 
/c /d /e /f /g /h /i 2{/.notdef}rp 
/l /m /n /o /p /.notdef /r /s 
/t /u /v 2{/.notdef}rp /y /z 133{/.notdef}rp]
PHVJFO+PAText-Italic nf
PHVJFO+PAText-Italic*1 [16.1893 0 0 -16.1893 0 0 ]msf
5.81281 87.7349 mo
(ResearchArticle)
[10.8 6.29938 6.29938 6.29939 7.18967 6.01282 6.5874 12.1225 11.6903 6.29938 5.39255 4.50224 
6.59062 4.50226 0 ]xsh
%ADOBeginSubsetFont: XOSAAA+Palatino-Black Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /XOSAAA+Palatino-Black def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1991 Adobe Systems Incorporated. All Rights Reserved.Palatino is a trademark of Linotype-Hell AG and/or its subsidiaries.) def
/Weight (Black) def
/ItalicAngle 0 def
/BaseFontName (Palatino-Black) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 49 /one put
dup 50 /two put
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 74 /J put
dup 78 /N put
dup 80 /P put
dup 83 /S put
dup 87 /W put
dup 88 /X put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
def
/FontBBox {-160 -276 1167 943} def
end
systemdict begin
dup /Private
15 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 689 708 464 483 670 683 737 742 489 489] def
/OtherBlues [259 270 -276 -257 -178 -178] def
/FamilyBlues [-18 -0 689 707 453 471 674 683 730 730] def
/FamilyOtherBlues [259 267 -280 -267] def
/BlueScale 0.0479583 def
/StdHW [77] def
/StdVW [175] def
/StemSnapV [175 198] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
36 dict dup begin
/comma <1C60D8A8C9B842576D2046CC8F97300B131BAD736E3BDCF51338FB5A
DC9C317ACF463A2D1E3BAEC15D6F59D52C1A464466AEA42E9475A4D94A49> |-
/one <1C60D8A8C9B7CB3517E83F4FCF7D0351B0C1F6B8756EEC168C8F41EDA1
0DDECAEE13569D086E62A95FE78BC221F2D58715EE36243514BF6FFD06677002
DE1A05353C97B725944F42BCF3D82EC43DF03B75CBF8E730304278866A4F8534
CF70426719F8F5B97D57DC14FA1172E7934179847FFE64C981B0DCC67A37C5D4
6550C9FEADB3DB4FAE272FE886376162A4D129D4932E5D037792002625FD5EB9
08> |-
/two <1C60D8A8C9B7CB3517CC9A35C1077305FA372732C29A40421D13426B40
0FE93D6109E91F8B2FB34ADA4E3027200467B96E091C841A3C4D1001FC065888
43C34F53EF1B416C02749F9C9A64BEC351C516D0B469802CCFA940C4E216E9E6
D5EEA97EFE6D2D741965659D03BA711401206647C0FE25298C3B4948F9FC6A39
B0D3ABEEE56417D7B9DADD8C19FBBDEA2AB5F17D30C4F87C59DEC8710BBAC5BE
282DB5333689B786008D73DC823E14A85B81BF8801B7F80A390461D9778812B0
7B6B584B2C2001C1B1> |-
/A <1C60D8A8C9B6EA91B033019220179FC5B77C2AFF13B9E5809A6CDFF6B32F
D14B8F3B49F809E4BB436AF82A5C5501315563FF785EA25A3303EA4260A7798C
3588056510179263B405136D15D82FE834492EB6A0B04FA88DF1491E19E677F2
0C500DFDE54A576B881D101A7683B4D924C1F363442A035EF6031F23B7E7F296
7C4D5E9804AB1B014127526115CE248A45FF5394373FF66D4467FB296A3DBF04
E3AE73E884E1A39A19EAA6CF01DDCD82673A9F22DE889F3E054F51F5E46AD300
C5E32E2E5A287B70BD51E93D92F1EB3DB4F93F460385D1B41190> |-
/C <1C60D8A8C9B6EA914E0907502660E7C247A29F079A80720D14D64C46F25F
FE0E0264CCFCF6D300F0543FD9B5091DF9C8DC2FE2D1894278E6E6DE29F82235
136F37F78424FF9252CF4D509F9F66418D0C158373DC9D139139C71784CF303B
D6C6A6A60524E2EC412B7E6163D17BCCE8480706DC5F033985F44A45> |-
/F <1C60D8A8C9B7CA645BE71B371ACBA1C01832B347B751541787FB5EEFE9F4
BD1E9B08833B3C87B9B5DAB2DE0720C08B624C970386E9551139A08F1BF67021
B25AA50644330D710A9974429C95E15FC07B5F2F4E6F5E54E063C0FF5AEA01DE
108FDADFDD9A6CDE28128FC045530E3CA20EE9FEA803F380F5EF5545294E112D
011F6682D79105268C0D1942AB4DD031883CF69351FA5B621F47D94F0DE3A0FE
985B1A0BEF8F4544BAD7F33441285F194635E6785F506B111D96867085788E00
0DD2301676802BE34049E69802D70630BDA8112BB9B65B802AFD35F1101F31E8
5441045387588F45719D68A3FAEBC71396C21840CB44F765263C057A2ADD9926
F0FB088019FBDFEB35407DF69AD0F92F82E7E013CC8F7D3D9BFB9D30C0659465
930017665058C3A6AD007447A58F660D5ACD3AEAD451B1F95F631A278901E6CF> |-
/J <1C60D8A8C9B71131DCF1E60DA839F8DCD63A409682191CDB7900F6750976
CC3B96AC7149CCAD4B013D12437BE9322C09CD1BDFF75E18184D9DDDEDCC1048
D11760BDBDB245A61E5BBE1E8C8DDA37158EBF5A562F348567586123F6DEDACD
899D749C048322B079ECF55EB24723C1C4FE9185111852C040D9C9632A0E8204
3063D267EA78CDE8053B3B12ACEB4FCBE19FE405B65DEB02> |-
/N <1C60D8A8C9B68968234AA3C47FC81BAC70553C9805C9E2330813129F04EF
937A8D1A7684B6F93862A182D39020906BC5B528A83D88C59EAC653E69B5EB57
E837A6CAAD1868E36F06DFAA1D795DFEB62A89BD58CD513CD9E3035D7B8D449E
E6BF926AEEE3FF55D6F3B61EF4CE94836E849A2FE8066EBA7CC01D1713EA39CC
6093D94A136E4236821B2B71216C9D3B0639BDA6E028812F369D709CC5B8B56E
A6698CD4C017C38353E77EA78B36B90BEAFFD43E47A4BB1BECD12A398399A884
9D62D5E4A8E4A5BB1EFEC4F0E524CF331889926CCDA910F811164F9F4680CB4C
1CC22E6AC2200BB88C902E1F9333F3D95850A2A1EC5A2DA231C11EECFE419DBB
B1A7F7B4C76D5B3D90512A0701916680737A24A68E98061CC3DB5A7DCF6DA1C9
6D6E4E55706707507EC8B1EFC05767781D3E14E2445FF51F3B368FFD52768494
597DA8> |-
/P <1C60D8A8C9B67DB5F96696C3CC86167D0CB09C6C3DDD8D19141DC2CF709B
CB86AD971812130488442BAE79525DB43CBF201CAB5646DE197A1AECECEE589F
B1840CBA73A52963C27991DB7722BF63C4B44A1B999F64A1D55771F9F7B6E346
75041D9299C95794F6BE7DC8823EAFE45C9D02C931803010FDEA1E2C6DCBC4CB
F4CDBAC517DCDC0EE70A837148C3F91A7228E3540D09B9F8856E4919203993B2
10DE825D5AB7FAF382816A5CA66C28E891DB1E43D5346446AE9C8A5872DAD427
732F4DC575FB3B022BA28BB31E53DEA0C5872AEE6FB4E7655EA2EC42B48107AA
816D25C79A1C8FC722E2> |-
/S <1C60D8A8C9B66B39DF74DA4C06F0C8D0991D01F7F83952C6645A2762C7A1
EEFF137502F815E7E01F11B72AA91A6EE22DF3596DDE4CB356CB4C45650F1D81
510EA06667E415F1428E5BFCB2B00F9C8A7998B30D9568F9A864DD0BFE7E05C4
9771BE1024BC6D09120E8071619942DA3B7B7A350A4CBFC8D3B14656919C2562
68DB32F9C7F36D04374BED8B70898F4EBC27E8703856147EA02752DE7E9B188F> |-
/W <1C60D8A8C9B55403698DD68BCA34412BF08C91A89F0BA129B3386015C849
5B6FA342B26DA96F093703BFC148293EA284DBF974CD9663F88903A54CE68555
1BCD76EC116BD18E5F80314B021D38F263660E2D2ED3B0B5F6A9E448A842340B
DC4351CA2537D4BA2750FE2A9AE9C73C11D055041956D5DB2ADD4A281C348227
2D42E45CCFC8CD98D82FF053DFC5679345AB617F81C699CB27084FDA317754AF
15A449C8441DCB767025EFC0CB74DE1F93582ECB16DDBE9976E2BD722999C5CB
5A1507CC096758F5F0357CDE10E84358EA5353F37CDC1D1E313E1EE949B5566C
BB31A2B50F31064B> |-
/X <1C60D8A8C9B620B7822684DC047631B8DC998637047BB96B577670757612
58FC32D0A35A536ABEF3C6AAE0E0A6C81B0FAAA1F8542084C9760C2C3D5E7EDA
BA04548FE25731A65971E865FACC4A8121998D50C5365BBA899185D23A11510C
D81D9F57AC5F7468D163A82CE10BE0769AAF27F950B1AE73DD95E92EBEC8AA86
FBBF400D80C45FC558BE90DD9077C49E6329C4D6CADAE4B8E23C61FD268A5272
1AC01D5FAA1FC25AA70516AFBACB82C78041760411C39E3C5F9C8022BEB52430
B1024225E1D59F59BFB3DF1B95BB361E6F3CC9C42F70D49CB9D554F83FB50628
143F137D16856175C924FC14B7372E9B2BE21AD8C1D7EB2370BE42AFE3B90BC6
CCB073D29390BD1EAD3C75EA1B071DE918B5D1C00FE50015FBD7DC1A3B12CBE8
D5CFBE08D9ED70E90B622B> |-
/a <1C60D8A8C9B7EF327C10274A44466030686B1F37F5C97B18E7560054F266
1EC95593CDDC5A34E1F97A6DAF69568BBDB54A22D55130C1B2F094CC54F73829
DC297B94EB35F7898FA41251300EFEA7B1B1AD423F474CD161D29CC99B8FAE77
A6AFCA4C82EB7628E118F6ED648631D4C2C2AEABAE1B9D77563567BBCC21AA8D
E8F9FE7C924A6FCE6E167F596F477E8A291361947293093EA4EDDEF6136630B9
2578C78967E0099FEFA6D9BFE5D170DF41750606A84E2032849E89DE89AF18A0
8479F5B80E978A7056> |-
/c <1C60D8A8C9B75A17408E329CC0E37C609A39F7E9210646B9C964694458BE
8709D45D4DDB6AE8FD148B06EAEC635D968C1A8DC4CF568FCF7D65899DAFE6DA
524D44FA4FC24C323600F20DA2B3CE124597C37620CEC6B67B9BEF552DA259BE
B073F5DD420C73290743167124930918> |-
/d <1C60D8A8C9B7D8BE6798EF7C9517FA537CE1EA051A480908C14A15F40C89
8D6B329DE00953BCB89A24F03DFD261DB7D3674B6D2BEF74D19B25C84EA8FC18
6D46F8B6BA24FE6720746C6977F0AC0B51958DC09DA3F1643E5BFEA0251A926D
068C29CF0CE8CB252E5DD5A4D0B20238BDFB94419E8E51C5057237D88C6BD68C
19A85539A53ACA4BF4B4B0FA9D2916F081EB5F1A7FD6BE5D20F148B208BA6F63
59832DBD17DB68F0A4B22261F7FB2092B196AA811A7A7E768461594F790A7EC7
AE730564A2C8EDC971AB24E6C51E9924F10C> |-
/e <1C60D8A8C9B782565DACACBCA2B30F5B78188197E28114EF1B7E88895403
53DB205EBA6AD33D8277D6EA1B2BE260590ACB17E8578872A1A755BB45D06546
6D586C3CF2AD01A288E1AA41F5830A7DE8F45D8D1D835E81D466F264EE7F064C
70A95281CB857B0B26140F56278CFD298DAE83D249273E4734B14B9549F7A8F6
F94B7D055E3AFD6F352BC36B5C08823BF7BA7D60758D9171FC9A7397AA2383EA
44CC55718FD5F641> |-
/f <1C60D8A8C9B7299ACAA5BBDF34E60BD5B20DB609F08E6CD0BB42EDC6C9A8
E429D3DEF891D0DE4EE827A38BCB7BC453F7DDF53C3720BE969C1920A0FAF4F6
105DA8F15EE0A2C266446894ADA96351A1AA96CB0B0C8559615090B015FDB2DE
391B04571C589B743A0070EB97A4D9D4D5BD50E7A686DB992E66C931C05A7C47
742122F93DAE82CCD937C1E71A14D31A402288F0F7561BDFE41319A5092FE55D
3F243C5677E6A752EE4432DAEE37D523A9B6CA9BC3A20C584381AD64CFAA1170
88DBB3B60CAA57EBE98D71573D2C031449F1> |-
/g <1C60D8A8C9B7CA6426D8CCDDC23567D1EF720E30F95B66BA988BABAD8807
1375EFCF157C10E5776784A5F8CF787B5F640497695EBCF454175E075AC5F3FB
36A6B597921EA4CD777E9D9BFF0FF91B9F5FD7476A95353B37A003D41A28A19E
F0E1E274254E45C6806394C82CBA507CA05D20C7DBE31F92AE6B29DE168F5004
F60F388A11C0C80B77F577930B54E135797F5D9BF00DE513D17305201FE88102
700427125616406E54B836C20818821DDF8B47A49A584154E8452088EF14CB77
F4B4053F18421095ACBA8C6255AA861C582CA1F31DED670A6A> |-
/h <1C60D8A8C9B66B3921C593BAAA0CC55FE517A321223796B7EA0F1EE05B18
F83EA93EDA66258BFE6BECC41AE79E3461EDA87A6A2B8138010F510B03172AFF
DBAFA1FE0C9790CE7ACBC23A3AD05663D5F3B7DE9FD764CC600282F0326748DB
018181918B9435E2D13970F0B495779FD3D51EAF3F5C4675A104673453BDE7DB
432FB35E9925DF94408F74BA0789DBB288795B0492DBDA1D56B0FF946197F4C3
18370516ADC5F79F1490F2DD77B7AB045AC659961023B9B16A84D7468FF59743
E81E5F5E4CE22283885C00D8EB60B5C554B4CE91767E1B26E1F565B9C67349FA
5D17049AE68753386E79EA289211C91D0ABBB322835412577832D7BEBAE9E4E4
B35A5200AF8C572A1352059A6BBB6F2948641F88> |-
/i <1C60D8A8C9B81F2C4BC6795DDE56364EC5229005CC6341741ACC083F1B71
9D57D3EE3D829D2FDA14A9C114CC7D4997C15C33B5E29D1FCB25A328B8A2AF2B
5912A1FB27CA7F29AC964CF678D05E05CD989A1BF34DB7FF263C60D06B19BF59
09319B7C4F8E868F133D8B1D231BF09A7A3D53C4CBBD700A31BB41A7A0DA465C
74092FB69F95407E0C8FED0CA934A1B7AC0ABD85784F8064CE51653EB3CFBE83
7CD19315A50D8CBBBBD24D9B3EBC4B34B4ABE9FF6F2D1889CF> |-
/k <1C60D8A8C9B7D8BE41A64DAAFC1C86D4456FA7F6E2D4B5BBB764C9139914
428B469C8B32B44B8DF25D89432C801AB971B2E4F5E162BB42EB97E98DC30D03
4860642D2B602D869E27C32C44116B56D617F6D52ED0B0F27CC9FFD2EA5B4183
61680368EA042DA4A58CB690A238A5D4F716B429C0D21CCFF2C498A1984E88AD
D150CB0A85E6DA6FACE264DF88A6167E68B94C5FCA260E782A874A5A6ACDF47F
28E92851094443016CC892B359F0526F5A9D5788B45DBEB9576B44072B32C0DB
9693C35B9A9D297707989027FFCFC6FBD7594CD2929F366A234EDE38471113AA
65CAEEC02608CD9AFA7BA05FA22D971B170BB975E3DF5F38654E863E36A11BC0
898F1A40BE1EAAB40B2939F0F8BC15E1C42D45E6E930128B619FD1B716CB16F8
EE1C2121D8367C37278733790B694F581A13A29248284F8B60F5AAF378516152
24887CC5E1F153BDE8E364ED766CFFCE90327EFAD79F358E9E7B991A134B04F5
04DF8DC5E81C310388FA60155E23F6C70DBE026E> |-
/l <1C60D8A8C9B81F2C4BC6795C90D62490D9D9B2D4CA936E6003D4BF828AC6
9A6C06C16873B93C51097179A75170731ADBE52CD2DDD6825FA9851A3D6F5A98
10EA024EF3135EFFD53A72C02C6111918651CBA63ABF538A1CAFBF0AB9E9AA7E
B578C583F952E519C8E56F6E3347D466468A4170A0D6C6764A0FB98101EB3A3C
A783817FF264C9E0B71D2F150892386693526E0CA40580DFD427F72839069AB8> |-
/m <1C60D8A8C9B58D09E7403428E135FDE3126C2061B75939FAC6A5D1EB229A
585D3973B0422A6E8CAC96CE81F91A591B80C4E4862C87FDFDA444B892E67205
CD7047CF1227D8F9BA388A7DF9722155DE2F64D3195EA025F969C50C7C8AF8A0
8D31BF40A24991EAA47E84D5DB3BDBE13134F460387852DAC6DE71B0F7BC327F
5058304B58C60F185290999FDDE3E34357C5E327397C6BF17CF317B3F8567819
CE4470C22C5637BD92CEF0E3B0AC400CEDCC289C5A27CA2844DA6E5F70600F3C
468CA56BED81FF3521AC31BEC6C4CB9AA0DAA394B3F2E949040DD66F8B3C4A10
CAB78D4C2DF7B0D0B8C41BCDFE606F030F95BB6F8CCDB6A6BF986490C7B32820
D5C9AA65B91CB65BFC840350CA94B700F6EF860B2F4074EBB3BC07B89F874C05
08E39B7B3FE1FBBB9A69D2014F1AD6CE2C7A12E2215B748B24EF01BB34EA36F6
82F5A1D695242B2690720FC1ED3A75855D7678C99BA780F259B70F304E17483A
E52BC3817879CAEBAE75354EFB9228999F2754767555E0198D064475CE6CE79B
628B60B52CF2098382183EC5330D9D7BABA46F97CBD6DA692DED6216E9FB47F1
6D14D429B1C354CFA7B3D17C8013779860AF3C40A1FDC5965BD47CCD7860D5CB
526A98CA9C15764FAF2541C18B95BDE2A145FC5225> |-
/n <1C60D8A8C9B66B3921E7FDC5C6C238B75CD07D4890C7211CC5BFB3CF0818
657ED5E1244775A49B7700CF5239EA4D0388072019CF4328CAF17CEE080AE88F
65CC047D061DB3AE6CE7660A11FF86F2139163AA3FEC4868634CD3C66F026E2E
B642E01A5DDE373B11FA1548BAE8531262AB3A658977A103230C0E2B687D6184
511CD775BAA6EBC686DAD956B64F73E84A50509B7A69DF2DEFB7EF4FCB2F837A
5F456DE162314E0748013826C23B2CC616BA8D4DE7D687AD056E5C3EBB8C9786
134DC2DE5B9D54B5D425C388EC6F97815F9CDF04A56EB3455EAC3850DC251E78
93AD6D022CE42C1325A484E51D1A9E5396A1FA2E3BDA71A7B5ED27527D56F58A
9502E3B822DB9135B01EB3C7E5A4CDC84DA83E1937177D81BF113AE74F2C51EA
BEB37F99C858B613D086718502C195886B8BBA7BBD7ACFC9F544B9EF93CF> |-
/o <1C60D8A8C9B7CA64A51EA83A617E44FCA36CE8C3DC26E6B2D46C62FBDED9
A69E41F3B747731A5CC1FF8BE36B7E7BC2277B7EBAABEF2B0D800239ECD7F82A
BAE39F9053F205798CD105C8BD1FBF0DC114D79D18495D> |-
/p <1C60D8A8C9B7D8BE1AC7D5A57574CB0F87717E43685E7B329390A9143B1A
7DE5F1043E92419CA5BC1AA7AA2B23B0B1F07981C461F7BA8ADA7C7A3852B73C
2512887624D1EC287099A6DA2F12B3E4418994BF4E285E6BA6C157F89BF7660C
1A59FD077728562BD88C6FCB109FC3B0AD0DBD248527B7419AA58628357FC81E
5947541D7E6D756DAC7EB85983BD5588EAE923C8A0C57073F3C74AD9DA961B07
DDE15A94B7EF3207E384F5ABA3888BDB2E54AB7FE23BBB7594E85EC749C5FF41
97C7F2B3E56F6C0EE56C0109515EB101725460C520FAAC24A391ABE3E613E362
797A4FB9C284B33BD4CD87> |-
/r <1C60D8A8C9B77FE2BFB257390810A2DAEE704829B75E1BB8C36C52D75C9A
B0B1A86CE1FF5135B7E0D2F6A31A340BC67DB09353FD998F0864884A6B1D8B3F
E312BE9104D27923A11E4C52999A1EA15A6A33ED9E7613ABBBC2798C9671B151
936409ECDAD242BD78C85573416E62C76AEC52EFFA692C8D2692F0F077B6FEB2
359D51E2E2B2BD84B2CF42F6BE44E0CC51063886A65BD524850E0C6721C3CA20
748D5C2F9D172F88D9A5F5E710DD34D1F9D50DEFB519125F2CF6DD4ADFBA4990
C3994ABDF60DD4ACB344593916E60329F133FB0C9D2CB5821C812763FBC7FF9D
6C570997FACE4470DAA66E4454E3FCF260F48C3AE39A> |-
/s <1C60D8A8C9B75A1740A9F8AD5CF7BB2B933967D5C3C8A959EB02161948C6
96C2C917EB81C6164DB5FF8E890A660A76F019605D6D63600ACEF15DF4BE5B20
193F0E078605A41EB91411154C518D31D552BD004E952C2580928B31E7A0575F
E88309FC100CE926A32AE37C5740C2418C8E60988FF074502284D687B4CB8171
6CB8FE3975FA09149A3FB2A60F20D097CCE2BEAF74> |-
/t <1C60D8A8C9B7361F78AECE6BD72642E143E62AFAF29F71911CD1DB1F2F52
B1DE23AB555CB886039BBCDC83D25D3298BD149C12314FCCC12C84A892C1A80F
8FEA51CA2905DE0694A8D404951683B0594835FB23624D8E834B92B4A1E253A6
852EB19A7CF08D808A953D39A22879075EBB10337854003FA0D26BD7BA5BA85F
2DA52FBE8F6A2A2DF4AF39F01A8F35208FD9F9944BD8DC3513C62EE2F34B967A
363BFDC4E7F2A88AC26EBAFD0FD537CD0E> |-
/u <1C60D8A8C9B66B39DF387B12D62684A37D454B3536A825132DB51BB5A67C
F9DE67699971A5CBC676AC3B66B22646B25E4D9AA959783BD5B4BE2B73EA4E05
D6BEE7E9BBDB753D01B2D5BE966299BEB1ED9BBF6D945C4124DF4183F7356655
137722AF2B7B3CEB9D5D119B1BDA43F1CA53955AC91F3BD02869859A44B4A5F2
BA3BB7B03528815C8ACF8EAAA2AB8A1B4C8DE3FAD45EB4344AE5C8FED9BF9136
03D8CDD73A72AFE8607F92972EFCDD289E6186F13EAC5088A927E3641FA1AE00
8E71E67A7E1B6DC91C015941534968904D6B84A90CB45A78BF98CBD320CCCE05
1F16> |-
/v <1C60D8A8C9B7EF324A63EADCAE3C66F2FEB5303F5DCC661CDCE612E8BB5F
F5E58D7D98694F07B13C64562CA87E754931C1D60B17122011468E41BF07C1AD
50ECAF3D7455F39856F49E59A3560F70354808F860C4F5180023696620A22F19
81C83551BFBCCF2C7B48AC9244BD899934F274D2BC66225C28D473F207D42BB3
E791B5D60395BF40CC2D341993585984B9C29D5FA2C6F9558EE5220E97280024
6CBCC44D458246CC59A0ACDAA056359BD3627D751E66662DFA5046FE5719BC1B
678D11A97D824D43E704D844B4> |-
/w <1C60D8A8C9B6B41CDA0681E5A08644856201C152EFC1298D26A60F9B0DA6
0FDBC87AAD84EF96990591A7267A1E373C9FDE5ADD561AAF24BC0E380ADB0726
4C17C7DBF39EB66E7914E864EC168B299EA8DD92B2DDAACADC1DC1466381FE28
C25561AFB706D7B96DB3852D667851B4581F021F4222263E11CFCD8EEC4E3CB2
A99EF2BFB7D7927182BF87F9868E9A772635C401AC52BCA1C6A746F7A5BCA232
BDB05A0916EE9B410B537A1D7F9D6E41AC2A3319B4D9F61DA227AE4182EC4A87
D55B5E322695CCBB7470AA67E80CB7074AF705AD02179A63BD88E0952012A1AA
D5CA457B7C> |-
/x <1C60D8A8C9B7EF325A4C07FDF9852BD833215EE0149FD33A82AEFBF7C72E
8C949E785A05DCA2BBD23B20F5384DA7203F51A165EBFA0E107F324B9FB86577
9EDC92A311F22DD097E6D1291868315FB668B7CC369F7FADF132EFB8728C97E3
B6BABF73290B75E616CBE8E879BE28259EB861813A086E00D0CD677FACDDDC21
D8A4824EF33AD8848C733E70DB28F4F9481F60A3F3D3BD64DFF14B1725A1C80A
AF12C93432EB26C11A320A69C8490DFF15159391F8F0695C4B316C50A3CBEDBC
EA703FAC1E95C96945E525F71584085A3CF2286F09BE28B05F58A31F6D2C9323> |-
/y <1C60D8A8C9B7EF32277474F36338AFCD04E944458FFA4986836767DA188E
88F4A858F4198F48D8934708C3FD142F82F72F88304937ACBFBB04F58F202FE6
F2AD88742EA2ED3B1BD97716E04C02A181D8D6979208381D5F37AF613BB83688
3CFFEB0CB7C2ED33DA130FF88FC74BFBE62AC55066F06A6447C0BB24C2BE8E7E
E3D9BBC605930A62C61DFFCC382BE58F882ADB6F77211DFD949BCDC5903B3306
53A631B58C3F79A10B4BC2CE1D9B361554DB9B5DD3CE28277A1988E48348B097
90279CDBF551B71A12FB38B4E21715DE35DFFF0004F83341A70C18D9D19F4789
BFB15B89B3680610715395F5BFE60E907E> |-
/z <1C60D8A8C9B7B4A14E9C55BDDD804FE6E8AA16CAEF831DC26C0227D152F6
9EEF11ED0CFB3290767A2FF7729077924F986F0099E2AA323EF5BD3F7D6D1F54
BF15DBEA6BDBE3AE475C1078CB739BC4BEC0DD57D28879210801442178C37D5C
2972AE28B2C876D6D320BD2E620B688ADF97BB5BE90DB5320A6258B7F3C33D1D
DB24180A0074B9D7591520056DDDCA6C27648CCD48139C0451505255662FAD9F
E2D6BEACB13AC09DD626173A3BDA546D07A8AE6DD1DDB9A4B9761FB336338FE0
E45A893836325CAD73F0E3F3E2C2BB35D8E2AA8D31806231F7C356619E8B7A4C
07A101EC3D7F9EE3> |-
/.notdef <1C60D8A8C9B8425798> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/PHVJFP+Palatino-Black /XOSAAA+Palatino-Black findfont ct_VMDictPut
/PHVJFP+Palatino-Black*1 
[44{/.notdef}rp /comma 4{/.notdef}rp /one /two 14{/.notdef}rp /A /.notdef 
/C 2{/.notdef}rp /F 3{/.notdef}rp /J 3{/.notdef}rp /N /.notdef 
/P 2{/.notdef}rp /S 3{/.notdef}rp /W /X 8{/.notdef}rp /a 
/.notdef /c /d /e /f /g /h /i 
/.notdef /k /l /m /n /o /p /.notdef 
/r /s /t /u /v /w /x /y 
/z 133{/.notdef}rp]
PHVJFP+Palatino-Black nf
PHVJFP+Palatino-Black*1 [16.1893 0 0 -16.1893 0 0 ]msf
5.81281 109.658 mo
(ClusterSynchronizationofNonlinearlyCoupled)
[12.2877 5.39091 10.1993 7.78709 6.29776 8.6937 11.9785 10.1993 9.00125 10.1993 7.78711 10.1993 
6.99377 9.6003 10.1993 5.39091 8.40221 9.00125 6.29776 5.39093 9.60028 14.9946 9.60355 10.782 
13.7934 9.60031 10.1993 5.39093 5.3909 10.1993 8.6937 9.00125 7.18805 5.39093 13.7884 12.2845 
9.60028 10.1993 9.89154 5.39093 8.6937 0 ]xsh
5.81281 127.586 mo
(ComplexNetworksviaPinningControl)
[12.2877 9.6003 14.6837 9.89154 5.39091 8.6937 13.7884 13.7934 8.6937 6.29776 13.1942 9.6003 
7.18805 9.89154 12.5646 8.9996 5.39093 13.7965 10.4906 5.39093 10.1993 10.1993 5.3909 10.1993 
14.4005 12.2877 9.60031 10.1993 6.29776 6.99377 9.60355 0 ]xsh
PHVJFP+Palatino-Black*1 [11.9551 0 0 -11.9551 0 0 ]msf
35.7018 178.176 mo
(JianwenFeng,)
[5.094 3.98216 6.64822 7.53297 9.7469 6.41634 11.0609 7.09178 6.42113 7.53296 7.09061 0 
]xsh
PHVJFP+Palatino-Black*1 [7.9701 0 0 -7.9701 0 0 ]msf
117.854 173.838 mo
(1)sh
PHVJFP+Palatino-Black*1 [11.9551 0 0 -11.9551 0 0 ]msf
126.611 178.176 mo
(JingyiWang,)
[5.09401 3.98215 7.53297 6.8754 6.64824 7.51488 11.6455 6.65063 7.53296 7.09061 0 ]xsh
PHVJFP+Palatino-Black*1 [7.9701 0 0 -7.9701 0 0 ]msf
200.717 173.838 mo
(1)sh
PHVJFP+Palatino-Black*1 [11.9551 0 0 -11.9551 0 0 ]msf
209.465 178.176 mo
(ChenXu,)
[9.07275 7.53058 6.41873 11.0693 8.18802 7.53058 0 ]xsh
PHVJFP+Palatino-Black*1 [7.9701 0 0 -7.9701 0 0 ]msf
262.817 173.838 mo
(1)sh
PHVJFP+Palatino-Black*1 [11.9551 0 0 -11.9551 0 0 ]msf
271.574 178.176 mo
(andFrancisAustin)
[6.64584 7.53058 10.836 7.0918 5.1658 6.6506 7.53058 5.74927 3.97974 9.28796 9.07275 7.53058 
5.74924 4.64944 3.97974 0 ]xsh
PHVJFP+Palatino-Black*1 [7.9701 0 0 -7.9701 0 0 ]msf
380.573 173.838 mo
(2)sh
PHVJFO+PAText-Italic*1 [6.1021 0 0 -6.1021 0 0 ]msf
35.7018 195.123 mo
(1)sh
PHVJFO+PAText-Italic*1 [8.7173 0 0 -8.7173 0 0 ]msf
40.6788 198.282 mo
(College)sh
68.5404 198.282 mo
(ofMathematicsandComputationalScience,ShenzhenUniversity,Shenzhen518060,China)
[3.87048 4.59926 8.22913 3.87048 2.9028 4.35864 3.3911 6.78206 3.87048 2.9028 2.4234 3.54791 
5.5713 3.86961 4.84682 6.53362 5.81451 3.87048 6.78204 4.35866 4.84682 2.9028 3.87048 2.90277 
2.42343 3.87048 4.84683 3.87048 4.58966 4.8468 3.54791 2.4234 3.39111 4.8468 3.54791 3.39111 
4.34732 4.84683 4.35864 3.39108 4.84683 3.87048 4.35864 3.39108 7.02005 6.78204 4.84683 2.4234 
4.35867 3.39108 3.39108 3.39111 2.4234 2.90277 4.03177 4.35605 4.85117 4.35864 3.39111 4.8468 
3.87048 4.35864 3.39111 7.02005 4.35864 4.35867 4.35864 4.35864 4.35864 4.35867 4.37433 5.81451 
4.35864 2.4234 4.84683 0 ]xsh
PHVJFO+PAText-Italic*1 [6.1021 0 0 -6.1021 0 0 ]msf
35.7018 206.58 mo
(2)sh
PHVJFO+PAText-Italic*1 [8.7173 0 0 -8.7173 0 0 ]msf
40.6788 209.739 mo
(DepartmentofAppliedMathematics,TheHongKongPolytechnicUniversity,HongKong)
[6.78293 3.39197 4.35953 3.87135 3.39197 2.90367 6.78293 3.39197 4.84769 5.06731 3.87135 4.59924 
6.29477 4.35953 4.35953 2.42427 2.42427 3.39198 6.55193 8.22565 3.87135 2.90367 4.35953 3.39197 
6.78293 3.87135 2.90367 2.42429 3.5488 3.39197 4.35602 5.32794 4.35956 5.57129 6.7829 3.87134 
4.84772 6.5249 5.81537 3.87134 4.84766 6.53363 5.32794 3.87137 2.42429 4.3595 2.90366 3.39197 
3.5488 4.3595 4.84769 2.42429 5.73334 6.7829 4.84772 2.42426 4.3595 3.39197 3.39197 3.39197 
2.42429 2.90366 4.03174 4.34732 6.78555 3.87134 4.84769 6.5336 5.81537 3.87137 4.84769 0 
]xsh
PHVJFN+PAText*1 [8.7173 0 0 -8.7173 0 0 ]msf
35.7021 230.178 mo
(CorrespondenceshouldbeaddressedtoJianwenFeng,)
[6.1823 4.76144 3.44511 3.2943 4.17737 3.69785 5.24081 4.76144 5.07521 5.32796 4.17735 5.07521 
3.87224 6.32704 3.69785 5.07523 4.76144 5.25824 2.53848 7.49681 4.8241 6.35408 4.35602 5.32796 
5.32796 3.2943 4.17735 3.69785 3.69785 4.17737 7.4881 2.84363 6.93903 2.90714 2.53848 4.36041 
5.0752 7.27197 4.17737 7.24496 4.84857 4.17737 5.0752 4.84857 0 ]xsh
%ADOBeginSubsetFont: WGJAAA+PAText AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
PHVJFN+PAText dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/hyphen <1C60D8A8C9B81F2C3AD0946ACB4F28B29A6C1C2973B3C153B21D943
0DA1A9458EEF1A7196935> |-
/eight <1C60D8A8C9B7A73D3942EC0F3786547C899B3E7FFA6A97E09BDA776F
9D9F9628BBF3F882D379FB4F6F568A272CB8902905FF83A66AA8284A9934B0B0
1BCCAA1CEA52409E46B005F583F9B5E34693C9B7DF65062C3BE0FE7E2D919E09
18F36C4A0D441941DE4B4E5DC8B59B977C57227549279C44D71369D4125D5885
91C7C4D0B3BDA863EB308CEAFBDA377458315A23DCCE96B5C39E0184AE26F7D2
CEFAFBCF6F4A6C9546D2746C6650EF7581416BD2A2A76571A2DEEA618A0EFF5F
E923CD7AF001B9C29E7C8F1EC5E1518539DBF40B45128C> |-
/semicolon <1C60D8A8C9B8707CD0085F055CFC6D5B12A7C26A0C01B20CFD10
2D5119D39C81D90D37475850A383BCECC4AF8537B326F546FFC03DCF83CBDDC2
64207FC1E7A7CB6B991C8CD73668FA65764BB6FB560D9D49DB> |-
/at <1C60D8A8C9B61E13E6A05564ED8782F3804C6ACB3DAEE510BA6124B5728
394BEA6F3516527D23BDDF20E13BB45F3C55020F60845B85635DBC447B65E2F4
C88F66D27AE460C20D3ACF32EEF47C41FA5BAF651076C9276F1A39CE08CEA260
8F393167EA41320944C79FB1BF500E1FC9996F476650C691F95F25936BFD75C1
6EA4127213BE0D885E80B9E31E829BA311E3A9BBCEB53B028E349FE9AE1D42DC
46ECB36364269DEE60DEB59399394F25574FC1EB921F21E041D0DC4B865BDDCA
5F62A46D9B9D42908B242059340D6A4A4A21969DB28C28439B2A7D6CD8FFA104
B1163421E5C8EF1633A0F7D6478F4F8DF73FDFC24B732B785A47FEA32B70B50D
4A4C4CE2894CC871892A167C13E090419D327CDDD45916241746E> |-
/E <1C60D8A8C9B7D8BE69A4D1FD5CA5E100FAEF3BAE2170F1F0742C8277AF93
CCB76EE3B9EE7B1394FF324DE2474B2D51D32D65A4180E1026AA44387930CD15
50B0485469D19160D2C503AE45E694079181EB33E5D66EE8DDB96D6F0D9EEDFD
D074C4065271E3054E66A9737986CDA2668A2FDCC4D73F28EBBD9E7628197FBE
515383ED71FA9E2DD6994163FE851AB1DA586295D6CE4CBF7CC9FED844B76627
885195E66491C695496D929112AF6E32B065E2618E09890AB7FD18E255896E02
D72FDC743D92179D0D0D7A9883DDBFFE17C6B96A90E8532762FED1397E9DCA7D
FA73089408D05E52A6D95C4E15B84CA7A50CD45B56AD39D0F5C51EE6BFAF476F
5E0863020DFE6CF1732D5964602F6009C4DC52FEABEDF495676B2D0B3C2C1BE5
2B9E45AC0099B1A65098625FD0E1D20D7FB98B823E31E3449488B22735288314
03F6A39E98C0CE05C80E8BB5D03371B48214C0B04F08E55BB9E900CE6DE547F7
C6B95569E9EB20315E4836878C89936B7377DF> |-
/K <1C60D8A8C9B60BC6F94C13D7F5E574F794A09B9651A9189CB75808BE915E
2CD5919EB6ABBA059CEEBB36E9FF1BA77BCAB5B28F35B76A432E3AD80F30C27A
CFABEB822FAC28D1198FEB68156032425AC8B1F80A164721676C384E5F46BE26
BB45D35CAF14988B46E156808F9467E9C0F3FDDFE36DAF80CE651E441FA2E8C4
274AA738EBCA3054944B2F1C92C1B04BE16CB3E360A2AED4FF9ADB7EC45092C6
0C805F292726A7162B58C38CB587F8630C6816673A877100898647A841EFBAA9
487A013E0F34E9677F696D31E316091979BC03380B9726DFDFF7F098430DBA3E
96549F> |-
/L <1C60D8A8C9B7D8BE69A4D1F35B93627421148D99B6ADBC0A1EE9BCA097FF
A2F9ED833909087A0D2553CB9F886FCC73226F0B12E2719E0B56D7E3081BC618
57899F637348424EDF24EECCFFA806F2AA41D9D02D04914D682A7D526CB1BF2E
CB2132488F45685BC0E83E6F958A297140E5326BD953DDA86F96B40E3750607A
3A4EE19A28DD5E68B5999F70EB55B0EC0F62E65A1E3189FAAED45FD3EDAD480C
C39AEA262662C11BA8E29B9442A15D0237C784AE16A381FC0A5CD49943> |-
/O <1C60D8A8C9B6C769AE5DCC4E8B6EA0E84C6505BC78AF7BCB5D8BA76DE144
1EF99D4F44E12DB3553CDEAA38E783571B960CDBA71A27AF69D5E3BCA8E8CD02
BC55130E4946CFF7C9E55042A73BC358DBC180C512AA876B472094A3E9C79649
710DE307DE26A7> |-
/R <1C60D8A8C9B651303E9550ACC4E89D0970CB9755F24FE3305211C0DDDF46
F23431BBA0AC79AE91E52678C5D8C6FFB535B8096DF05A35FB01FC850786AC24
0AA34AE692ECBB023C931392D9A8DAFDE3EC595B6E9ACB52844542DC6E744729
A97CA7BDAC064078F260B4300C362F1E8A4403945A5086C7FE07D3F8D862E32C
0149BF2A48D29DDB089B29BCD0C67E64E5530F3E1C5EF938D24AC3C0DF3FA359
A1D2F29B1698608303E1D5B72E13342AF9DC9EFE1ECFB56A9FA8432DC3CE82FC
EDEAA8ED47F3B1907A73C60801926BE9A11B69ADADA06C6EE42B68E531657292
402FBC34A5C6ADA4C9B55BD1A769541CD4969783B6> |-
/T <1C60D8A8C9B7D61BB46B703B0F13A583419E7123439D610394FE6C53BFCD
6994A9FF673AAB8011E46208D4FBE36B702B19A37EEE5A8F896780C5268DEAC3
AF58B7FC74BC2E0C4980E5F91EDB7ED278359C97CFD48C9B59EFE610A1DF4975
8405DDACFD731D31E251C4922011A34A8707654D721C351491C4C45FC1A72034
E88A1527456A58278F273E65A2F6E62E1F331D6138DBBADE3C57FCC2C4E87F6C
7DA2F8848C> |-
/W <1C60D8A8C9B5EE316D0E30C07B13586CC643F1DF0E24F10376B432208B30
26439287626B583506DA3EA4636D20F3223F5505158C49F59C6830993C4B68F2
B528376C2860BD25074684132483E587CEC4E22A1FA5C6A6DA54A9780AF8EE92
8F6B9BF69D82CB50068CF93E48B8F38E55D159ECB4D42AA1903591BB16ED85B5
BD46599D5D6D00B803F2A349138B23C976D0EF20D5C02533BB8A6AE6196F308E
C797061C05B08635BDB09F12C6FE1050288D07808D61CFE70262E291C2CE772A
A2E9B330BEB18865C765AF6910E3C388E5E1DDED2A77E275A6B8CC09D95A872B
47DD08BEA151951BCCA77A8F961984B46D47B7D0> |-
/f <1C60D8A8C9B81F2C4530E4FF6AFEDBCB8EBD87E5A61A98031772043E7853
516C6F8A968AEBDD30EA39A53F04C6F7EC985AB4B077DC2478F9930FC0F8ACB6
D4D4518C6D10E50AC85BADA5B6C2FDE9BA59A6B6DC37629AE79CFDD155D32D89
5F504FA7B6E2D0174E5E1427A004E98276B23001C34B55C129F090FE97E45663
46546BD111A5F596FFB8B26F3BC09018A3B35758C62019A179373EC26D39721F
61C498681B699E5AA679A4138D86> |-
/j <1C60D8A8C9B88055A45F590A68F9E19D25D4867CFE83CC395C59E1CC902F
F490C517D2B903803801D2D0E5D8229C3E301B6BC1995AE806C1512E6D6E5FFB
2311B6F3BFC0EDDD16AC5744BCD4C1518FC4CCF2D773A5B6694F7A93BE72010E
B8A5F8907B15B827B1ED27190860B58A9C05862C69B1F31C6CCB8D8A0E586B5B
226C2D62771AED8F85968B594869055982BD4596FD558EAE40E5> |-
/k <1C60D8A8C9B7EF32548F6F27944FEAE8791D7A3BAFE9E61D74C53FB9616F
DF361539F3919DBC4C9766D829ADCAE7B924E9498D6225012755EBF050E6B062
594D3872176AA7B6F06780666148CD9FF37D5F262EA20F0B32A1A16C4C882B4A
A7868516E46B34E65C61E66712B57F63F9737ADE1EF56ACDF31C6D042A141549
79218CD94C8A6F2CF2EEB36AC22714D14848F698253843578A88B0FFED1C8565
3E73BDC73C66CC064B6ACFB4F05D39F458AD81F55E77193CF9919B8863E813B0
847F28B194D4376E900AB05DC492FCB80EDE6510> |-
/v <1C60D8A8C9B7E6F03D67E54D078B6BE06C12B654B362F05D7C8A24D06A1A
C690E791D89E2D7C2E337E5B196B95DBC3FD6D78819D334FFC6D33A210E60B15
3F4701A012EE5FEFBBDFA2AEDD56CE983CD4E77EFA62775108A759A389441F15
9B3CC42C8AA3F99E8D1F2B7062ECB31FCA2A5BDEFF3F93942BC5FA4B2D26D413
5C30B66CAFC1D6C49E0EF86DCB02C1E5D35CB425F58CECC294B1> |-
/x <1C60D8A8C9B7B71A30FA83B1EA627F34A75111D130BACF346BB9BFC6E485
7BC9FA75E0D39120D24EC7279AEF5A027FC30A28E0A90BC715C56F17F957B66D
F388D2C543585E99CF3902C4BA16880E28DB705035CF309DDE612B7C96ED5DE5
765D0326C722827CF0C6E7004BB2671DF917DF03D25C0546AC7107D3A3B0C0D6
16B5F7E58D19D53EC4C6ECD8FCE149D0602504E047A2EDE581925BA2463FEC89
701746E6D0E32B70577165EF7174B69FE83643E8A7456B1AC49BC703EBB2EEB2
7E755399C0A0336EEA87EE660F471D120F9381BE035931> |-
/z <1C60D8A8C9B7A73DC610A9CEF33D3E2C0CC75D5B3417DC399C7CD546F984
3D0D8E3C13FD1BF74E1AAB05EC95A7BB4A11E62BE73CB2F599F42AA8CF1E78E5
3843B6EA2E2486A2EEB55C26091D6CDE486667992AF5135232F56333C14DF1B4
5B5A20D9C08E7D47948A07359792CADAF8A11E4D857873A6456D17A2DBECD6A8
C87837C771C45F9B0031FD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
PHVJFN+PAText /Encoding get
dup 45 /hyphen put
dup 56 /eight put
dup 59 /semicolon put
dup 64 /at put
dup 69 /E put
dup 75 /K put
dup 76 /L put
dup 79 /O put
dup 82 /R put
dup 84 /T put
dup 87 /W put
dup 102 /f put
dup 106 /j put
dup 107 /k put
dup 118 /v put
dup 120 /x put
dup 122 /z put
pop
%ADOEndSubsetFont
/PHVJFN+PAText*1 
[44{/.notdef}rp /comma /hyphen /period /slash /zero /one /two 
/three /four /five /six /.notdef /eight /nine /colon 
/semicolon 4{/.notdef}rp /at /A /.notdef /C /D /E 
/F /.notdef /H /I /J /K /L /.notdef 
/N /O /P /.notdef /R /S /T /.notdef 
/V /W 9{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /j /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w /x /y /z 133{/.notdef}rp]
PHVJFN+PAText nf
PHVJFN+PAText*1 [8.7173 0 0 -8.7173 0 0 ]msf
249.317 230.178 mo
(fengjw@szu.edu.cn)
[2.90366 4.17651 5.07434 4.84769 2.04065 7.27112 6.51263 3.69696 4.35953 5.25739 2.18021 4.17648 
5.32709 5.25735 2.18021 3.87137 0 ]xsh
35.9453 250.104 mo
(Received18June2011;Revised30August2011;Accepted13September2011)
[5.82228 4.17474 3.86961 4.17474 2.53587 4.92442 4.17476 7.50552 4.35603 6.5432 2.90717 5.25563 
5.0726 6.34535 4.35779 4.35777 4.35777 4.35779 4.37433 5.82228 4.17476 4.92441 2.53586 3.69524 
4.17476 7.50552 4.35777 6.53362 6.78122 5.25562 4.84595 5.25565 3.69522 5.01337 4.35779 4.35779 
4.35779 4.35779 4.37433 6.78119 3.86963 3.86963 4.17474 5.23822 2.841 4.17477 7.4968 4.35779 
6.54321 4.57568 4.17474 5.23822 2.841 4.17474 7.69647 4.81976 4.17474 5.61572 4.35779 4.35779 
4.35779 0 ]xsh
35.7021 269.526 mo
(Academic)sh
76.4972 269.526 mo
(Editor:)sh
105.079 269.526 mo
(Recai)sh
128.023 269.526 mo
(Kilic)sh
36.2155 288.957 mo
(Copyright)
[6.18317 4.76231 5.24168 4.84944 3.44598 2.53935 4.84943 5.0761 0 ]xsh
%ADOBeginSubsetFont: NKWBAA+copyright Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /NKWBAA+copyright def
/FontInfo 7 dict dup begin
/Weight (Normal) def
/ItalicAngle 0 def
/BaseFontName (copyright) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 113 /q put
def
/FontBBox {11 -18 736 706} def
end
systemdict begin
dup /Private
8 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/OtherBlues [-18 -0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/q <1C60D8A8C9B61E13E80D01510C41DD20D8094013F1E96AF601700951CB7E
57927EB6BA97742A8FFC2850D8E09EEB8B525A756F5ACC041F91A7BDE6CBE413
540C47663F64852727FA620F871B932AE9F441D09F2611541AD3BB71D4A13BFD
A2A8217116FF1AFFDB1330BE1B18A338DAA946183DD4A421078322324A01430E
7E1013D77303C36BA934B78C03D352C10E218E4BEECAAF171360E5DB4ED91900
35C81F0B1339604D619410276B1C946751156B1466F81A9730> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/PHVJFQ+copyright /NKWBAA+copyright findfont ct_VMDictPut
/PHVJFQ+copyright*1 
[113{/.notdef}rp /q 142{/.notdef}rp]
PHVJFQ+copyright nf
PHVJFQ+copyright*1 [8.7173 0 0 -8.7173 0 0 ]msf
78.2268 288.957 mo
(q)sh
PHVJFN+PAText*1 [8.7173 0 0 -8.7173 0 0 ]msf
86.9834 288.957 mo
(2011JianwenFengetal.ThisisanopenaccessarticledistributedundertheCreative)
[4.35953 4.35951 4.35953 6.60597 2.90367 2.5376 4.35953 5.07434 7.2711 4.1765 7.24495 4.85118 
4.1765 5.07434 7.02003 4.17563 5.02206 4.35605 2.5376 4.47284 5.34464 5.07434 2.53763 5.98526 
2.5376 5.99399 4.35605 7.37048 4.76056 5.23993 4.17651 7.36176 4.35605 3.87137 3.87134 4.17645 
3.69699 5.99399 4.3595 3.44421 2.84277 2.5376 3.87134 2.5376 6.47089 5.32794 2.5376 3.69699 
2.84274 3.44421 2.5376 4.82147 5.25739 2.84274 4.17648 7.60492 5.25739 5.07434 5.32703 4.17651 
5.73254 2.84363 5.07434 6.46216 6.1814 3.29431 4.17645 4.35956 2.84271 2.5376 4.92615 0 
]xsh
36.2147 299.163 mo
(CommonsAttributionLicense,whichpermitsunrestricteduse,distribution,andreproductionin)
[6.18143 4.76056 7.69821 7.69821 4.76056 5.07436 6.2372 6.78293 2.84274 2.84276 3.44424 2.5376 
4.82149 5.25737 2.84276 2.53761 4.76056 7.60498 5.32709 2.5376 3.87137 4.17648 5.07436 3.69698 
4.17648 4.72478 7.27199 5.07434 2.5376 3.87137 7.61371 5.23993 4.17648 3.44424 7.69821 2.5376 
2.84274 6.23718 5.25565 5.07434 3.29431 4.17648 3.69696 2.84274 3.44424 2.5376 3.87134 2.84274 
4.17648 7.84814 5.25562 3.69696 4.17651 4.71606 5.32794 2.5376 3.69696 2.84274 3.44421 2.53763 
4.82147 5.25735 2.84274 2.5376 4.76056 5.07434 4.72479 4.35602 5.07434 7.86557 3.29428 4.17563 
5.23993 3.29431 4.76056 5.32706 5.25739 3.87134 2.84274 2.5376 4.76056 7.60498 2.5376 0 
]xsh
36.2147 309.378 mo
(any)sh
52.6756 309.378 mo
(medium,providedtheoriginalworkisproperlycited.)
[7.69472 4.17563 5.3262 2.53674 5.2565 7.69733 4.35605 5.23907 3.29431 4.75969 4.92529 2.53673 
5.32622 4.17561 7.49681 2.84187 5.07349 6.35406 4.76056 3.44337 2.53674 4.84682 2.53674 5.07346 
4.35867 4.70734 7.27194 4.7597 3.44336 7.02005 2.5376 5.86758 5.23822 3.29431 4.76056 5.23907 
4.17563 3.44336 2.53674 7.02005 3.8696 2.53674 2.84189 4.1756 5.3262 0 ]xsh
36.2147 328.8 mo
(Weconsideramethodfordrivinggeneralcomplexnetworksintoprescribedclustersynchro-)
[7.91967 7.87524 3.87222 4.76144 5.07521 3.69785 2.53848 5.32794 4.17737 7.12817 8.06349 7.69908 
4.17735 2.84363 5.07523 4.76144 9.01797 2.90454 4.76144 7.13689 5.32796 3.44511 2.53848 4.92705 
2.53848 5.07523 8.5412 4.84857 4.17737 5.07523 4.17737 3.4451 4.36041 6.22763 3.86963 4.76144 
7.69907 5.24084 2.53848 4.17737 8.19867 5.07523 4.17737 2.8436 7.27197 4.76144 3.44513 4.84854 
7.38004 2.5376 5.07523 2.84363 8.45059 5.23822 3.29431 4.17563 3.69781 3.87222 3.4451 2.53845 
4.82236 4.17734 9.00928 3.86963 2.53845 5.25824 3.69781 2.84363 4.17734 7.13687 3.69785 4.84854 
5.0752 3.87222 5.0752 3.29428 4.76144 0 ]xsh
36.2147 339.015 mo
(nizationpatternsbyusingpinningcontrol.Thecouplingbetweentheverticesofthenetwork)
[5.07435 2.53761 4.35951 4.35953 2.84274 2.53761 4.76056 8.67633 5.23996 4.35953 2.84274 2.84274 
4.1765 3.44424 5.07436 7.29024 4.82408 8.45056 5.25563 3.69698 2.5376 5.07436 8.44183 5.23994 
2.53763 5.07434 5.07434 2.53763 5.07434 8.44183 3.87134 4.76056 5.07434 2.84274 3.29431 4.76056 
2.5376 5.7778 5.34464 5.07434 7.77588 3.87134 4.76056 5.25739 5.23993 2.5376 2.5376 5.07434 
8.45056 4.8241 4.17648 2.84274 7.27109 4.17648 4.17648 8.66675 2.84274 5.07434 7.77585 4.92267 
4.17648 3.44424 2.84274 2.5376 3.87137 4.17648 7.29022 4.76056 6.50653 2.8436 5.07434 7.77585 
5.07434 4.17648 2.84274 7.27109 4.76056 3.44424 0 ]xsh
36.2147 349.23 mo
(isnonlinear,andsu)
[2.53761 8.325 5.07434 4.76056 5.07436 2.53761 2.5376 5.07436 4.1765 4.35951 2.79916 6.80385 
4.35953 5.07434 9.96295 3.6987 0 ]xsh
%ADOBeginSubsetFont: OOLBAA+PATextEx Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /OOLBAA+PATextEx def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) MicroPress Inc., 2001, 2003. All rights reserved.) def
/Weight (Regular) def
/ItalicAngle 0 def
/BaseFontName (PATextEx) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 19 /ff put
dup 20 /ffi put
dup 91 /bracketleftmath put
def
/FontBBox {-40 -283 1030 927} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0 459 469 689 709 726 728] def
/OtherBlues [-283 -278 266 276] def
/BlueScale 0.03963 def
/StdHW [31] def
/StdVW [84] def
/StemSnapV [84 95 107] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/ff <1C60D8A8C9B67F583DD09ACD1DA8B20A33DD39E174289BB38B15F4C4694
DB4AE4F6BD5A6101444E1095D1B154B502554995C3EA14268B273081FCACD5AD
B730C762421F7D423A5C15C9921F11544FAC44F40A84ED90930A065BA5151634
9F76D8D10940AE3C2A0B9072AE116C1E2F9BE1EF971918B8E30B932E2903BC67
93ADAC4A166D75A2B9EA42755FB86AA83ED61166B2D74686D5B3B9B6E31E4C7F
D3283F9CFB4DBF8087D62A7E166EB76A8F43BF42A7918B5408C717CBB4874B69
13E0A7310472AE29601FF6BBB800577CA7A3CAEFE37EF915BA1D3A0085CE1C41
7537470BFD4EDD334FA813C3EF11138145F928290C84302FEF54A83E9C166ABE
80CCC6CE2BE6FEAC22F90A2B2C60CD5072758807ADF9F4CE9ACE87D39991E4BB
D0AE7EF4813976AFE0C52A1B0D39912A1594525CB97C66BEE3258539D7AD3B9F
8A62C903B55046242E09C0A5A8B85F6F9A380ACF0D5DF849CCAA935E9238D769
823DFBB538F985C80794742800F6C5603D21DCC6806823B577E48115F872E62A
E0E6DEE27E065957606FDECF584549A1F2422FB49C8B76266AF0ABD95301C9B8
8D73CFC173E7459A0F2E6595834C39417B269F1FD5933D1FDB913A47E5F21028
E1AA7E998296F388092DB54C6493B> |-
/ffi <1C60D8A8C9B5BCE7187F636C2D8DB179D8C0D9F5254FC20EC85E21E462
A6CB1D98C34FFF09B7EE5ABEC3B33B4CBCD5EC3F9B21E798D6B59752371FF8AF
8051209D44B8263CBF075E75B372F0302CF191560A6764E3191504F18EEA3BCF
A434DB4B6DF4CC53C3D97BE113D1EE74E1E1A6B409EACBE7B8045EDA7B70F87C
57D6F82C4190DC841F07EC0197055249776DB4B357698323A656CEEAFCB29280
6EEE00ABA35139DD309DD815877C3118B6B6021D0416D33B8F80E71D79E1C49C
70CA2213F7FB91D2100C00E2D8D164067551D77244DE8F7135889F68ED1E09B9
E6983BA586AA399CB7850F193979BB8FFAC3DE0C4AF6451EC15C8D533D17AFB8
B7BB8D79DA65AECADD34EDF29CE664ABE559D176D1239D3AD096387764050187
185CE78E98BF806C4279DC214A856FF6F376832909DA6FE96DF4EA73D5AFE69A
F1FAA003C1C59880BB10A24E50709C32F190CCE8717EED6F4565DCEA5217DE40
2EFBB6AA6D12EFA7027790FBF292145D4F3A9BFE7153638FD8EEF90DE2B2ECCD
D78722DB4C2E15BCFEF08BCB20FD5608070F2ED4FE269B75368C643E85E03FDD
E6010CB5AF2C988600651A78890D757E93212035843546D8F9144A275D01ABA4
588A662831630C1A891DCB8B49F168BEF27B879E5544DA7B1C2F14EB8AA3C6F8
B5203439D7B82BD84B9EA528E959680B56A129A312472D179D9D26309764AAF4
2AF1BD69CDC3E5A7BF6E75EF9098BBCA6EECDA9910A89691EC0350807BF48E73
6056C210EF110C175BD2E8EE5AB4100441F5DE8314516020A0AC40445F90FF7B
B7B9213C5576F0751A9EF5EFEE9D2AD4A4E5D1BB996B33B66A0BD8482EF9B274
ABDC2163BCEA047BF6C2925671B4A2358BF4A3690808E6FA36459646ACC32A17
4B1FD3315F224AE5FFE7F60151035E1072A3066D5F8E896472B5730B1E4ABBB7
34341F7CA14B0954CBBE317CA00B1BE3A09CFBCA9E99B4EA08E14E1F3C0E7D76
F1D67AE2941C11326051BBBC149FF73B4774A86932548B6AE5256757731823B1
2B9B2DB1FCADCD831F2C801DDF11A09758DF6938A8C459568450D3D300710EEA
B75800573595591ACC27DFBADEA2832D30E6F9A06EB1D860B920CAA140295604
6F0CA8CD67F4FF57D9392C10560B0866CFFF3B6C6FCA39D4637BDBF99C90971F
99D26A41567EE57BD4D0DFDDDD17F3C416D8FA09826F94909A88ED3169F68430
548C910D654B2DBAA96CF492> |-
/bracketleftmath <1C60D8A8C9B70B6BB617904A989D5280D69CE31B727A0A
EE01073AC22859045195D7B7C440BFE299A75E40CCE6891EA3130DAE6888F6A0
EA771BFC26387966045CBD991F4D18B1B23B2AF18E510CE66BDDC896183F0E50
8E104FB94B4F74E78AC2D0D3BA21A4B82A9C71E847A8D5EEF05270694C3D04C6
2FED5E43A297A37972A7602BF73D40FBCC48E7FB144344C5EDB5872DAE6AFF46
F8F459DAE4F4DF6DD23AD08E6F1388669E942B24> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/PHVJFR+PATextEx /OOLBAA+PATextEx findfont ct_VMDictPut
/PHVJFR+PATextEx*1 
[19{/.notdef}rp /ff /ffi 70{/.notdef}rp /bracketleftmath 164{/.notdef}rp]
PHVJFR+PATextEx nf
PHVJFR+PATextEx*1 [8.7173 0 0 -8.7173 0 0 ]msf
118.626 349.23 mo
(\024)sh
PHVJFN+PAText*1 [8.7173 0 0 -8.7173 0 0 ]msf
126.663 349.23 mo
(cientconditionsarederivedanalyticallyfortheattainmentofcluster)
[3.87135 2.53761 4.1765 5.07434 7.46117 3.86961 4.76057 5.07434 5.32707 2.53763 2.84274 2.5376 
4.76056 5.07437 8.31625 4.35602 3.29431 8.80188 5.32709 4.17651 3.44421 2.53763 4.92618 4.17648 
9.94464 4.35602 5.07437 4.3595 2.5376 4.84772 2.84271 2.53763 3.87134 4.35953 2.5376 2.5376 
9.47656 2.90369 4.76056 8.06354 2.84363 5.07434 8.80188 4.3595 2.84277 2.84271 4.35953 2.5376 
5.07434 7.69821 4.17648 5.07434 7.46988 4.76056 7.53253 3.8714 2.5376 5.25732 3.69696 2.84277 
4.17651 0 ]xsh
36.2138 359.436 mo
(synchronization.Wealsoproposeane)
[3.69697 4.84769 5.07436 3.87135 5.07434 3.29431 4.76056 5.07436 2.53761 4.35951 4.35953 2.84274 
2.53761 4.76056 5.07436 4.49115 7.91966 6.50662 4.35605 2.5376 3.69698 7.10117 5.2382 3.29431 
4.76056 5.23996 4.76056 3.69696 6.49792 4.35953 7.4158 0 ]xsh
PHVJFR+PATextEx*1 [8.7173 0 0 -8.7173 0 0 ]msf
184.433 359.436 mo
(\023)sh
PHVJFN+PAText*1 [8.7173 0 0 -8.7173 0 0 ]msf
190.103 359.436 mo
(ectivewayofadaptingthecouplingstrengthsofcomplex)
[4.17648 3.87137 2.84274 2.5376 4.92618 6.50662 7.27112 4.3595 7.18219 4.76056 5.23816 4.35605 
5.32709 4.35953 5.23993 2.84277 2.5376 5.07434 7.18219 2.84363 5.07434 6.50662 3.87134 4.76059 
5.25735 5.23996 2.5376 2.53763 5.07434 7.18216 3.69873 2.84274 3.29431 4.17648 5.07434 4.84769 
2.84274 5.07434 6.00269 4.76056 5.23816 3.87134 4.76056 7.69824 5.23993 2.5376 4.17648 0 
]xsh
36.2138 369.651 mo
(networks.Inaddition,thecriticalcombinationofthecontrolstrength,thenumberofpinnednodes)
[5.07434 4.1765 2.84274 7.2711 4.76056 3.44424 4.84769 3.69698 4.07709 2.93864 6.99303 4.35953 
5.32707 5.32707 2.53763 2.84274 2.5376 4.76056 5.07436 4.07707 2.84363 5.07434 6.08385 3.87135 
3.44424 2.53761 2.84276 2.5376 3.87137 4.35951 4.44583 3.87135 4.76056 7.69821 4.8215 2.5376 
5.07434 4.3595 2.84274 2.5376 4.76056 6.9747 4.76056 4.81451 2.84271 5.07434 6.08386 3.86963 
4.76056 5.07434 2.84271 3.29431 4.76056 4.43713 3.69696 2.84271 3.29431 4.17566 5.07431 4.84769 
2.84271 5.07434 4.06836 2.84363 5.07434 6.08386 5.07434 5.25732 7.69824 4.82147 4.17645 5.3551 
4.76056 4.80579 5.23993 2.5376 5.07434 5.07434 4.17651 7.23615 5.07611 4.76056 5.32709 4.17645 
0 ]xsh
36.2138 379.866 mo
(andcouplingstrengthineachclusteraregivenbydetailedanalysisclustersynchronizationofa)
[4.35953 5.07434 8.10876 3.86961 4.76056 5.25739 5.23996 2.5376 2.53761 5.07436 7.63199 3.69872 
2.84274 3.29431 4.1765 5.07434 4.84769 2.84274 7.8299 2.53761 7.8569 4.17561 4.35953 3.87137 
7.8569 3.8696 2.53763 5.25735 3.69699 2.84274 4.17651 6.21893 4.3595 3.29431 6.95734 4.85117 
2.5376 4.92618 4.17645 7.85693 4.82147 7.62329 5.32706 4.17648 2.84274 4.35953 2.5376 2.5376 
4.17648 8.10876 4.35605 5.07434 4.3595 2.5376 4.84772 3.69696 2.5376 6.47083 3.86963 2.5376 
5.25732 3.69696 2.84277 4.17645 6.21899 3.69696 4.84772 5.07428 3.8714 5.07434 3.29425 4.76056 
5.07434 2.5376 4.35956 4.3595 2.84271 2.5376 4.76056 7.8299 4.76056 5.68799 0 ]xsh
36.2138 390.072 mo
(special)sh
64.7254 390.072 mo
(topologicalstructurecomplexnetwork.Ourtheoreticalresultsareillustratedbynumerical)
[2.84363 4.75969 5.23907 4.7597 2.53673 4.75969 4.84682 2.53674 3.87048 4.35866 4.62627 3.69609 
2.84189 3.37537 5.2565 3.87048 2.84189 5.2565 3.29431 6.26428 3.8696 4.7597 7.69733 5.23907 
2.53674 4.17563 6.59732 5.07349 4.1756 2.84189 7.27023 4.75967 3.44339 4.8468 4.26624 6.84918 
5.25647 5.54425 2.84186 5.07349 4.17563 4.75967 3.29431 4.17566 2.84186 2.53674 3.87048 4.35864 
4.6167 3.29431 4.1756 3.69611 5.25653 2.53668 2.84192 5.7865 4.35864 3.29431 6.26428 2.53674 
2.53674 2.53674 5.25647 3.69611 2.84186 3.44342 4.35864 2.84186 4.1756 7.41577 4.8241 6.93896 
5.07611 5.25653 7.69733 4.1756 3.44342 2.53668 3.87048 4.3587 0 ]xsh
36.2138 400.287 mo
(simulations.)
[3.69698 2.5376 7.69821 5.25739 2.5376 4.35953 2.84274 2.53761 4.76057 5.07434 3.69698 0 
]xsh
%ADOBeginSubsetFont: XOSAAA+Palatino-Black AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
PHVJFP+Palatino-Black dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B842571B8FBD64E08D9D6640269FDCAF78975042FDE87
CC0920270EDC8983D72FBC2CF> |-
/I <1C60D8A8C9B71131A13342CF7B6E8441C7EF105734B529D23B091381F663
95AA811C2F22312405ADEBB38EC3E5F93BA16786BD2680627103C79E0F312399
B076EE1FF9F79E9CA6A4512D1AAC2AB25422AE005A7BC473DCF426970D20C365
14C03E52EA0D0B8A0AC51E703DB1577A77D91FFB04303B3909719CC3C9B9F1AD
F0EA89FA3255ED1A59B69A780AE9D6C3786288FFB2B41D289623C58EB9C1D744
0CFD3FF8521FC9D7E49E5B042D16193B1F54A117A6014DAB4783567BC6A5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
PHVJFP+Palatino-Black /Encoding get
dup 46 /period put
dup 73 /I put
pop
%ADOEndSubsetFont
/PHVJFP+Palatino-Black*1 
[44{/.notdef}rp /comma /.notdef /period 2{/.notdef}rp /one /two 14{/.notdef}rp 
/A /.notdef /C 2{/.notdef}rp /F 2{/.notdef}rp /I /J 
3{/.notdef}rp /N /.notdef /P 2{/.notdef}rp /S 3{/.notdef}rp /W 
/X 8{/.notdef}rp /a /.notdef /c /d /e /f 
/g /h /i /.notdef /k /l /m /n 
/o /p /.notdef /r /s /t /u /v 
/w /x /y /z 133{/.notdef}rp]
PHVJFP+Palatino-Black nf
PHVJFP+Palatino-Black*1 [11.9551 0 0 -11.9551 0 0 ]msf
5.81281 457.473 mo
(1.Introduction)
[7.07736 7.0739 5.09281 7.53177 4.65063 5.1658 7.0918 7.30447 7.53177 5.75044 4.65062 3.98096 
7.0894 0 ]xsh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
5.81281 479.271 mo
(Complexnetworkssynchronizationisanimportantphenomenoninbothmathematical)
[7.06149 5.43764 8.79494 5.9855 2.89713 4.77013 10.143 5.79625 4.77013 3.24586 8.30681 5.43764 
3.93329 5.5372 9.2343 4.22112 5.5372 5.79623 4.42142 5.79623 3.75296 5.43565 5.79623 2.89713 
4.97931 4.97931 3.24585 2.89713 5.43764 10.8274 2.89813 9.21637 4.97733 10.8004 2.89813 8.79495 
5.98547 5.43765 3.93326 3.24585 4.97931 5.79626 8.25305 5.98547 5.79626 4.77014 5.79623 5.43765 
8.79492 4.77014 5.79623 5.43762 10.8184 2.89813 10.7915 5.50827 5.43765 3.24588 10.7915 8.79495 
4.97934 3.24585 5.79626 4.77014 8.79498 4.97931 3.24588 2.89713 4.42142 4.97934 0 ]xsh
5.81281 492.222 mo
(andphysicalsciencesbecauseofitsmyriadapplicationstodiverseproblemssuchas)
[4.97931 5.79625 11.5466 5.98551 5.79625 5.5372 4.22212 2.89713 4.4214 4.97931 8.36958 4.22211 
4.42142 2.89713 4.77014 5.79623 4.4214 4.77013 9.70154 5.50726 4.77014 4.42139 4.97931 6.00542 
4.22211 10.2416 5.43565 8.77498 2.89813 3.24585 9.68359 8.79495 5.5372 3.93329 2.89713 4.97931 
11.5555 4.97733 5.98547 5.98553 2.89709 2.89716 4.42139 4.97931 3.24585 2.89713 5.43765 5.79623 
9.70154 3.24585 10.8902 6.08508 2.89713 5.62689 4.77014 3.93329 4.22211 10.2416 5.9855 3.75296 
5.43567 5.50726 2.89716 4.77014 8.79495 9.69257 4.22214 6.00543 4.42142 11.2677 4.97931 0 
]xsh
5.81281 505.174 mo
(communicationssecurity,seismology,parallelimageprocessingaswellasmanyothers)
[4.42041 5.43664 8.79395 8.79395 6.00443 5.79524 2.89613 4.42041 4.9783 3.24487 2.89612 5.43665 
5.79526 6.35411 4.22112 4.76913 4.42039 6.00443 3.93227 2.89615 3.24484 4.42838 4.61667 4.2211 
4.76913 2.89613 4.22112 8.79393 5.43665 2.89612 5.43665 5.53621 4.42834 4.6167 5.98547 4.97833 
3.93231 4.9783 2.89615 2.89612 4.76917 5.01318 2.89813 8.79395 4.9783 5.53622 6.88519 5.9845 
3.75299 5.43665 4.42041 4.76913 4.22113 4.2211 2.89615 5.79526 7.65924 4.9783 6.32721 8.30582 
4.76917 2.89612 5.00421 4.97733 6.32721 8.79391 4.9783 5.79523 7.65027 5.43564 3.24484 5.79526 
4.7691 3.93228 0 ]xsh
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
386.885 505.174 mo
([)sh
%ADOBeginSubsetFont: WGJAAA+PAText AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
PHVJFN+PAText dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/endash <1C60D8A8C9B7A73DB94A5058CC8937F401197CF5465A12D19516560
F33> |-
systemdict /gcheck known {setglobal} if end {end} if
end
PHVJFN+PAText /Encoding get
dup 177 /endash put
pop
%ADOEndSubsetFont
/PHVJFN+PAText*1 
[44{/.notdef}rp /comma /hyphen /period /slash /zero /one /two 
/three /four /five /six /.notdef /eight /nine /colon 
/semicolon 4{/.notdef}rp /at /A /.notdef /C /D /E 
/F /.notdef /H /I /J /K /L /.notdef 
/N /O /P /.notdef /R /S /T /.notdef 
/V /W 9{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /j /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w /x /y /z 54{/.notdef}rp /endash 78{/.notdef}rp]
PHVJFN+PAText nf
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
390.867 505.174 mo
(1)sh
395.845 505.174 mo
(\261)sh
%ADOBeginSubsetFont: WGJAAA+PAText AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
PHVJFN+PAText dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/seven <1C60D8A8C9B7A73DD36BE1AF70377D3632063F7E27F42A7BA2998B48
DF818333E32D404B04B0D27C9A9E0C992DEC2550759E9E9B7EA0777319282268
EC314D413A96DC407955A64D9ADF55E134608E6896D31E3B681743FEF5BDD0E1
775C58E42EA78F7667C2940F7CF74C9288FE39C99943BE515C0D893C1B> |-
/fi <1C60D8A8C9B7DE87AE5EEDDE04CE403C1988CE01879230C4A906E3E554C
C1457451F69D01CF9496A33642AA66F2E8D17B3EF146807C2ECB731B4BE05C17
A02B4223A13E35BB73D320805FF3353D5FE39E1599A0053FD9FAF008ABF93971
4AA764665175CCBEBC03FE7E9278574EE9C7C532D6BB07AEDA53559B846EEE44
7214EDECBC3A722C740B17BCFA32F4DDFBA6D7430D65AFEA3D90BFFF8B3CBF30
234DD0DFB96C3502748EF86B69226F4C4D124E09FAB07186822F8B55D50A9776
4A1E3CBEFDE581699B6FA7EAE4C0AA3EBC0FD52CAEC54493FD7E93CFBC29B4B3
A0C0870CC02A60825726BEDB9CF460A64D32E7051B207A312B91F302615CE5F7
0A208082ACE416F87C0537CC0C1F079DFC3BC1BF8DA012863918189E1BAE729B
139713D338FC438C2275378C3EB2D3FBF90897F62063AB37ADF8AAF0E237D6B6
DD24FAA13C53096D4148A2EF77FE32FA9F32B4B1B8CD7AE09A2503081EB2C8BA
5A265710D0817797AE54C72C3C6AF61F3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
PHVJFN+PAText /Encoding get
dup 55 /seven put
dup 174 /fi put
pop
%ADOEndSubsetFont
/PHVJFN+PAText*1 
[44{/.notdef}rp /comma /hyphen /period /slash /zero /one /two 
/three /four /five /six /seven /eight /nine /colon 
/semicolon 4{/.notdef}rp /at /A /.notdef /C /D /E 
/F /.notdef /H /I /J /K /L /.notdef 
/N /O /P /.notdef /R /S /T /.notdef 
/V /W 9{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /j /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w /x /y /z 51{/.notdef}rp /fi 2{/.notdef}rp 
/endash 78{/.notdef}rp]
PHVJFN+PAText nf
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
400.822 505.174 mo
(7)sh
%ADOBeginSubsetFont: OOLBAA+PATextEx AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
PHVJFR+PATextEx dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleftmath <1C60D8A8C9B70B6BB6178065793F84A9BEFDA377F163B32D
A9B47E0F88F9FC8A3FCCF1BD6400660E127B0DE7FFEDC735A048CFF3EDC6D576
259A767D63CD3D4F39E9FDF7DBF5994E99> |-
/parenrightmath <1C60D8A8C9B70B6BB616F2B6AE1F57AA963EFD4EF219340
6200EBFEFFDCE2284D06D6A39E3CE8453AFB682D97BAE08CFA48B2DF31981BE5
4956B600BE096C96B3C2F0FA23E51FADC0E> |-
/bracketrightmath <1C60D8A8C9B70B6BB617904A989D5280D6F25B4EF5A76
3DE1AA879927C07A28AA6A07FD154E49E6CE5A06245EAC7798C8CF5027C0E7A3
3A7A4162B609571C6ED3D97AFCC814B971749940130A0262DEB02470FB4F0033
5E65986F0741685EEF5B43D952F50A365EC128FF080DE1380F042ACF780A4EC0
BAEFE4C4C71F9D7CF9754359EF7543A3E85AE5D49007ECA05F187047BC53BE7B
573D37C41B98873C5AE49FCDD027E5B910273CC0159> |-
systemdict /gcheck known {setglobal} if end {end} if
end
PHVJFR+PATextEx /Encoding get
dup 40 /parenleftmath put
dup 41 /parenrightmath put
dup 93 /bracketrightmath put
pop
%ADOEndSubsetFont
/PHVJFR+PATextEx*1 
[19{/.notdef}rp /ff /ffi 19{/.notdef}rp /parenleftmath /parenrightmath 49{/.notdef}rp /bracketleftmath 
/.notdef /bracketrightmath 162{/.notdef}rp]
PHVJFR+PATextEx nf
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
405.808 505.174 mo
(])sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
409.795 505.174 mo
(.)sh
5.81382 518.125 mo
(Looselyspeaking,synchronizationistheprocessinwhichtwo)
[6.08508 5.43764 5.43764 4.22211 4.77013 2.89713 8.09959 4.22112 5.9855 4.77014 4.97931 5.5372 
2.89714 5.79625 5.5372 5.06699 4.2211 5.53722 5.79625 4.4214 5.79625 3.75294 5.43565 5.79623 
2.89713 4.97931 4.97931 3.24585 2.89713 5.43765 8.38852 2.8981 6.76758 3.24881 5.79626 7.32651 
5.9855 3.75299 5.43762 4.42142 4.77011 4.22211 6.78549 2.89713 8.35165 8.30679 5.79626 2.89713 
4.42139 8.36063 3.24585 8.30679 0 ]xsh
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
283.097 518.125 mo
(\()sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
287.084 518.125 mo
(ormore)
[5.43564 6.48868 8.79297 5.43564 3.75296 0 ]xsh
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
321.761 518.125 mo
(\))sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
328.304 518.125 mo
(dynamicalsystems)
[6.08408 5.53622 5.79526 4.9783 8.79395 2.89615 4.42038 4.97833 5.48141 4.22113 5.53619 4.22113 
3.24484 4.76913 8.79395 0 ]xsh
5.8138 531.076 mo
(seektoadjustacertainprescribedpropertyoftheirmotiontoacommonbehaviorinthe)
[4.22211 4.77013 4.77013 9.324 3.24585 9.21646 4.97931 6.08508 2.32919 6.00542 4.22212 7.03761 
8.75713 4.41942 4.77013 3.93329 3.24585 4.97929 2.89713 9.58504 5.9855 3.75294 4.77013 4.22211 
4.42142 3.93326 2.89713 5.50726 4.77014 9.89078 5.9855 3.75296 5.43564 5.9855 4.77014 3.93329 
3.24585 9.33295 5.43564 7.09232 3.24884 5.79623 4.77014 2.89713 7.72205 8.79495 5.43762 3.24585 
2.89713 5.43765 9.58502 3.24884 9.21646 8.75711 4.42142 5.43762 8.79495 8.79492 5.43765 9.59399 
5.50729 4.77014 5.79626 4.97934 5.62689 2.89716 5.43765 7.73102 2.89716 9.57605 3.24588 5.79626 
0 ]xsh
5.8138 544.028 mo
(limitastimetendstoin\256nityeitherbyvirtueofcouplingorbyforcing)
[2.89713 2.89713 8.79494 2.89713 6.44385 4.97931 7.42509 3.24585 2.89713 8.79494 7.96513 3.24586 
4.77013 5.79626 6.08508 7.42508 3.24884 8.63065 2.89813 5.79623 6.02534 5.79625 2.89713 3.24585 
8.7392 4.77011 2.89713 3.24588 5.79623 4.77014 7.13724 5.50726 8.73022 5.62689 2.89713 3.93326 
3.24585 6.00543 7.97409 5.43765 6.51544 4.42142 5.43762 6.00543 5.9855 2.89713 2.89713 5.79623 
8.75714 5.43564 7.1283 5.50824 8.7392 3.32147 5.43762 3.75296 4.42142 2.89713 5.79623 0 
]xsh
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
327.521 544.028 mo
([)sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
331.504 544.028 mo
(8)sh
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
336.481 544.028 mo
(])sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
340.468 544.028 mo
(.Somecommon)
[5.68765 5.22931 5.43564 8.79294 7.97412 4.4194 5.43564 8.79294 8.79297 5.43564 0 ]xsh
5.8138 556.979 mo
(synchronizationpatternsthathavebeenwidelystudiedarecompletesynchronization)
[4.22211 5.53722 5.79625 4.4214 5.79624 3.75296 5.43764 5.79625 2.89713 4.97931 4.97931 3.24586 
2.89713 5.43764 7.86647 5.98552 4.97931 3.24585 3.24585 4.77013 3.93329 5.79623 6.27341 3.24585 
5.79625 4.97931 5.29216 5.79626 4.97931 5.62689 6.81345 5.50726 4.77014 4.77011 7.83859 8.30679 
2.89713 6.08508 4.77014 2.89713 7.58752 4.22211 3.24585 6.0054 6.08508 2.89713 4.77014 8.13638 
4.97729 3.75296 6.81348 4.42142 5.43762 8.79495 5.9855 2.89713 4.77011 3.24585 6.82242 4.22211 
5.53723 5.79623 4.42142 5.79626 3.75296 5.43765 5.79626 2.89716 4.97931 4.97934 3.24585 2.89716 
5.43765 0 ]xsh
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
381.396 556.979 mo
([)sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
385.378 556.979 mo
(9)sh
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
390.355 556.979 mo
(])sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
394.342 556.979 mo
(,lag)
[4.52701 2.89813 4.97729 0 ]xsh
5.81382 569.931 mo
(synchronization)
[4.22112 5.53622 5.79525 4.4204 5.79526 3.75295 5.43664 5.79526 2.89613 4.9783 4.97832 3.24486 
2.89613 5.43665 0 ]xsh
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
80.2892 569.931 mo
([)sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
84.2753 569.931 mo
(10)
[4.97731 0 ]xsh
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
94.2289 569.931 mo
(])sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
98.2159 569.931 mo
(,clustersynchronization)
[5.94867 4.4194 2.89714 6.00542 4.22211 3.24586 4.77013 7.39827 4.22211 5.53722 5.79625 4.4214 
5.79625 3.75296 5.43765 5.79623 2.89713 4.97931 4.97931 3.24585 2.89713 5.43762 0 ]xsh
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
211.599 569.931 mo
([)sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
215.585 569.931 mo
(11)
[4.97733 0 ]xsh
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
225.548 569.931 mo
(])sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
229.535 569.931 mo
(,phasesynchronization)
[5.9397 5.98453 5.79523 4.97833 4.2211 8.23514 4.2211 5.53622 5.79526 4.42041 5.79526 3.75293 
5.43665 5.79526 2.89615 4.9783 4.9783 3.24484 2.89615 5.43665 0 ]xsh
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
339.164 569.931 mo
([)sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
343.15 569.931 mo
(12)
[4.97733 0 ]xsh
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
353.104 569.931 mo
(])sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
357.091 569.931 mo
(,andpartial)
[5.94867 4.97733 5.79623 9.5401 5.9855 4.97931 3.93329 3.24585 2.89716 4.97931 0 ]xsh
5.81377 582.882 mo
(synchronization)
[4.22112 5.53621 5.79526 4.42041 5.79525 3.75295 5.43665 5.79524 2.89613 4.97832 4.97832 3.24484 
2.89615 5.43665 0 ]xsh
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
79.3268 582.882 mo
([)sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
83.3128 582.882 mo
(13)
[4.97731 0 ]xsh
93.2754 582.882 mo
(,)sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
98.2527 582.882 mo
(14)
[4.97731 0 ]xsh
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
108.215 582.882 mo
(])sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
112.202 582.882 mo
(.)sh
35.7026 597.327 mo
(SincePecoraandCarroll)
[5.22832 2.89713 5.79625 4.4214 7.83861 6.01546 4.77014 4.4214 5.43764 3.93329 8.05475 4.97733 
5.79625 9.15257 7.06148 4.97929 3.93329 3.75294 5.43764 2.89713 0 ]xsh
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
148.482 597.327 mo
([)sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
152.468 597.327 mo
(15)
[4.97731 0 ]xsh
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
162.431 597.327 mo
(])sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
169.477 597.327 mo
(foundthechaossynchronizationin1990,synchroniza-)
[3.31448 5.43665 6.00443 5.79526 9.16153 3.24884 5.79526 7.82965 4.42041 5.79523 4.97833 5.43665 
7.30753 4.2211 5.53622 5.79526 4.42038 5.79526 3.75296 5.43661 5.79526 2.89615 4.9783 4.9783 
3.24487 2.89612 5.43665 8.8916 2.89813 8.86475 4.9783 4.9783 4.97833 4.97833 5.57108 4.2211 
5.53625 5.79523 4.42041 5.79529 3.75293 5.43665 5.79529 2.89612 4.97833 4.9783 0 ]xsh
5.81276 610.278 mo
(tionhasbeenwidelystudiedbecauseofitspotentialapplicationinmanydi)
[3.24586 2.89713 5.43764 9.63882 5.79625 4.9793 8.07266 5.50826 4.77014 4.77013 9.64778 8.30682 
2.89713 6.08508 4.77014 2.89713 9.38675 4.22211 3.24585 6.00543 6.08507 2.89713 4.77013 9.9446 
5.50827 4.77013 4.4214 4.97929 6.00543 4.22211 8.63065 5.43564 7.16403 2.89813 3.24585 8.06372 
5.98547 5.43765 3.24585 4.77011 5.79626 3.24585 2.89713 4.97931 6.75864 4.97729 5.9855 5.9855 
2.89716 2.89709 4.42139 4.97931 3.24585 2.89716 5.43762 9.66571 2.89813 9.63885 8.79492 4.97937 
5.79626 9.38672 6.08411 0 ]xsh
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
354.412 610.278 mo
(\023)sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
360.892 610.278 mo
(erentareas.)
[4.76913 3.75296 4.76913 5.79526 7.10138 4.9783 3.75296 4.76913 4.9783 4.22113 0 ]xsh
5.81174 623.23 mo
(Rulkovetal)
[6.65202 6.00443 2.89613 5.53622 5.43664 9.55814 4.76913 7.17311 4.97832 0 ]xsh
%ADOBeginSubsetFont: ONKBAA+PAText-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
PHVJFO+PAText-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B8707CAD1BD79AC6127C83C23701F97279A9B237A759B
E23EBC7A64884ECDEC85C6AAC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
PHVJFO+PAText-Italic /Encoding get
dup 46 /period put
pop
%ADOEndSubsetFont
/PHVJFO+PAText-Italic*1 
[44{/.notdef}rp /comma /.notdef /period /.notdef /zero /one /two 
2{/.notdef}rp /five /six /.notdef /eight 8{/.notdef}rp /A /.notdef 
/C /D 3{/.notdef}rp /H 2{/.notdef}rp /K /.notdef /M 
2{/.notdef}rp /P /.notdef /R /S /T /U 11{/.notdef}rp 
/a /.notdef /c /d /e /f /g /h 
/i 2{/.notdef}rp /l /m /n /o /p /.notdef 
/r /s /t /u /v 2{/.notdef}rp /y /z 
133{/.notdef}rp]
PHVJFO+PAText-Italic nf
PHVJFO+PAText-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
61.7109 623.23 mo
(.)sh
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
68.1278 623.23 mo
([)sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
72.1138 623.23 mo
(16)
[4.97731 0 ]xsh
PHVJFR+PATextEx*1 [9.9626 0 0 -9.9626 0 0 ]msf
82.0764 623.23 mo
(])sh
PHVJFN+PAText*1 [9.9626 0 0 -9.9626 0 0 ]msf
89.9788 623.23 mo
(exploredgeneralizedsynchronizationofchaosindirectionallycoupled)
[4.77013 5.13878 5.9855 2.89714 5.43764 3.75294 4.77014 10.0173 5.53722 4.77014 5.79625 4.77013 
3.93327 4.97931 2.89713 2.89716 4.97931 4.77011 10.0263 4.22211 5.53723 5.79623 4.42142 5.79623 
3.75296 5.43762 5.79626 2.89709 4.97931 4.97931 3.24585 2.89713 5.43765 9.75638 5.43564 7.23578 
4.41937 5.79626 4.97931 5.43762 8.15436 2.89713 9.72049 6.08508 2.89716 3.75293 4.77014 4.42139 
3.24588 2.89713 5.43762 5.79626 4.97931 2.89709 2.89716 9.47742 4.42139 5.43762 6.00543 5.98553 
2.89709 4.77014 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/PHVJFQ+copyright*1 uf
/PHVJFQ+copyright uf
/NKWBAA+copyright uf
/PHVJFP+Palatino-Black*1 uf
/PHVJFP+Palatino-Black uf
/XOSAAA+Palatino-Black uf
/PHVJFN+PAText*1 uf
/PHVJFN+PAText uf
/WGJAAA+PAText uf
/PHVJFO+PAText-Italic*1 uf
/PHVJFO+PAText-Italic uf
/ONKBAA+PAText-Italic uf
/PHVJFR+PATextEx*1 uf
/PHVJFR+PATextEx uf
/OOLBAA+PATextEx uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
