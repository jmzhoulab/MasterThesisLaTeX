%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: watts.strogatz.pdf
%%Creator: Adobe Acrobat 10.1.2
%%For: Administrator
%%CreationDate: 2012-3-13, 21:02:26
%%BoundingBox: 0 0 357 348
%%HiResBoundingBox: 0 0 356.7289 347.5652
%%CropBox: 0 0 356.7289 347.5652
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1076 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="MiKTeX GPL Ghostscript  9.0"
   xmp:ModifyDate="2012-03-13T21:02:19+08:00"
   xmp:CreateDate="2012-03-13T21:00:59+08:00"
   xmp:CreatorTool="Adobe Acrobat 10.1.2"
   xmp:MetadataDate="2012-03-13T21:02:19+08:00"
   xmpMM:DocumentID="13f88354-6f68-11e1-0000-e7ba1b4db46b"
   xmpMM:InstanceID="uuid:1106627c-7e5f-4397-b637-a440a6ad02a6"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">watts.strogatz.eps.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Administrator</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -347.565 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
7.62939e-6 0 mo
7.62939e-6 347.565 li
356.729 347.565 li
356.729 0 li
cp
clp
-61.5275 337.685 mo
550.472 337.685 li
550.472 -.654541 li
-61.5275 -.654541 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
.19073 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
111.012 163.375 mo
109.372 186.966 li
.882813 .769531 0 0 cmyk
@
111.352 163.385 mo
112.262 178.175 li
@
78.8924 170.646 mo
108.762 161.585 li
@
64.9425 168.735 mo
108.682 161.275 li
@
217.212 109.406 mo
113.482 159.735 li
@
93.7425 158.615 mo
108.672 160.516 li
@
92.9625 160.135 mo
110.662 178.865 li
@
93.4425 159.525 mo
122.452 175.656 li
@
64.8225 168.266 mo
88.8425 159.185 li
@
71.3625 151.595 mo
88.8025 157.475 li
@
110.232 104.416 mo
92.0625 155.896 li
@
78.3625 169.695 mo
89.3125 159.975 li
@
122.682 143.485 mo
229.882 214.385 li
@
118.152 142.875 mo
84.1925 154.146 li
@
118.112 142.745 mo
90.9825 150.095 li
@
118.052 141.685 mo
95.4125 138.166 li
@
108.892 102.505 mo
119.842 139.635 li
@
118.592 92.1555 mo
120.462 139.535 li
@
113.132 137.896 mo
118.342 140.835 li
@
130.552 143.945 mo
167.562 129.646 li
@
130.632 144.175 mo
166.472 134.216 li
@
130.682 144.375 mo
148.392 140.945 li
@
127.032 142.595 mo
109.772 108.625 li
@
109.672 170.355 mo
126.692 146.916 li
@
86.8125 181.966 mo
126.292 146.555 li
@
86.7625 152.595 mo
72.2025 167.725 li
@
89.3924 153.156 mo
95.0925 169.005 li
@
86.3725 152.095 mo
83.9425 153.605 li
@
108.762 138.005 mo
90.6825 149.406 li
@
92.0925 140.175 mo
89.3425 148.355 li
@
93.1325 140.305 mo
95.7225 168.865 li
@
91.5225 139.906 mo
83.1625 152.805 li
@
108.372 136.805 mo
95.4425 137.615 li
@
107.222 102.425 mo
93.8625 135.416 li
@
118.092 92.1155 mo
111.322 134.146 li
@
121.092 77.8155 mo
111.352 134.146 li
@
108.362 102.605 mo
110.722 134.115 li
@
147.602 258.315 mo
111.652 139.085 li
@
89.8725 84.2555 mo
83.3825 91.6155 li
@
89.2425 81.2955 mo
73.8225 74.2855 li
@
107.152 104.285 mo
93.0325 84.4155 li
@
122.092 103.615 mo
93.6424 83.7955 li
@
95.7925 88.4855 mo
93.0025 84.4355 li
@
69.8425 75.1555 mo
67.1325 78.3055 li
@
69.2925 74.4855 mo
59.8625 79.8354 li
@
95.1225 89.1555 mo
73.6125 74.6555 li
@
70.5825 94.3155 mo
71.3924 75.7755 li
@
58.1425 83.5854 mo
61.5625 101.005 li
@
55.4125 82.2955 mo
48.9825 85.7355 li
@
68.8625 94.8855 mo
59.2525 83.0655 li
@
79.4425 92.3555 mo
59.9125 82.2655 li
@
63.4525 81.7655 mo
39.5925 99.9155 li
@
65.1025 82.7455 mo
62.4225 100.985 li
@
63.0825 81.0854 mo
49.1325 86.0754 li
@
79.7325 91.9055 mo
67.4425 81.8354 li
@
120.602 66.2955 mo
67.9425 79.6055 li
@
46.9525 89.4655 mo
48.8125 111.456 li
@
45.3825 89.0854 mo
38.9225 99.3055 li
@
79.2025 93.0455 mo
49.2425 87.4055 li
@
72.9025 96.1355 mo
79.2625 94.2455 li
@
162.752 143.815 mo
83.8625 94.8655 li
@
67.9225 96.8555 mo
65.1225 96.8555 64.5525 95.1455 66.6525 93.0455 cv
68.7625 90.9355 70.4725 91.5055 70.4725 94.3155 cv
@
94.7625 91.1655 mo
72.9425 96.2755 li
@
106.152 105.745 mo
72.9325 97.4755 li
@
55.5025 144.095 mo
69.7025 99.2855 li
@
121.932 103.865 mo
99.4725 91.7855 li
@
135.802 111.656 mo
99.4625 91.8055 li
@
107.132 104.295 mo
98.7225 92.6455 li
@
116.712 91.4155 mo
109.962 98.2555 li
@
132.412 56.5555 mo
119.482 87.2655 li
@
137.542 63.3455 mo
119.982 87.5555 li
@
121.002 77.7955 mo
119.022 87.1255 li
@
120.322 77.5455 mo
109.382 97.8254 li
@
137.052 62.8755 mo
123.512 73.7255 li
@
145.712 55.3955 mo
123.492 73.6955 li
@
132.152 56.4255 mo
122.772 73.0955 li
@
113.042 74.9755 mo
143.482 90.0655 li
@
112.882 72.4355 mo
120.942 67.0854 li
@
109.242 75.8855 mo
50.4125 154.695 li
@
112.402 71.9055 mo
125.102 56.8655 li
@
129.772 41.9755 mo
112.062 71.6655 li
@
137.572 36.8955 mo
112.262 71.7855 li
@
111.052 99.4755 mo
110.792 76.3855 li
@
62.5625 198.825 mo
82.8125 185.095 li
@
63.0025 200.266 mo
108.492 200.425 li
@
61.1125 197.795 mo
65.8825 179.896 li
@
42.4625 195.525 mo
57.9925 199.605 li
@
35.1424 191.755 mo
58.0425 199.445 li
@
53.3425 204.156 mo
58.2225 201.475 li
@
53.6425 205.175 mo
108.502 200.646 li
@
52.3425 203.156 mo
65.3025 179.666 li
@
34.7327 192.516 mo
49.1125 203.815 li
@
28.9327 205.675 mo
48.5725 205.416 li
@
41.8525 196.625 mo
49.2625 203.635 li
@
42.1325 193.485 mo
64.4125 178.835 li
@
28.3827 204.125 mo
38.0123 196.466 li
@
48.3225 159.206 mo
40.5825 192.406 li
@
31.4623 188.735 mo
19.6827 168.325 li
@
47.8125 159.035 mo
33.8225 188.646 li
@
44.9825 179.646 mo
34.6026 189.216 li
@
27.3924 203.375 mo
31.7327 193.275 li
@
45.3425 179.966 mo
27.8924 203.666 li
@
72.6925 170.716 mo
106.932 188.335 li
@
68.0425 170.406 mo
49.2425 177.065 li
@
69.0025 167.456 mo
56.1725 148.615 li
@
80.2225 156.956 mo
71.9925 167.545 li
@
93.4125 171.216 mo
72.9725 169.735 li
@
78.9825 171.675 mo
122.152 176.605 li
@
69.8225 153.175 mo
75.5825 168.995 li
@
42.7825 175.235 mo
73.9325 171.675 li
@
64.9525 169.565 mo
73.9425 170.985 li
@
42.7025 174.825 mo
59.9925 169.865 li
@
35.1623 167.945 mo
59.9025 169.045 li
@
68.1025 153.175 mo
63.2925 166.766 li
@
34.9225 166.755 mo
66.6525 151.865 li
@
30.6327 158.385 mo
66.4525 151.275 li
@
158.592 102.646 mo
71.1925 149.575 li
@
87.2025 182.555 mo
105.892 173.516 li
@
68.9425 178.255 mo
82.5125 182.845 li
@
69.0625 177.135 mo
105.652 172.716 li
@
64.0025 177.255 mo
42.7925 175.706 li
@
109.782 104.206 mo
67.8325 175.245 li
@
53.4725 148.725 mo
50.1625 154.525 li
@
47.0925 175.385 mo
48.6525 159.266 li
@
93.4325 171.725 mo
49.3725 177.585 li
@
54.1225 148.985 mo
47.4725 175.456 li
@
52.6025 145.146 mo
32.6827 132.355 li
@
93.7725 170.085 mo
56.9125 147.835 li
@
83.4425 156.865 mo
94.2925 169.466 li
@
20.7424 163.115 mo
38.1123 174.156 li
@
20.9327 162.766 mo
30.2924 166.815 li
@
21.0327 161.016 mo
25.7026 159.615 li
@
38.0026 146.605 mo
20.6026 160.185 li
@
34.6123 156.516 mo
21.0225 160.956 li
@
18.5225 163.585 mo
18.4924 164.295 li
@
29.6327 160.945 mo
38.7625 173.466 li
@
29.2827 161.156 mo
31.4827 165.555 li
@
20.4526 164.605 mo
26.1026 160.406 li
@
38.3526 146.975 mo
29.7924 156.956 li
@
34.4123 169.635 mo
38.4623 173.716 li
@
20.9327 166.425 mo
30.1026 167.525 li
@
39.3325 156.815 mo
117.412 193.815 li
@
34.8123 156.966 mo
20.6327 164.885 li
@
37.7123 153.275 mo
39.3225 147.495 li
@
31.1827 133.445 mo
36.3924 153.266 li
@
30.1225 123.065 mo
36.5026 153.235 li
@
23.9123 141.646 mo
35.3026 153.865 li
@
38.1827 146.815 mo
20.2327 164.345 li
@
24.6123 140.505 mo
37.5623 144.325 li
@
31.9623 133.095 mo
38.5825 142.935 li
@
129.872 120.545 mo
42.4625 144.375 li
@
21.8225 142.305 mo
18.7725 163.605 li
@
28.6827 122.945 mo
23.0924 137.416 li
@
47.1925 115.745 mo
24.0123 138.025 li
@
28.7924 132.825 mo
23.9327 137.945 li
@
47.1525 115.706 mo
32.4123 129.255 li
@
36.9827 103.935 mo
31.1327 128.505 li
@
29.8327 123.105 mo
30.3123 128.445 li
@
36.5924 103.805 mo
30.5827 118.225 li
@
59.8025 104.685 mo
31.8526 119.396 li
@
46.6225 114.805 mo
32.0123 119.755 li
@
113.572 182.975 mo
118.542 192.646 li
@
114.952 180.685 mo
149.592 180.245 li
@
111.542 183.105 mo
110.072 187.115 li
@
122.252 177.646 mo
114.842 179.956 li
@
110.222 170.885 mo
148.852 141.985 li
@
110.692 172.025 mo
131.892 168.825 li
@
110.782 197.906 mo
108.442 174.935 li
@
111.452 190.666 mo
137.282 203.935 li
@
111.452 190.666 mo
117.452 193.745 li
@
111.682 188.966 mo
149.652 180.745 li
@
136.192 166.635 mo
167.132 135.345 li
@
135.702 166.255 mo
149.602 142.656 li
@
136.522 169.855 mo
150.012 178.805 li
@
112.532 198.385 mo
132.912 170.495 li
@
121.292 196.906 mo
140.872 221.656 li
@
121.972 196.075 mo
137.282 203.935 li
@
175.562 185.855 mo
122.222 194.505 li
@
149.822 181.266 mo
122.022 193.855 li
@
127.202 177.195 mo
149.612 179.906 li
@
127.192 177.305 mo
170.132 184.345 li
@
157.812 163.156 mo
127.032 175.916 li
@
112.642 198.456 mo
160.952 138.956 li
@
167.692 261.525 mo
112.762 202.295 li
@
98.3725 172.185 mo
229.592 215.005 li
@
60.0725 105.095 mo
51.0125 112.396 li
@
59.5225 103.295 mo
40.1025 101.666 li
@
141.972 132.766 mo
64.4425 104.375 li
@
129.792 119.695 mo
51.5625 114.166 li
@
39.2825 103.335 mo
47.3125 112.115 li
@
132.172 56.4355 mo
109.402 97.8354 li
@
121.642 105.275 mo
111.152 106.156 li
@
145.302 123.635 mo
126.082 106.745 li
@
167.102 142.456 mo
126.092 106.735 li
@
135.812 111.625 mo
126.392 106.315 li
@
135.552 112.325 mo
111.102 106.916 li
@
144.922 124.195 mo
110.902 107.485 li
@
112.902 103.785 mo
149.062 138.695 li
@
138.082 37.1855 mo
112.052 99.6755 li
@
130.302 42.2155 mo
111.852 99.5955 li
@
134.872 119.805 mo
214.682 117.646 li
@
229.472 118.516 mo
134.872 119.835 li
@
248.412 248.355 mo
243.912 300.065 li
@
249.382 248.255 mo
253.432 261.456 li
@
276.002 223.365 mo
250.602 244.216 li
@
287.612 234.285 mo
251.072 245.105 li
@
180.012 187.105 mo
246.702 244.175 li
@
238.942 316.775 mo
229.492 317.225 li
@
239.452 318.185 mo
227.462 327.165 li
@
240.132 318.815 mo
232.712 330.715 li
@
253.582 266.355 mo
242.072 314.185 li
@
243.302 305.115 mo
241.882 314.145 li
@
242.012 266.105 mo
199.252 312.125 li
@
244.922 266.495 mo
257.732 291.055 li
@
245.882 265.625 mo
265.472 278.275 li
@
246.152 265.035 mo
257.622 268.825 li
@
240.642 245.795 mo
243.322 261.735 li
@
236.112 220.555 mo
243.302 261.735 li
@
235.902 214.685 mo
243.342 261.725 li
@
262.822 244.216 mo
245.492 262.396 li
@
242.232 304.685 mo
226.892 326.615 li
@
242.732 304.955 mo
232.332 330.515 li
@
256.742 294.635 mo
245.862 301.275 li
@
253.512 266.345 mo
244.362 300.145 li
@
241.652 245.385 mo
252.752 261.785 li
@
241.752 245.315 mo
258.512 267.595 li
@
242.762 243.185 mo
262.032 242.466 li
@
208.742 200.365 mo
238.722 241.235 li
@
218.062 227.285 mo
238.162 241.795 li
@
236.122 220.555 mo
239.772 240.775 li
@
237.622 219.685 mo
262.632 240.735 li
@
218.362 224.865 mo
233.312 218.985 li
@
207.812 221.855 mo
233.152 218.396 li
@
239.662 133.466 mo
235.792 215.516 li
@
209.322 199.766 mo
233.582 216.605 li
@
225.752 249.425 mo
212.962 309.685 li
@
227.542 244.725 mo
257.062 193.345 li
@
226.932 244.475 mo
234.852 214.635 li
@
226.782 244.445 mo
229.332 231.716 li
@
190.522 240.745 mo
223.772 246.505 li
@
209.582 329.965 mo
199.052 316.015 li
@
208.762 331.025 mo
196.402 325.955 li
@
211.282 329.455 mo
212.262 314.715 li
@
222.952 329.265 mo
213.592 331.425 li
@
228.832 332.765 mo
213.652 332.105 li
@
225.082 319.075 mo
212.982 330.265 li
@
195.062 314.615 mo
172.732 320.325 li
@
209.912 312.485 mo
200.052 313.685 li
@
164.912 308.635 mo
195.012 313.575 li
@
194.812 322.565 mo
196.752 316.415 li
@
224.472 317.925 mo
196.522 324.415 li
@
261.892 259.785 mo
228.272 315.175 li
@
230.672 330.425 mo
227.652 319.795 li
@
225.772 326.175 mo
226.612 319.865 li
@
223.862 326.695 mo
214.012 314.175 li
@
229.292 331.405 mo
227.512 330.155 li
@
192.452 323.005 mo
172.852 298.565 li
@
191.542 324.565 mo
172.782 321.385 li
@
210.352 313.625 mo
196.132 323.535 li
@
177.742 156.456 mo
170.492 146.206 li
@
179.712 156.045 mo
183.472 137.225 li
@
176.712 159.016 mo
162.662 161.706 li
@
178.182 182.916 mo
179.102 161.075 li
@
170.902 158.025 mo
176.672 158.375 li
@
180.082 162.105 mo
179.812 161.005 li
@
170.602 159.085 mo
178.452 163.355 li
@
169.212 160.266 mo
177.232 183.055 li
@
146.142 135.445 mo
166.572 156.065 li
@
173.382 133.516 mo
168.872 155.375 li
@
170.442 154.906 mo
169.822 155.785 li
@
173.092 187.255 mo
178.682 218.065 li
@
172.232 187.266 mo
167.962 213.906 li
@
240.872 104.785 mo
174.292 182.825 li
@
141.712 203.766 mo
170.472 186.085 li
@
159.322 159.775 mo
148.052 127.716 li
@
161.282 159.896 mo
167.902 146.406 li
@
178.162 164.275 mo
162.682 162.475 li
@
176.522 183.435 mo
161.712 164.195 li
@
178.392 182.925 mo
180.372 167.095 li
@
172.372 155.315 mo
177.602 182.956 li
@
173.422 154.855 mo
179.162 162.535 li
@
173.662 133.555 mo
172.132 150.285 li
@
172.222 141.815 mo
171.972 150.275 li
@
146.442 135.095 mo
169.812 151.365 li
@
180.962 162.045 mo
183.692 137.266 li
@
150.992 182.475 mo
140.692 202.835 li
@
271.162 168.535 mo
154.662 179.966 li
@
171.182 141.555 mo
153.262 177.925 li
@
144.982 223.435 mo
176.602 220.785 li
@
144.892 222.945 mo
165.112 217.115 li
@
139.932 207.615 mo
142.062 221.135 li
@
190.472 239.666 mo
227.372 229.875 li
@
187.412 237.845 mo
165.512 147.635 li
@
171.022 261.416 mo
186.412 242.295 li
@
164.202 276.375 mo
186.612 242.435 li
@
182.372 260.855 mo
187.342 242.766 li
@
183.772 261.835 mo
227.752 230.685 li
@
164.782 276.906 mo
179.722 264.896 li
@
150.872 260.945 mo
179.162 263.115 li
@
171.962 263.375 mo
179.152 263.325 li
@
170.082 216.156 mo
210.832 212.035 li
@
170.012 215.775 mo
183.512 212.245 li
@
169.952 217.275 mo
176.742 219.716 li
@
141.902 206.055 mo
165.192 215.466 li
@
163.822 276.175 mo
168.402 265.725 li
@
157.292 294.505 mo
161.982 280.905 li
@
152.812 299.355 mo
161.702 280.795 li
@
149.942 262.725 mo
161.202 276.525 li
@
171.932 263.825 mo
249.652 277.175 li
@
150.852 261.065 mo
166.902 263.075 li
@
157.382 294.535 mo
168.502 265.766 li
@
151.502 299.115 mo
148.542 263.285 li
@
161.682 305.785 mo
149.052 263.195 li
@
188.272 212.695 mo
213.702 224.716 li
@
188.202 212.825 mo
203.062 220.975 li
@
185.542 214.115 mo
171.692 294.075 li
@
188.512 211.625 mo
210.822 211.766 li
@
163.542 89.3855 mo
185.512 209.105 li
@
181.672 220.725 mo
202.752 222.035 li
@
181.602 219.935 mo
210.902 212.416 li
@
212.312 209.466 mo
208.292 200.635 li
@
213.832 214.285 mo
215.532 223.295 li
@
211.802 213.795 mo
206.852 220.185 li
@
296.782 180.105 mo
215.742 210.875 li
@
205.492 219.656 mo
207.032 200.855 li
@
207.702 223.005 mo
213.592 224.985 li
@
215.222 223.375 mo
208.012 200.735 li
@
147.022 93.4055 mo
205.972 196.105 li
@
170.372 318.415 mo
171.152 299.115 li
@
153.482 303.475 mo
168.512 319.125 li
@
163.742 310.385 mo
168.932 318.795 li
@
154.182 301.005 mo
168.792 297.215 li
@
153.522 299.855 mo
154.662 298.705 li
@
160.232 306.895 mo
153.882 302.975 li
@
159.012 296.855 mo
168.712 296.635 li
@
161.222 305.975 mo
157.652 299.165 li
@
163.942 306.205 mo
169.722 298.605 li
@
145.702 123.275 mo
139.542 114.916 li
@
181.502 134.105 mo
149.672 125.945 li
@
167.092 142.466 mo
149.132 126.975 li
@
147.862 92.6255 mo
158.732 100.016 li
@
145.812 88.6555 mo
146.242 68.6455 li
@
127.932 57.1755 mo
144.582 88.9455 li
@
124.752 67.5754 mo
144.072 89.2955 li
@
169.812 138.775 mo
146.852 134.146 li
@
160.052 136.516 mo
146.852 134.095 li
@
171.362 131.255 mo
146.892 133.416 li
@
167.232 142.315 mo
139.822 114.675 li
@
181.672 133.646 mo
140.332 113.966 li
@
197.012 8.21552 mo
169.572 9.79547 li
@
197.092 8.71552 mo
168.972 16.1555 li
@
198.322 10.2955 mo
196.312 13.9255 li
@
224.492 22.5955 mo
201.742 9.34546 li
@
220.732 33.5955 mo
201.172 10.0255 li
@
243.332 46.0955 mo
228.212 25.9155 li
@
242.642 46.8955 mo
224.572 36.7955 li
@
244.312 45.6455 mo
243.362 41.3254 li
@
245.432 65.6655 mo
244.942 50.6755 li
@
242.632 100.315 mo
244.752 50.6755 li
@
246.062 59.2955 mo
245.132 50.6655 li
@
224.222 23.2755 mo
197.552 16.7555 li
@
227.052 26.3955 mo
231.502 57.0754 li
@
240.952 37.1155 mo
228.552 25.6055 li
@
223.242 33.1655 mo
225.802 26.2655 li
@
223.292 37.9155 mo
230.932 57.2255 li
@
219.952 36.3855 mo
167.842 54.3655 li
@
244.622 59.9455 mo
224.072 37.4255 li
@
240.312 38.4355 mo
224.862 35.9555 li
@
241.632 41.0854 mo
233.052 57.3354 li
@
245.952 59.3055 mo
243.202 41.3555 li
@
245.282 65.6755 mo
243.052 41.3755 li
@
230.252 61.5455 mo
193.982 105.425 li
@
230.222 57.6455 mo
196.732 18.0955 li
@
275.332 149.135 mo
232.982 61.8755 li
@
192.552 15.9455 mo
158.932 13.1255 li
@
192.602 15.6055 mo
169.512 10.4955 li
@
192.542 16.2155 mo
169.052 16.7455 li
@
242.762 100.315 mo
246.102 64.3555 li
@
243.642 109.355 mo
246.192 64.3655 li
@
245.842 65.6855 mo
246.012 64.3455 li
@
220.892 106.166 mo
244.132 70.3455 li
@
242.742 100.315 mo
245.302 70.7455 li
@
153.302 141.275 mo
162.502 144.355 li
@
153.052 139.135 mo
167.762 130.065 li
@
153.262 139.555 mo
166.552 134.445 li
@
233.172 134.575 mo
153.422 140.285 li
@
172.782 136.775 mo
173.412 133.525 li
@
191.002 109.535 mo
173.662 137.125 li
@
187.762 125.185 mo
174.182 137.565 li
@
166.862 143.525 mo
194.322 120.485 li
@
167.342 144.406 mo
203.822 132.975 li
@
168.092 135.935 mo
165.742 142.755 li
@
169.192 131.166 mo
165.652 142.725 li
@
172.462 128.975 mo
203.722 131.975 li
@
172.082 127.385 mo
188.312 117.225 li
@
233.732 210.355 mo
170.792 145.945 li
@
181.812 136.085 mo
171.172 142.775 li
@
170.432 131.485 mo
180.672 117.646 li
@
170.892 131.925 mo
188.502 117.485 li
@
214.802 118.375 mo
171.332 132.735 li
@
164.802 135.795 mo
171.642 132.206 li
@
187.372 124.605 mo
164.822 135.845 li
@
180.462 117.466 mo
164.272 135.105 li
@
190.552 109.175 mo
164.352 135.185 li
@
241.252 110.706 mo
174.292 75.5155 li
@
244.722 114.115 mo
294.002 204.085 li
@
243.232 109.365 mo
242.802 105.385 li
@
240.262 128.435 mo
243.012 114.385 li
@
245.022 109.055 mo
244.702 109.646 li
@
222.022 108.675 mo
240.992 111.516 li
@
243.692 106.956 mo
222.042 108.156 li
@
245.572 109.266 mo
240.432 128.475 li
@
252.862 125.495 mo
247.082 109.206 li
@
219.602 116.685 mo
243.842 107.695 li
@
217.832 115.105 mo
218.892 110.766 li
@
219.412 118.865 mo
237.592 129.635 li
@
251.262 127.195 mo
219.672 118.266 li
@
252.362 112.416 mo
219.742 117.206 li
@
221.982 107.716 mo
240.052 103.435 li
@
238.082 129.035 mo
221.202 110.195 li
@
240.022 128.396 mo
242.282 105.385 li
@
293.682 143.055 mo
244.522 104.425 li
@
254.692 114.575 mo
253.902 125.355 li
@
261.682 123.295 mo
256.192 114.216 li
@
250.942 129.065 mo
254.302 114.516 li
@
234.462 117.785 mo
252.422 112.735 li
@
234.342 119.495 mo
251.382 126.875 li
@
248.292 130.065 mo
234.082 119.956 li
@
235.132 131.916 mo
232.582 120.956 li
@
260.522 124.916 mo
234.492 119.035 li
@
187.932 115.785 mo
184.722 115.685 li
@
192.732 117.035 mo
194.012 117.685 li
@
192.242 117.706 mo
204.482 130.385 li
@
190.792 109.396 mo
175.452 129.025 li
@
184.162 114.005 mo
190.382 108.985 li
@
195.452 116.445 mo
193.182 109.795 li
@
190.072 120.966 mo
191.942 109.896 li
@
247.822 131.666 mo
186.512 134.615 li
@
194.182 120.305 mo
191.732 122.016 li
@
204.002 131.035 mo
191.892 124.656 li
@
183.932 117.445 mo
187.892 121.625 li
@
193.792 118.275 mo
184.662 116.166 li
@
204.732 130.175 mo
197.792 120.885 li
@
265.302 158.805 mo
208.572 133.266 li
@
128.952 56.1855 mo
144.092 64.8455 li
@
125.922 57.3254 mo
123.892 63.2655 li
@
130.372 42.2455 mo
127.442 52.4755 li
@
125.572 66.1155 mo
169.542 73.8855 li
@
125.602 65.7255 mo
143.752 66.0555 li
@
154.662 14.7555 mo
132.822 37.9455 li
@
165.072 11.5655 mo
133.032 38.1755 li
@
136.902 36.1755 mo
133.232 38.4555 li
@
148.802 65.6655 mo
157.912 64.0455 li
@
147.262 68.4555 mo
159.862 99.0955 li
@
148.722 66.8855 mo
169.622 73.5555 li
@
164.822 18.7155 mo
135.082 52.3055 li
@
145.132 53.8555 mo
135.942 54.1255 li
@
162.892 55.1155 mo
135.942 54.2855 li
@
137.452 59.2955 mo
134.982 56.1955 li
@
145.752 55.4455 mo
140.962 59.6155 li
@
162.012 84.5754 mo
148.742 56.0854 li
@
158.402 62.0555 mo
149.682 55.3254 li
@
162.902 54.9955 mo
150.202 53.9755 li
@
162.952 55.7655 mo
141.522 60.7155 li
@
161.342 85.0355 mo
140.782 63.1455 li
@
165.132 11.6355 mo
140.962 33.1455 li
@
164.382 18.2055 mo
141.192 33.4355 li
@
154.822 14.9055 mo
140.642 32.8455 li
@
260.542 126.115 mo
256.172 127.245 li
@
258.142 188.605 mo
253.902 130.425 li
@
238.122 133.595 mo
260.582 126.255 li
@
267.282 157.325 mo
263.342 127.995 li
@
252.652 130.435 mo
260.702 126.575 li
@
291.402 163.216 mo
252.382 133.095 li
@
238.202 133.906 mo
247.872 132.025 li
@
265.632 158.266 mo
237.702 135.975 li
@
161.712 61.4255 mo
164.132 57.3855 li
@
160.702 66.1355 mo
162.792 84.3555 li
@
170.172 72.6055 mo
162.282 65.3254 li
@
160.802 98.9055 mo
160.442 66.1455 li
@
164.142 15.8955 mo
158.772 13.8254 li
@
164.582 10.6255 mo
158.852 12.2255 li
@
166.702 14.2755 mo
166.842 12.4855 li
@
170.572 76.4055 mo
164.562 84.8155 li
@
171.072 76.6855 mo
161.802 99.0955 li
@
163.272 84.3455 mo
165.242 57.7355 li
@
161.082 98.9155 mo
165.182 57.7255 li
@
162.552 103.315 mo
253.732 202.456 li
@
320.562 252.766 mo
318.512 235.825 li
@
320.132 252.855 mo
317.052 242.605 li
@
321.352 252.795 mo
322.852 245.156 li
@
303.772 249.755 mo
318.442 254.505 li
@
312.122 262.156 mo
318.862 256.865 li
@
300.022 262.945 mo
318.472 256.166 li
@
321.442 258.115 mo
321.372 257.785 li
@
321.782 240.646 mo
296.772 208.335 li
@
322.122 240.425 mo
319.432 235.525 li
@
320.942 241.805 mo
318.712 241.025 li
@
322.142 258.075 mo
323.142 245.195 li
@
303.792 248.266 mo
320.892 243.365 li
@
303.562 250.225 mo
319.732 259.355 li
@
234.302 216.885 mo
299.062 247.875 li
@
308.822 261.545 mo
302.652 251.156 li
@
313.852 239.555 mo
292.522 234.185 li
@
314.972 238.016 mo
296.562 208.475 li
@
316.992 237.716 mo
317.532 235.745 li
@
321.272 258.156 mo
316.992 242.625 li
@
315.672 233.315 mo
292.592 233.545 li
@
316.562 231.355 mo
296.872 208.255 li
@
288.112 231.925 mo
257.392 205.966 li
@
288.232 231.785 mo
279.782 223.525 li
@
312.582 263.085 mo
319.492 261.255 li
@
278.542 248.466 mo
307.832 262.625 li
@
300.182 263.795 mo
307.582 263.745 li
@
300.152 263.485 mo
319.422 260.945 li
@
278.272 248.916 mo
295.622 262.266 li
@
271.312 263.666 mo
295.092 263.805 li
@
265.712 258.055 mo
295.132 263.365 li
@
255.402 206.865 mo
254.232 261.345 li
@
276.712 223.966 mo
255.432 261.675 li
@
261.692 255.565 mo
233.532 217.825 li
@
265.212 256.035 mo
274.252 248.935 li
@
264.932 259.475 mo
267.052 261.775 li
@
272.712 280.965 mo
264.172 259.966 li
@
270.232 288.275 mo
263.782 260.085 li
@
267.502 162.385 mo
263.322 255.065 li
@
253.392 275.385 mo
261.982 259.835 li
@
274.182 245.885 mo
234.082 217.266 li
@
253.742 275.615 mo
274.672 249.355 li
@
273.022 201.135 mo
276.082 244.825 li
@
264.782 244.906 mo
267.402 277.115 li
@
264.162 244.875 mo
260.462 267.115 li
@
297.942 181.435 mo
265.802 240.135 li
@
267.222 261.635 mo
233.552 217.805 li
@
254.112 275.975 mo
266.822 265.285 li
@
273.062 280.855 mo
269.382 266.115 li
@
268.722 289.285 mo
254.242 279.075 li
@
271.722 288.375 mo
272.762 285.695 li
@
261.392 292.775 mo
268.322 291.285 li
@
268.312 282.095 mo
270.102 288.305 li
@
270.342 296.535 mo
270.602 293.285 li
@
271.212 282.665 mo
254.622 278.266 li
@
270.692 296.595 mo
273.112 285.805 li
@
268.512 297.125 mo
253.792 279.555 li
@
261.172 294.475 mo
267.882 297.915 li
@
259.922 272.166 mo
259.032 290.775 li
@
266.242 281.795 mo
260.272 291.165 li
@
267.942 282.175 mo
269.812 296.555 li
@
261.572 271.656 mo
266.082 277.625 li
@
237.892 211.305 mo
270.452 199.466 li
@
237.372 210.456 mo
256.462 192.865 li
@
230.632 226.805 mo
234.702 214.585 li
@
303.632 177.005 mo
234.242 214.575 li
@
259.382 188.825 mo
275.382 153.735 li
@
260.582 189.956 mo
284.972 177.115 li
@
260.592 192.305 mo
270.582 197.435 li
@
231.352 227.185 mo
256.802 193.175 li
@
292.682 206.195 mo
257.992 204.456 li
@
293.322 208.016 mo
279.862 220.055 li
@
274.502 196.675 mo
296.682 170.896 li
@
273.032 196.065 mo
276.252 153.966 li
@
274.202 196.456 mo
285.862 178.085 li
@
231.902 227.745 mo
270.772 200.075 li
@
275.952 220.195 mo
257.462 205.885 li
@
292.752 167.225 mo
278.632 219.295 li
@
327.852 169.335 mo
301.562 178.375 li
@
329.522 166.065 mo
326.402 155.725 li
@
331.052 166.085 mo
332.382 161.995 li
@
322.472 163.295 mo
328.142 167.085 li
@
308.312 175.065 mo
327.822 169.235 li
@
308.762 156.105 mo
270.152 159.615 li
@
309.012 157.005 mo
295.692 163.635 li
@
309.232 154.385 mo
297.742 146.115 li
@
323.162 153.745 mo
313.792 155.425 li
@
330.662 159.156 mo
313.802 156.295 li
@
300.332 176.945 mo
310.122 158.135 li
@
323.222 152.585 mo
298.122 145.335 li
@
323.842 155.075 mo
300.982 177.425 li
@
339.072 156.505 mo
328.132 153.885 li
@
331.222 157.945 mo
327.612 154.925 li
@
330.972 160.845 mo
301.362 177.935 li
@
339.112 157.815 mo
335.612 158.855 li
@
322.862 161.435 mo
330.672 160.025 li
@
308.122 174.615 mo
339.292 158.275 li
@
322.842 161.325 mo
339.062 157.656 li
@
276.212 167.935 mo
317.842 162.225 li
@
300.762 168.195 mo
317.942 162.666 li
@
307.702 174.035 mo
318.522 163.646 li
@
300.222 170.675 mo
303.992 174.095 li
@
276.172 168.865 mo
303.392 175.225 li
@
276.032 153.935 mo
274.102 165.775 li
@
278.422 153.016 mo
296.352 167.375 li
@
286.202 173.605 mo
277.462 153.755 li
@
293.452 145.835 mo
269.852 158.635 li
@
295.402 147.156 mo
293.702 162.245 li
@
298.902 176.675 mo
295.942 147.156 li
@
285.012 174.685 mo
275.902 169.535 li
@
295.802 168.896 mo
276.232 168.355 li
@
289.382 174.585 mo
296.182 170.315 li
@
2 lc
0 lj
113.642 160.845 mo
113.642 162.195 112.542 163.295 111.192 163.295 cv
109.842 163.295 108.742 162.195 108.742 160.845 cv
108.742 159.495 109.842 158.396 111.192 158.396 cv
112.542 158.396 113.642 159.495 113.642 160.845 cv
cp
0 0 0 .71875 cmyk
@
113.642 160.845 mo
113.642 162.195 112.542 163.295 111.192 163.295 cv
109.842 163.295 108.742 162.195 108.742 160.845 cv
108.742 159.495 109.842 158.396 111.192 158.396 cv
112.542 158.396 113.642 159.495 113.642 160.845 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: KRBBAA+ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /KRBBAA+ArialMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000566376
7420962ad27600000124000006306670676dcc79599a000007540000066e
676c796600000000000041cc0000116668656164ce98269100000dc40000
003668686561123312ff00000dfc00000024686d74780000000000000e20
000000626c6f63610000000000000e8400000d166d6178700b470ca80000
1b9c000000206e616d65c0f2653b00001bbc00001b0d7072657052fec4e9
000036cc00000aff67646972000000000000000000000000000100000190
000500000000000000000000000000000000000000000000000000000000
00000000000000000000000000080000000000000000000000000000f000
f0ff000000000000000000000000000100000000000005ba001905ba001a
05a70019042600180000ffe70000ffe80000ffe7fe69ffe805ba0019fe69
ffe802ea000000b8000000b80000000000a800ad016900ad00bf00c201f0
001800af00b900b400c800170044009c007c009400870006005a00c80089
005200520005004400940119ffb4002f00a1000300a100cd00170057007e
00ba00160118ffe9007f008503d300870085000d002200410050006f008d
014cff75005c00df04830037004c006e00700180ff58ff8eff92ffa400a5
00b903c8fffd000b001a0063006300cdffee05d8ffdc002d005c00950099
00df019209b500400057008000b9039d0072009a035d0401ff67fffa0003
0021007700cd0004004d00cd01c0022b004c006500e70118017c034305d8
ffa3ffb0ffc40003001c005d0068009a00ba013501470221055cff4dffcd
0016002d00780080009900b200b600b600b800bd00da010c05f0ffa4fff0
0019002c0049007f00b400ce01c003fefd81fe3f00000005001800290039
0049006f00be00c700d0012301c1026f050c05320540057affd400140031
0055005700a700b400e601f7027e027e027f03c60446ff42000e00850091
00bf00c200c500e1011a012f014f01560229026f029e03720008002c0031
0031006400690089009800c700de012b01b6020c02cf03a304ab04fb061d
fee0ff0e00060026009b009d00c1010d011801200173018201d601e30243
025f029b02e2039404a904d20761001c005e006d008d00ab00f701120138
0151015b0168017c01870191019901cd01d001e802410254026b02ef0368
037103bd044204420453047304830586058b06e8fe58fec4fed1fef7ff32
ff860051007c008100910095009e00b400b900cf00d900d900df00e20105
010b010e010e012001210155017b017b017e018d01a201a801a901b401d0
01d001e201e901f201f501fb020002000206021b02210222022202230272
02770294029c02cf02cf02d002ec02f903170322032b0335033c0359036f
037103870390039003b503e1041a04cf04ff053205320596059f05a805ab
05c205f0060c0782080008ccfca3fd2afddefe00fe88fe96feb2feb4ffe1
00150019001a001c001f003c005100610061006a0078009600a500af00d3
010c0118011a012a013e014c0151015f016a0171017801820184019a01a5
01a801a901ae01bc01cd01d701ef0200020d021c02210222022e02350242
024f024f025e026502710290029202b402d602fa0307030b030f0315032a
0347035d036503740379039603b003cc03dd03e203f603fc03fc03ff040a
041f04220426042b0447045f0475049e04e704e7055c05cb05e5060a066d
068606b806f10736073e07500751075d078f07b607d4086000b600c300b5
00b700000000000000000000000001e00381034503b5008e0233041902ce
02ce002d005f0064034d023f000002a80188027d01b402240578063b023b
014e00f00426029402c6029f02f6023b034d014b0153006a023100000000
0000061404aa0000003c04c300ed04bc026502ce03b50078060c017e02ef
060c00b201000239000001c50330042b03cb00da03df010704a100db040a
011701ed02a70350010b01bd043e05580021039c00ae0371017d00b50245
00000afb088c012b014e01aa00870054013201f803ff0003024e00b40037
03e30083006b02d800ed00770088009701640467008e0033017c00e700a6
029e0329056e062a061501c90269048a021301b4000204a9000002390124
010305140084015d039a06ef02d9007500cf040a00de03ac04bc02cf02ae
034d04f005520168006d007d00860071ff810079055804d2016700030156
002504e00094007c033204210094007f0072005c002f00b6001800ba00b8
0041034d00720018001f004c016a01550099009a009a009800b200040078
006900140057006e00ce00b4065402b80067050e016500e7000004cbfe52
005affa60099ff67006eff92002dffd40087ff7c00b800a800e5008f00a8
0185fe7b0070001e00d900de014c054602cf0546ff2d028a02d902530296
00b700000000000000000000000000000125011800ea00ea00ae0000003e
05bb008a04d70053003fff8cffd500150028002200990062004a00e4006d
00ee00e5004803c00033fe4e02b1ff460370007905df0051ffa7ff1f010a
0068ff6c004f00bc00a507050061072b4043555441403f3e3d3c3b3a3938
373534333231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a19
1817161514131211100f0e0d0c0b0a090807060504030201002c45234660
20b02660b004262348482d2c452346236120b02661b004262348482d2c45
234660b0206120b04660b004262348482d2c4523462361b0206020b02661
b02061b004262348482d2c45234660b0406120b06660b004262348482d2c
4523462361b0406020b02661b04061b004262348482d2c0110203c003c2d
2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320b0
4d44235920b09051582320b00d44235921212d2c20204518684420b00160
2045b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b432343
0b2d2c00b0172370b101173e01b0172370b10217453ab10200080d2d2c45
b01a234445b01923442d2c2045b00325456164b050515845441b2121592d
2cb00143632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b0
0743650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364
615c58b00361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb017
23442d2cb01243588745b0112bb0172344b0177ae41b038a45186920b017
23448a8a8720b0a05158b0112bb0172344b0177ae41b21b0177ae4595918
2d2c2d2cb0022546608a46b040618c482d2c4b53205c58b002855958b001
85592d2c20b0032545b019234445b01a23444565234520b00325606a20b0
09234223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a
54582321b03f1b235961441cb114008a5279b31940201945208a54582321
b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d
4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb1101143
2343650b2d2c4b525845441b2121592d2c0120b003252349b04060b02063
20b000525823b002253823b002256538008a63381b212121212159012d2c
4bb06451584569b00943608a103a1b212121592d2c01b005251023208af5
00b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b006
2510f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c
2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76
b8022323701020b802234520b0005058b00161593a2f182d2c21210c6423
648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b0
02602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c
0c6423648bb84000626023212d2cb4000100000015b00826b00826b00826
b008260f10161345683ab001162d2cb4000100000015b00826b00826b008
26b008260f1016134568653ab001162d2c4b53234b515a5820458a60441b
2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121
592d2c4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03
592d2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425
060c6423646164b807085158b00425b00425012046b01060482046b01060
48590a21211b2121592d2cb012435c580cb00425b00425060c6423646164
b807085158b00425b00425012046b8fff060482046b8fff06048590a2121
1b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b0
3b2b1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a03
4b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c4b5258b004
25b0042549b00425b00425496120b0005458212043b0005558b00325b003
25b8ffc038b8ffc038591bb04054582043b0005458b00225b8ffc038591b
2043b0005458b00325b00325b8ffc038b8ffc0381bb00325b8ffc0385959
5959212121212d2c462346608a8a462320468a608a61b8ff806223201023
8ab902c202c28a70456020b0005058b00161b8ffba8b1bb0468c59b01060
68013a2d2cb1020042b123018851b1400188535a58b910000020885458b2
02010243604259b12401885158b920000040885458b2020202436042b124
01885458b2022002436042004b014b5258b2020802436042591bb9400000
80885458b202040243604259b94000008063b80100885458b20208024360
4259b94000010063b80200885458b202100243604259b94000020063b804
00885458b202400243604259595959592d2cb0024354584b53234b515a58
381b2121591b21212121592d00000001000000030000b1b0afba5f0f3cf5
081b080000000000a2e3272a00000000b9d5b4f6faaffd671000080c0000
0009000100000000000000010000073efe4e00431000faaffe2610000001
000000000000000000000000000000140600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100023900ba0239
00ba0473005500df003c0056001a0055004d006100530055000000000015
001500150015001500150015001500150015001500150015001500150015
0015003300330111017f029403810431050e05f9064f079908b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b3000000010000068a0100003f0076
000700020010002f00560000040d0aff0003000200000046034e00000003
0000000000fe00000000000300000001000a013e0000000300000002000e
05de0000000300000003005e05c00000000300000004000a013e00000003
00000005001805ee0000000300000006000e061e000000030000000700c4
062c00000003000000080026077c0000000300000009008a0da400000003
0000000a04c200fe000000030000000b00620e2e000000030000000c0066
0e90000000030000000d06b406f0000000030000000e005c0ef600010000
00000000007f0f52000100000000000100050ff100010000000000020007
12410001000000000003002f1232000100000000000400050ff100010000
00000005000c124900010000000000060007126100010000000000070062
126800010000000000080013131000010000000000090045162400010000
0000000a02610fd1000100000000000b00311669000100000000000c0033
169a000100000000000d035a12ca000100000000000e002e16cd00030001
04030002000c16fb00030001040500020010170b0003000104060002000c
171b00030001040700020010172700030001040800020010173700030001
0409000000fe00000003000104090001000a013e0003000104090002000e
05de0003000104090003005e05c00003000104090004000a013e00030001
04090005001805ee0003000104090006000e061e000300010409000700c4
062c00030001040900080026077c0003000104090009008a0da400030001
0409000a04c200fe000300010409000b00620e2e000300010409000c0066
0e90000300010409000d06b406f0000300010409000e005c0ef600030001
040a0002000c16fb00030001040b00020010174700030001040c0002000c
16fb00030001040e0002000c17570003000104100002000e176700030001
04130002001217750003000104140002000c16fb00030001041500020010
16fb0003000104160002000c16fb0003000104190002000e178700030001
041b00020010175700030001041d0002000c16fb00030001041f0002000c
16fb0003000104240002000e179500030001042a0002000e17a300030001
042d0002000e17b100030001080a0002000c16fb0003000108160002000c
16fb000300010c0a0002000c16fb000300010c0c0002000c16fb00540079
007000650066006100630065002000a900200054006800650020004d006f
006e006f007400790070006500200043006f00720070006f007200610074
0069006f006e00200070006c0063002e00200044006100740061002000a9
00200054006800650020004d006f006e006f007400790070006500200043
006f00720070006f0072006100740069006f006e00200070006c0063002f
005400790070006500200053006f006c007500740069006f006e00730020
0049006e0063002e00200031003900390030002d0031003900390032002e
00200041006c006c00200052006900670068007400730020005200650073
006500720076006500640043006f006e00740065006d0070006f00720061
00720079002000730061006e007300200073006500720069006600200064
0065007300690067006e002c00200041007200690061006c00200063006f
006e007400610069006e00730020006d006f00720065002000680075006d
0061006e0069007300740020006300680061007200610063007400650072
0069007300740069006300730020007400680061006e0020006d0061006e
00790020006f006600200069007400730020007000720065006400650063
006500730073006f0072007300200061006e006400200061007300200073
0075006300680020006900730020006d006f0072006500200069006e0020
00740075006e00650020007700690074006800200074006800650020006d
006f006f00640020006f006600200074006800650020006c006100730074
002000640065006300610064006500730020006f00660020007400680065
0020007400770065006e00740069006500740068002000630065006e0074
007500720079002e002000200054006800650020006f0076006500720061
006c006c002000740072006500610074006d0065006e00740020006f0066
002000630075007200760065007300200069007300200073006f00660074
0065007200200061006e0064002000660075006c006c0065007200200074
00680061006e00200069006e0020006d006f0073007400200069006e0064
007500730074007200690061006c0020007300740079006c006500200073
0061006e0073002000730065007200690066002000660061006300650073
002e00200020005400650072006d0069006e0061006c0020007300740072
006f006b00650073002000610072006500200063007500740020006f006e
002000740068006500200064006900610067006f006e0061006c00200077
0068006900630068002000680065006c0070007300200074006f00200067
006900760065002000740068006500200066006100630065002000610020
006c0065007300730020006d0065006300680061006e006900630061006c
00200061007000700065006100720061006e00630065002e002000200041
007200690061006c00200069007300200061006e00200065007800740072
0065006d0065006c007900200076006500720073006100740069006c0065
002000660061006d0069006c00790020006f006600200074007900700065
00660061006300650073002000770068006900630068002000630061006e
002000620065002000750073006500640020007700690074006800200065
007100750061006c0020007300750063006300650073007300200066006f
007200200074006500780074002000730065007400740069006e00670020
0069006e0020007200650070006f007200740073002c0020007000720065
00730065006e0074006100740069006f006e0073002c0020006d00610067
0061007a0069006e006500730020006500740063002c00200061006e0064
00200066006f007200200064006900730070006c00610079002000750073
006500200069006e0020006e006500770073007000610070006500720073
002c0020006100640076006500720074006900730069006e006700200061
006e0064002000700072006f006d006f00740069006f006e0073002e004d
006f006e006f0074007900700065003a0041007200690061006c00200052
006500670075006c00610072003a00560065007200730069006f006e0020
0033002e0030003000200028004d006900630072006f0073006f00660074
00290041007200690061006c004d00540041007200690061006c00ae0020
00540072006100640065006d00610072006b0020006f0066002000540068
00650020004d006f006e006f007400790070006500200043006f00720070
006f0072006100740069006f006e00200070006c00630020007200650067
006900730074006500720065006400200069006e00200074006800650020
0055005300200050006100740020002600200054004d0020004f00660066
002e00200061006e006400200065006c0073006500770068006500720065
002e004e004f00540049004600490043004100540049004f004e0020004f
00460020004c004900430045004e00530045002000410047005200450045
004d0045004e0054000d000a000d000a0054006800690073002000740079
007000650066006100630065002000690073002000740068006500200070
0072006f007000650072007400790020006f00660020004d006f006e006f
00740079007000650020005400790070006f006700720061007000680079
00200061006e006400200069007400730020007500730065002000620079
00200079006f007500200069007300200063006f00760065007200650064
00200075006e00640065007200200074006800650020007400650072006d
00730020006f0066002000610020006c006900630065006e007300650020
00610067007200650065006d0065006e0074002e00200059006f00750020
00680061007600650020006f0062007400610069006e0065006400200074
00680069007300200074007900700065006600610063006500200073006f
006600740077006100720065002000650069007400680065007200200064
00690072006500630074006c0079002000660072006f006d0020004d006f
006e006f00740079007000650020006f007200200074006f006700650074
0068006500720020007700690074006800200073006f0066007400770061
007200650020006400690073007400720069006200750074006500640020
006200790020006f006e00650020006f00660020004d006f006e006f0074
007900700065002700730020006c006900630065006e0073006500650073
002e000d000a000d000a005400680069007300200073006f006600740077
00610072006500200069007300200061002000760061006c007500610062
006c00650020006100730073006500740020006f00660020004d006f006e
006f0074007900700065002e00200055006e006c00650073007300200079
006f00750020006800610076006500200065006e00740065007200650064
00200069006e0074006f0020006100200073007000650063006900660069
00630020006c006900630065006e00730065002000610067007200650065
006d0065006e00740020006700720061006e00740069006e006700200079
006f00750020006100640064006900740069006f006e0061006c00200072
00690067006800740073002c00200079006f007500720020007500730065
0020006f00660020007400680069007300200073006f0066007400770061
007200650020006900730020006c0069006d006900740065006400200074
006f00200079006f0075007200200077006f0072006b0073007400610074
0069006f006e00200066006f007200200079006f007500720020006f0077
006e0020007000750062006c0069007300680069006e0067002000750073
0065002e00200059006f00750020006d006100790020006e006f00740020
0063006f007000790020006f007200200064006900730074007200690062
0075007400650020007400680069007300200073006f0066007400770061
00720065002e000d000a000d000a0049006600200079006f007500200068
00610076006500200061006e00790020007100750065007300740069006f
006e00200063006f006e006300650072006e0069006e006700200079006f
00750072002000720069006700680074007300200079006f007500200073
0068006f0075006c00640020007200650076006900650077002000740068
00650020006c006900630065006e00730065002000610067007200650065
006d0065006e007400200079006f00750020007200650063006500690076
0065006400200077006900740068002000740068006500200073006f0066
007400770061007200650020006f007200200063006f006e007400610063
00740020004d006f006e006f007400790070006500200066006f00720020
006100200063006f007000790020006f006600200074006800650020006c
006900630065006e00730065002000610067007200650065006d0065006e
0074002e000d000a000d000a004d006f006e006f00740079007000650020
00630061006e00200062006500200063006f006e00740061006300740065
0064002000610074003a000d000a000d000a0055005300410020002d0020
002800380034003700290020003700310038002d00300034003000300009
00090055004b0020002d0020003000310031003400340020003000310037
003300370020003700360035003900350039000d000a0068007400740070
003a002f002f007700770077002e006d006f006e006f0074007900700065
002e0063006f006d004d006f006e006f0074007900700065002000540079
00700065002000440072006100770069006e00670020004f006600660069
006300650020002d00200052006f00620069006e0020004e006900630068
006f006c00610073002c0020005000610074007200690063006900610020
005300610075006e00640065007200730020003100390038003200680074
00740070003a002f002f007700770077002e006d006f006e006f00740079
00700065002e0063006f006d002f00680074006d006c002f006d0074006e
0061006d0065002f006d0073005f0061007200690061006c002e00680074
006d006c0068007400740070003a002f002f007700770077002e006d006f
006e006f0074007900700065002e0063006f006d002f00680074006d006c
002f006d0074006e0061006d0065002f006d0073005f00770065006c0063
006f006d0065002e00680074006d006c0068007400740070003a002f002f
007700770077002e006d006f006e006f0074007900700065002e0063006f
006d002f00680074006d006c002f0074007900700065002f006c00690063
0065006e00730065002e00680074006d006c547970656661636520a92054
6865204d6f6e6f7479706520436f72706f726174696f6e20706c632e2044
61746120a920546865204d6f6e6f7479706520436f72706f726174696f6e
20706c632f5479706520536f6c7574696f6e7320496e632e20313939302d
313939322e20416c6c20526967687473205265736572766564436f6e7465
6d706f726172792073616e732073657269662064657369676e2c20417269
616c20636f6e7461696e73206d6f72652068756d616e6973742063686172
6163746572697374696373207468616e206d616e79206f66206974732070
72656465636573736f727320616e642061732073756368206973206d6f72
6520696e2074756e65207769746820746865206d6f6f64206f6620746865
206c6173742064656361646573206f6620746865207477656e7469657468
2063656e747572792e2020546865206f766572616c6c2074726561746d65
6e74206f662063757276657320697320736f6674657220616e642066756c
6c6572207468616e20696e206d6f737420696e647573747269616c207374
796c652073616e732073657269662066616365732e20205465726d696e61
6c207374726f6b65732061726520637574206f6e2074686520646961676f
6e616c2077686963682068656c707320746f206769766520746865206661
63652061206c657373206d656368616e6963616c20617070656172616e63
652e2020417269616c20697320616e2065787472656d656c792076657273
6174696c652066616d696c79206f66207479706566616365732077686963
682063616e2062652075736564207769746820657175616c207375636365
737320666f7220746578742073657474696e6720696e207265706f727473
2c2070726573656e746174696f6e732c206d6167617a696e657320657463
2c20616e6420666f7220646973706c61792075736520696e206e65777370
61706572732c206164766572746973696e6720616e642070726f6d6f7469
6f6e732e4d6f6e6f747970653a417269616c20526567756c61723a566572
73696f6e20332e303020284d6963726f736f667429417269616c4d544172
69616ca82054726164656d61726b206f6620546865204d6f6e6f74797065
20436f72706f726174696f6e20706c63207265676973746572656420696e
2074686520555320506174202620544d204f66662e20616e6420656c7365
77686572652e4e4f54494649434154494f4e204f46204c4943454e534520
41475245454d454e540d0a0d0a5468697320747970656661636520697320
7468652070726f7065727479206f66204d6f6e6f74797065205479706f67
726170687920616e64206974732075736520627920796f7520697320636f
766572656420756e64657220746865207465726d73206f662061206c6963
656e73652061677265656d656e742e20596f752068617665206f62746169
6e6564207468697320747970656661636520736f66747761726520656974
686572206469726563746c792066726f6d204d6f6e6f74797065206f7220
746f676574686572207769746820736f6674776172652064697374726962
75746564206279206f6e65206f66204d6f6e6f747970652773206c696365
6e736565732e0d0a0d0a5468697320736f66747761726520697320612076
616c7561626c65206173736574206f66204d6f6e6f747970652e20556e6c
65737320796f75206861766520656e746572656420696e746f2061207370
656369666963206c6963656e73652061677265656d656e74206772616e74
696e6720796f75206164646974696f6e616c207269676874732c20796f75
7220757365206f66207468697320736f667477617265206973206c696d69
74656420746f20796f757220776f726b73746174696f6e20666f7220796f
7572206f776e207075626c697368696e67207573652e20596f75206d6179
206e6f7420636f7079206f72206469737472696275746520746869732073
6f6674776172652e0d0a0d0a496620796f75206861766520616e79207175
657374696f6e20636f6e6365726e696e6720796f75722072696768747320
796f752073686f756c642072657669657720746865206c6963656e736520
61677265656d656e7420796f752072656365697665642077697468207468
6520736f667477617265206f7220636f6e74616374204d6f6e6f74797065
20666f72206120636f7079206f6620746865206c6963656e736520616772
65656d656e742e0d0a0d0a4d6f6e6f747970652063616e20626520636f6e
7461637465642061743a0d0a0d0a555341202d202838343729203731382d
303430300909554b202d203031313434203031373337203736353935390d
0a687474703a2f2f7777772e6d6f6e6f747970652e636f6d4d6f6e6f7479
706520547970652044726177696e67204f6666696365202d20526f62696e
204e6963686f6c61732c205061747269636961205361756e646572732031
393832687474703a2f2f7777772e6d6f6e6f747970652e636f6d2f68746d
6c2f6d746e616d652f6d735f617269616c2e68746d6c687474703a2f2f77
77772e6d6f6e6f747970652e636f6d2f68746d6c2f6d746e616d652f6d73
5f77656c636f6d652e68746d6c687474703a2f2f7777772e6d6f6e6f7479
70652e636f6d2f68746d6c2f747970652f6c6963656e73652e68746d6c00
4e006f0072006d0061006c006e0079006f00620079010d0065006a006e00
e9006e006f0072006d0061006c005300740061006e006400610072006403
9a03b103bd03bf03bd03b903ba03ac004e006f0072006d00610061006c00
69004e006f0072006d00e1006c006e0065004e006f0072006d0061006c00
65005300740061006e00640061006100720064041e0431044b0447043d04
4b0439004e0061007600610064006e006f0074006801b001a10300006e00
670041007200720075006e00740061000000b1540f4122031700ef031700
ff03170003001f0317002f0317004f0317005f0317008f0317009f031700
06000f0317005f0317006f0317007f031700bf031700f003170006004003
17b2923340b80317b28b3340b80317b36a6c3240b80317b2613340b80317
b35c5d3240b80317b357593240b80317b34d513240b80317b344493240b8
0317b23a3340b80317b331343240b80317b32e423240b80317b3272c3240
b80317b312253280b80317b30a0d32c04116031600d00316000200700316
000102c4000f0101001f00a0031500b0031500020306000f0101001f0040
0312b32426329fbf03040001030203010064001fffc00301b20d1132410a
02ff02ef0012001f02ee02ed0064001fffc002edb30e11329f414a02e200
af02e200bf02e2000302e202e202e102e1007f02e00001001002e0003f02
e0009f02e000bf02e000cf02e000ef02e0000602e002e002df02df02de02
de000f02dd002f02dd003f02dd005f02dd009f02dd00bf02dd00ef02dd00
0702dd02dd001002dc0001000002dc0001001002dc003f02dc000202dc02
dc001002db000102db02db000f02da000102da02daffc002d3b2373932b9
ffc002d3b22b2f32b9ffc002d3b21f2532b9ffc002d3b2171b32b9ffc002
d3b2121632b802d2b2f9291fb802e3b3202b1fa0413002d400b002d40002
000002d4001002d4002002d4005002d4006002d4007002d40006006002d6
007002d6008002d6009002d600a002d600b002d60006000002d6001002d6
002002ca002002cc002002d6003002d6004002d6005002d6000802d0b220
2b1fb802cfb226421f411602ce02c70017001f02cd02c80017001f02cc02
c60017001f02cb02c50017001f02c902c5001e001f02ca02c6b21e1f0041
0b02c6000002c7001002c6001002c7002f02c5000502c1b324121fff4111
02bf0001001f02bf002f02bf003f02bf004f02bf005f02bf008f02bf0006
02bf0222b2641f12410b02bb00ca0800001f02b200e90800001f02a600a2
0800406a1f4026434932402043493240263a3d3240203a3d329f209f2602
4026969932402096993240268e923240208e92324026848c324020848c32
40267a813240207a813240266c763240206c76324026646a324020646a32
40265a5f3240205a5f3240264f543240204f5432b8029eb724271f374f6b
0120410f0277003002770040027700500277000402770277027700f90400
001f029bb22a2a1fb8029a402b292a1f80ba0180bc0180520180a2018065
01807e01808101803c01805e01802b01801c01801e0180400180bb013800
0100800140b40180400180bb013800010080013940180180ca0180ad0180
73018026018025018024018020013740b80221b2493340b80221b2453340
b80221b341423240b80221b33d3e320f410f0221003f0221007f02210003
00bf022100cf022100ff0221000300400221b320223240b80221b3191e32
40b80222b32a3f3240b80221b32e3a326f414802c3007f02c3008f02c300
df02c30004002f02c3006002c300cf02c30003000f02c3003f02c3005f02
c300c002c300ef02c300ff02c3000600df02220001008f02220001000f02
22002f0222003f0222005f0222007f022200ef0222000600bf022100ef02
210002006f0221007f022100af02210003002f0221003f0221004f022100
0302c302c30222022202210221401d101c102b1048038f1c010f1e014f1e
ff1e023700161600000012110811b8010db6f70df8f70d00094109028e02
8f001d001f0290028f001d001f028fb2f91d1fb80198b226bb1f41150197
001e0401001f013900260125001f013800730401001f0135001c0801001f
0134001c02ab001f0132b21c561fb8010fb2262c1fba010e001e0401b61f
f91ce41fe91cb80201b61fe81cbb1fd720b80401b21fd51cb802abb61fd4
1c891fc92fb80801b21fbc26b80101b21fba20b80201b61fb91c381fadca
b80401b21f8126b8019ab21f7e26b8019ab61f7d1c471f6b1cb80401b21f
6526b8019ab21f5e73b80401400f1f52265a1f481c891f441c621f4073b8
0801b61f3f1c5e1f3c26b8019ab21f351cb80401b61f301cbb1f2b1cb804
01b61f2a1c561f291cb80101b21f231eb80401b21f5537b80168402c0796
0758074f07360732072c0721071f071d071b071408120810080e080c080a
080808060804080208000814b8ffe0402b00000100140610000001000604
000001000410000001001002000001000200000001000002010802004a00
b013034b024b5342014bb0c063004b6220b0f65323b8010a515ab0052342
01b0124b004b5442b0382b4bb807ff52b0372b4bb007505b58b101018e59
b0382bb00288b801005458b801ffb101018e851bb0124358b90001011185
8d1bb900010128858d5959001816763f183f123e113946443e113946443e
113946443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b
2b2b182b2b2b2b2b2b2b2b2b2b2b182b1db0964b5358b0aa1d59b0324b53
58b0ff1d594bb09353205c58b901f201f04544b901f101f045445958b903
3e01f2455258b901f2033e4459594bb8015653205c58b9002001f14544b9
002601f145445958b9081e0020455258b90020081e4459594bb8019a5320
5c58b9002501f24544b9002401f245445958b909090025455258b9002509
094459594bb8040153205c58b173244544b1242445445958b91720007345
5258b9007317204459594bb8040153205c58b1ca254544b1252545445958
b9168000ca455258b900ca16804459594bb03e53205c58b11c1c4544b11e
1c45445958b9011a001c455258b9001c011a4459594bb05653205c58b11c
1c4544b12f1c45445958b90189001c455258b9001c01894459594bb80301
53205c58b11c1c4544b11c1c45445958b90de0001c455258b9001c0de044
59592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b01b33b59635c45652345602345
6560234560b08b766818b080622020b163594565234520b0032660626368
20b003266165b059236544b063234420b13b5c4565234520b00326606263
6820b003266165b05c236544b03b2344b1005c455458b15c406544b23b40
3b4523614459b347503437456523456023456560234560b089766818b080
622020b134504565234520b003266062636820b003266165b050236544b0
34234420b147374565234520b003266062636820b003266165b037236544
b0472344b10037455458b137406544b24740474523614459004b5342014b
5058b108004259435c58b108004259b3020b0a124358601b215942161070
3eb0124358b93b21187e1bba040001a8000b2b59b00c2342b00d2342b012
4358b92d412d411bba04000400000b2b59b00e2342b00f2342b0124358b9
187e3b211bba01a80400000b2b59b0102342b0112342002b747573750018
4569444569444569447373737374757374752b2b2b2b74752b2b2b2b2b73
7373737373737373737373737373737373737373737373732b2b2b45b040
6144737400004bb02a534bb03f515a58b1070745b040604459004bb03a53
4bb03f515a58b10b0b45b8ffc0604459004bb02e534bb03a515a58b10303
45b040604459004bb02e534bb03c515a58b1090945b8ffc06044592b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b752b2b2b2b2b2b2b435c58b9008002
bbb301401e017400735903b01e4b5402b0124b545ab012435c5a58ba009f
02220001007359002b7473012b01732b2b2b2b2b2b2b2b737373732b002b
2b2b2b2b2b00456944734569447345694473747545694473456944456944
4569447374456944456944732b2b2b2b2b732b002b732b74752b2b2b2b2b
2b2b2b2b2b2b2b2b2b7374752b0000>
[4455 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 42 17 <000100ba0000018700cd000300254018023c000a023c5f006f007f00af00
04a0000100a004a198182b10f65d5ded003fed313033353315bacdcdcd00
>KRBBAA+ArialMT AddT42Char 
1 102 19 <00020055ffe7041105c00010001d0155b10202435458400a1a1e0405141e
0d0d1709b8ffe8b40f0f025509b8ffe840190d0d02550911000c0f0f0255
00160c0c0255000c0d0d0255002f2b2b2bcd2f2b2bcd003fed3fed31301b
b10602435458400a1a1e0405141e0d0d1709b8fff4b40f0f065509b8ffe6
b40d0d065509b8ffee40190b0b0655091100100d0d065500100c0c065500
100b0b0655002f2b2b2bcd2f2b2b2bcd003fed3fed31301bb4062019101c
b8fff0b202200bbeffe00016ffe00012ffe0000fffe0406204068702880b
880fc90e0509070b180245134c154a19431b54135c155c19521b6b076b0b
63136c156b19601b79027706760b7a0f870698079610c918da02d606d60b
db0f1a1a1e0405141e0d0d17730940212334300901000910090209901f11
7300b8ffc0400e212334200040000200901ec78b182b10f65d2bed10f65d
712bed003fed3fed3130015d71005d003838383838013838385959131012
363332161612151002062322272613101633323611102623220706556bd3
a076b274426ad3a1d47991b9a97c7ca9a97e7c4a5d02d30104013dac5fb3
feffdafefefec3ad98b7019dfe97eff00168016aee698600>KRBBAA+ArialMT AddT42Char 
1 546 20 <000100df000002fb05c0000a00af402003400d11346b047f028f02990804
ac04010900060502030905010c0201ca0a00b8ffc0400a21233430000120
000100b8ffe0b41010025500b8ffea40110f0f0255001c0c0c0255000e0d
0d025500b8fff040190f0f065500100c0c065500100d0d0655001a0c0540
0d0f3405b8ffc0400e212334300501200540050205190bba013c01850018
2b4e10e45d712b2b10f62b2b2b2b2b2b2b5d712b3c4dfd3c003f3f173901
11393130015d005d2b212311060607353636373302fbb441d35497e22f74
047b3e7c1fae47ca5f00>KRBBAA+ArialMT AddT42Char 
1 1794 23 <0002001a0000041005ba000a000d0126403612580c680c9a0ca90cc90c05
4c034c0d94040312010208000c060307050a0b0307000c0c0d0dca030414
030304030d00020c0d040703bb02bb0008000201a0400a000404000c0c00
ca0a04b80266b705050a401d1f340ab8ffe0b4101002550ab8ffe6b40d0d
02550ab8ffeeb40d0d06550ab80137400d07402223340780213507900f02
b8ffc0400b0d14340002100220020302b8ffe0b40d0d025502b8ffe4b60d
0d065502b50eb8018cb18b182b10ec2b2b5d2b10f62b2bf42b2b2b2b3c10
e610fd3c003f3f10f43cf63c1139390111123939872e2b047d10c40f0f0f
313001435c58b9000dffdeb212390db8ffd4400b333903222d3903041d1d
3c2b2b2b2b595d005d435c5840140c400b390c8050390c4026390c221c39
0c402d392b2b2b2b2b5921112135013311331523110311010296fd84029d
93c6c6b4fe35015fa503b6fc4aa5fea102040295fd6b>KRBBAA+ArialMT AddT42Char 
1 0 0 <00020100000005000500000300070000211121112521112101000400fc20
03c0fc400500fb002004c000>KRBBAA+ArialMT AddT42Char 
KRBBAA+ArialMT /CharStrings get begin
/g17 17 def
/g19 19 def
/g20 20 def
/g23 23 def
end
KRBBAA+ArialMT /Encoding get
dup 46 /g17 put
dup 48 /g19 put
dup 49 /g20 put
dup 52 /g23 put
pop
end
%ADOEndSubsetFont
/UOXUCN+ArialMT /KRBBAA+ArialMT findfont ct_VMDictPut
/UOXUCN+ArialMT*1 
[46{/.notdef}rp /g17 /.notdef /g19 /g20 2{/.notdef}rp /g23 203{/.notdef}rp]
UOXUCN+ArialMT nf
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
109.282 161.335 mo
(144.0)
[.848343 .848343 .848343 .424179 0 ]xsh
93.6625 158.285 mo
93.6625 159.646 92.5725 160.735 91.2125 160.735 cv
89.8625 160.735 88.7725 159.646 88.7725 158.285 cv
88.7725 156.935 89.8625 155.845 91.2125 155.845 cv
92.5725 155.845 93.6625 156.935 93.6625 158.285 cv
cp
0 0 0 .71875 cmyk
@
93.6625 158.285 mo
93.6625 159.646 92.5725 160.735 91.2125 160.735 cv
89.8625 160.735 88.7725 159.646 88.7725 158.285 cv
88.7725 156.935 89.8625 155.845 91.2125 155.845 cv
92.5725 155.845 93.6625 156.935 93.6625 158.285 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: KRBBAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal KRBBAA+ArialMT gcheck setglobal} if
1 1320 22 <00010056ffe6041605c0002b0159b10202435458400b1918400d0d025518
1c0001b8ffc0402b0c0d02550129230a0d0f0c0f1e0a0a29151e1c041e29
1c05290d230d0c181901001220100c0c0255200726b8ffe8b40c0d025526
2f2bcd2f2bcd2fcd2fcd2f0012393f3f10ed10ed12392fedc610c6123910
c42b3210c42b3231301b4028050d160d450d860d0445115711761b035216
6c106a146416750d7914860d8a14891ba50d0a052003b8ffe0400b0b0c0d
0e040701230d0c01b802a4b340000100bb01180029000d0135b40c0c1504
18ba02a4001902684027151e1c05041e290d12735f206f200220180d0d06
55208007732640212334302601002610260226b8fff4b70d0d065526902d
18b80138b219d301ba01380000ffc0400b212334200040000200902cb801
92b18b182b10f65d2bedf4ed10f62b5d712bedf42b5ded003fed3fedfde4
1112392fed10fd5de411123901111217393130013838015d005d01715913
371616333236353426232207371633323635342623220607273636333216
1615140607161615140023222656b41f956b7fafa27d334c14120b73b886
6a698c14b421eaae78ca6b66648290fee8d6c1ff0183189987b0827ca114
9e02787d6382848420b5c767b2645f9c2e1ebd8ec0fef5e6>KRBBAA+ArialMT AddT42Char 
KRBBAA+ArialMT /CharStrings get begin
/g22 22 def
end
KRBBAA+ArialMT /Encoding get
dup 51 /g22 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/UOXUCN+ArialMT*1 
[46{/.notdef}rp /g17 /.notdef /g19 /g20 /.notdef /g22 /g23 
203{/.notdef}rp]
UOXUCN+ArialMT nf
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
89.3125 158.785 mo
(143.0)
[.848343 .848343 .848343 .424835 0 ]xsh
123.012 142.075 mo
123.012 143.435 121.912 144.525 120.562 144.525 cv
119.212 144.525 118.112 143.435 118.112 142.075 cv
118.112 140.725 119.212 139.635 120.562 139.635 cv
121.912 139.635 123.012 140.725 123.012 142.075 cv
cp
0 0 0 .71875 cmyk
@
123.012 142.075 mo
123.012 143.435 121.912 144.525 120.562 144.525 cv
119.212 144.525 118.112 143.435 118.112 142.075 cv
118.112 140.725 119.212 139.635 120.562 139.635 cv
121.912 139.635 123.012 140.725 123.012 142.075 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: KRBBAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal KRBBAA+ArialMT gcheck setglobal} if
1 3058 26 <000100610000041605a7000d0070400ec40d01040d010402080409030d00
b802bb4030020104090c0d73030302402123344f025f026f0203021a0f08
7309eb004f015f015f02033f015f016f017f010401190eb80192b18b182b
4e10f45d713c4df4ed4e10f6712b3c4d10ed003f3f3cfd3c391139011112
39313001715d13352115060003060723361212376103b58cfeed4b360fb9
0382f38904faad8c95fe12fefbb8dbad01ea01c79c00>KRBBAA+ArialMT AddT42Char 
KRBBAA+ArialMT /CharStrings get begin
/g26 26 def
end
KRBBAA+ArialMT /Encoding get
dup 55 /g26 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/UOXUCN+ArialMT*1 
[46{/.notdef}rp /g17 /.notdef /g19 /g20 /.notdef /g22 /g23 
2{/.notdef}rp /g26 200{/.notdef}rp]
UOXUCN+ArialMT nf
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
119.082 142.575 mo
(73.0)
[.848343 .848343 .424179 0 ]xsh
130.632 144.865 mo
130.632 146.216 129.532 147.305 128.182 147.305 cv
126.832 147.305 125.732 146.216 125.732 144.865 cv
125.732 143.505 126.832 142.416 128.182 142.416 cv
129.532 142.416 130.632 143.505 130.632 144.865 cv
cp
0 0 0 .71875 cmyk
@
130.632 144.865 mo
130.632 146.216 129.532 147.305 128.182 147.305 cv
126.832 147.305 125.732 146.216 125.732 144.865 cv
125.732 143.505 126.832 142.416 128.182 142.416 cv
129.532 142.416 130.632 143.505 130.632 144.865 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: KRBBAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal KRBBAA+ArialMT gcheck setglobal} if
1 766 21 <0001003c0000040705c0001e01c7b10602435458400911100d1813130655
0db8fff4b4111106550db8ffee4009101006550d1e14051eb8ffe8401713
1306551e1e111106551e1c0e1006551e0c0d0d06551eb802bb400c020a17
17201f10110202201f1112392fd4cd1112392fcd002fed2b2b2b2b3fed2b
2b2bc43231301bb10202435458400911100d0c121202550db8fff440090f
1102550d1e14051eb8ffe0400b121302551e140f1102551eb802bbb2020a
17b8ffe8b40b0b025517b8ffec400e0d0d02551717201f10110202201f11
12392fd4cd1112392f2b2bcd002fed2b2b3fed2b2bc43231301b40363b05
3b06bb05bf06bb07c708c91c07490c590c540e6b0c640e7a127a138912bc
12e51ae51bf01a0cbf0bb713021b101c101d101e1006befff00007ffe000
08fff00009fff0401a1e0a10080606ca1c1a141c1c1a081c1a030102081a
1c030d1e10b802a4b34f110111b80118b50d1e1405001eb802bb400f0102
0c0a7317d30000014021233401bb0281002000100138400c11b53f025f02
6f027f020402ba0224001f018fb18b182b10f65df4ed10f62b3c10f4ed00
3f3cfd3c3fedfd5de4111217390111121739870e2e2b0e7d10c401111239
313000383838380138383838005d015d7259592515212637363637363635
34262322060727363633321615140606070606070407fc37021725a39aef
a8997b829c01b913f8d1d3f648a7c2a25c1eadad413c63c07ec4e5666b93
9c8a13cfd9eaad58aabca4886131>KRBBAA+ArialMT AddT42Char 
1 3890 28 <00020055ffe7041905c0001e002a01aeb10602435458b70b1f1801002511
18b8fff6b40f0f065518b8fff4b40d0d065518b8fff040280c0c06551811
0c0d0d065511100c0c06551118112c2b0b281e0f0e1f0e4f0e030e0e1400
50010101b8ffc0400d1011065501041e1c0d221e1405003fed3fedc42b5d
3212392f5ded3201111239392f2b2b2f2b2b2b10cdd4cd10ddc531301bb1
0202435458b70b1f180100251118b8ffeab40f0f025518b8ffea402a0d0d
025518110c0c0c02551118112c2b0b281e0f0e1f0e4f0e030e0e14005001
0101041e1c0d221e1405003fed3fedc45d3212392f5ded3201111239392f
2b2f2b2b10cdd4cd10ddc531301b40343a1a4c1640235b16572366036c16
6d1a67237a1a7d1e8c1a8b1e9a16a91abc1aea16e620f620133d169e16ad
16033a2964060227baffe00023ffe0401821200620281e4f0e5f0e020e0e
1c221e140501d350000100b80268b4041e1c0d1fba0139000b0138401118
40212334301801001810180218902c01b80138b400b5257311b8ffc0400e
212334201140110211902bc78b182b10f65d2bedf4ed10f65d712beded00
3fedfd5de43fed12392f5ded31300138383838005d71015d595913371616
33323e023534270606232202353400333216121110020623222601342623
220615141633323670ad167c61537d50360136bb6db6fc0107c68fed7b7a
f1a2acda02cba57478b2a97c7da10153107a6e4c7fd8700c18566b0108d8
df01109afee3fef2fee7feb3aebf03349bb6c49c8cafaf00>KRBBAA+ArialMT AddT42Char 
KRBBAA+ArialMT /CharStrings get begin
/g21 21 def
/g28 28 def
end
KRBBAA+ArialMT /Encoding get
dup 50 /g21 put
dup 57 /g28 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/UOXUCN+ArialMT*1 
[46{/.notdef}rp /g17 /.notdef /g19 /g20 /g21 /g22 /g23 
2{/.notdef}rp /g26 /.notdef /g28 198{/.notdef}rp]
UOXUCN+ArialMT nf
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
126.702 145.355 mo
(92.0)
[.848343 .848335 .424179 0 ]xsh
90.9825 150.766 mo
90.9825 152.115 89.8825 153.206 88.5325 153.206 cv
87.1825 153.206 86.0825 152.115 86.0825 150.766 cv
86.0825 149.406 87.1825 148.315 88.5325 148.315 cv
89.8825 148.315 90.9825 149.406 90.9825 150.766 cv
cp
0 0 0 .71875 cmyk
@
90.9825 150.766 mo
90.9825 152.115 89.8825 153.206 88.5325 153.206 cv
87.1825 153.206 86.0825 152.115 86.0825 150.766 cv
86.0825 149.406 87.1825 148.315 88.5325 148.315 cv
89.8825 148.315 90.9825 149.406 90.9825 150.766 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: KRBBAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal KRBBAA+ArialMT gcheck setglobal} if
1 2146 24 <00010055ffe7042105a6001e0156b10202435458b90001ffc0400d0d0d02
55011c0e0a1e15151c12b802bb400b0f04041e1c0d0e01000718b8ffeab4
0f0f025518b8ffeab40d0d0255182f2b2bcd2fcd2f003fed3fed12392ffd
c410c42b31301b4029120c0d0d06550f0c0d0d06554b1a791d8a1d9613a7
13c30cd60cdb1b080913180e2a1a03093005300bbaffe00003ffe0401013
0a15121313ca0e0f140e13140e0f0db802a440130e0a1e15400ea00e020e
0e0f40150115151c12b802bbb70f0401d340000100b801184020041e1c0d
115f106f107f108f1004108007731840212334301801001810180218b8ff
f4b70d0d065518902012bc0135000f0195000d0138b20eb501ba01380000
ffc0400b212334200040000200901fb80192b18b182b10f65d2bedf4edf4
ed10f62b5d712bedf45d3c003fedfd5de43fed12392f5d11392f5d10ed10
e487082e2b057d10c4001112393130013838383801715d2b2b5913371616
33323635342623220607271321152103363332001514070623222655bd15
996c82b4ad8c578c28a98e02d9fdb74f8491c00108748df4c8fd0180108a
8bc4a29ab24f3f1602f1acfe765cfef6d1c791b2e000>KRBBAA+ArialMT AddT42Char 
KRBBAA+ArialMT /CharStrings get begin
/g24 24 def
end
KRBBAA+ArialMT /Encoding get
dup 53 /g24 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/UOXUCN+ArialMT*1 
[46{/.notdef}rp /g17 /.notdef /g19 /g20 /g21 /g22 /g23 
/g24 /.notdef /g26 /.notdef /g28 198{/.notdef}rp]
UOXUCN+ArialMT nf
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
87.0425 151.255 mo
(75.0)
[.848343 .848343 .424179 0 ]xsh
95.3525 137.766 mo
95.3525 139.125 94.2525 140.216 92.9025 140.216 cv
91.5525 140.216 90.4525 139.125 90.4525 137.766 cv
90.4525 136.416 91.5525 135.325 92.9025 135.325 cv
94.2525 135.325 95.3525 136.416 95.3525 137.766 cv
cp
0 0 0 .71875 cmyk
@
95.3525 137.766 mo
95.3525 139.125 94.2525 140.216 92.9025 140.216 cv
91.5525 140.216 90.4525 139.125 90.4525 137.766 cv
90.4525 136.416 91.5525 135.325 92.9025 135.325 cv
94.2525 135.325 95.3525 136.416 95.3525 137.766 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
91.4225 138.265 mo
(74.0)
[.848343 .848343 .424179 0 ]xsh
113.362 136.656 mo
113.362 138.005 112.262 139.095 110.912 139.095 cv
109.562 139.095 108.462 138.005 108.462 136.656 cv
108.462 135.295 109.562 134.206 110.912 134.206 cv
112.262 134.206 113.362 135.295 113.362 136.656 cv
cp
0 0 0 .71875 cmyk
@
113.362 136.656 mo
113.362 138.005 112.262 139.095 110.912 139.095 cv
109.562 139.095 108.462 138.005 108.462 136.656 cv
108.462 135.295 109.562 134.206 110.912 134.206 cv
112.262 134.206 113.362 135.295 113.362 136.656 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
109.432 137.145 mo
(72.0)
[.848343 .848343 .424179 0 ]xsh
94.0025 82.3455 mo
94.0025 83.6955 92.9025 84.7955 91.5525 84.7955 cv
90.2025 84.7955 89.1025 83.6955 89.1025 82.3455 cv
89.1025 80.9955 90.2025 79.8955 91.5525 79.8955 cv
92.9025 79.8955 94.0025 80.9955 94.0025 82.3455 cv
cp
0 0 0 .71875 cmyk
@
94.0025 82.3455 mo
94.0025 83.6955 92.9025 84.7955 91.5525 84.7955 cv
90.2025 84.7955 89.1025 83.6955 89.1025 82.3455 cv
89.1025 80.9955 90.2025 79.8955 91.5525 79.8955 cv
92.9025 79.8955 94.0025 80.9955 94.0025 82.3455 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
89.6425 82.8354 mo
(120.0)
[.848343 .848343 .848343 .424179 0 ]xsh
73.9525 73.2355 mo
73.9525 74.5854 72.8525 75.6755 71.5025 75.6755 cv
70.1525 75.6755 69.0525 74.5854 69.0525 73.2355 cv
69.0525 71.8755 70.1525 70.7855 71.5025 70.7855 cv
72.8525 70.7855 73.9525 71.8755 73.9525 73.2355 cv
cp
0 0 0 .71875 cmyk
@
73.9525 73.2355 mo
73.9525 74.5854 72.8525 75.6755 71.5025 75.6755 cv
70.1525 75.6755 69.0525 74.5854 69.0525 73.2355 cv
69.0525 71.8755 70.1525 70.7855 71.5025 70.7855 cv
72.8525 70.7855 73.9525 71.8755 73.9525 73.2355 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
69.5925 73.7255 mo
(122.0)
[.848343 .848343 .848343 .424179 0 ]xsh
60.1025 81.0955 mo
60.1025 82.4455 59.0025 83.5455 57.6525 83.5455 cv
56.3025 83.5455 55.2025 82.4455 55.2025 81.0955 cv
55.2025 79.7455 56.3025 78.6455 57.6525 78.6455 cv
59.0025 78.6455 60.1025 79.7455 60.1025 81.0955 cv
cp
0 0 0 .71875 cmyk
@
60.1025 81.0955 mo
60.1025 82.4455 59.0025 83.5455 57.6525 83.5455 cv
56.3025 83.5455 55.2025 82.4455 55.2025 81.0955 cv
55.2025 79.7455 56.3025 78.6455 57.6525 78.6455 cv
59.0025 78.6455 60.1025 79.7455 60.1025 81.0955 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
55.7425 81.5854 mo
(124.0)
[.848343 .848343 .848351 .424171 0 ]xsh
67.9225 80.2255 mo
67.9225 81.5754 66.8225 82.6755 65.4725 82.6755 cv
64.1225 82.6755 63.0325 81.5754 63.0325 80.2255 cv
63.0325 78.8755 64.1225 77.7755 65.4725 77.7755 cv
66.8225 77.7755 67.9225 78.8755 67.9225 80.2255 cv
cp
0 0 0 .71875 cmyk
@
67.9225 80.2255 mo
67.9225 81.5754 66.8225 82.6755 65.4725 82.6755 cv
64.1225 82.6755 63.0325 81.5754 63.0325 80.2255 cv
63.0325 78.8755 64.1225 77.7755 65.4725 77.7755 cv
66.8225 77.7755 67.9225 78.8755 67.9225 80.2255 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
63.5625 80.7155 mo
(125.0)
[.848343 .848343 .848351 .424828 0 ]xsh
49.1925 86.9355 mo
49.1925 88.2855 48.0925 89.3755 46.7425 89.3755 cv
45.3925 89.3755 44.2925 88.2855 44.2925 86.9355 cv
44.2925 85.5754 45.3925 84.4855 46.7425 84.4855 cv
48.0925 84.4855 49.1925 85.5754 49.1925 86.9355 cv
cp
0 0 0 .71875 cmyk
@
49.1925 86.9355 mo
49.1925 88.2855 48.0925 89.3755 46.7425 89.3755 cv
45.3925 89.3755 44.2925 88.2855 44.2925 86.9355 cv
44.2925 85.5754 45.3925 84.4855 46.7425 84.4855 cv
48.0925 84.4855 49.1925 85.5754 49.1925 86.9355 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: KRBBAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal KRBBAA+ArialMT gcheck setglobal} if
1 2588 25 <0002004dffe7041505c0001d002a014fb10202435458401f0f011f015f01
03011b281e400d010d0d14051e1b05221e140d0a1e01002510b8fff44019
0d0d0255101e17100f0f025517100c0c0255170c0d0d0255172f2b2b2bcd
2f2bcdd4cd10c5003fed3fed12392f5ded10c45d31301b402d6b19014407
4015441944205a1254206b03640764086a1264207408751c8508861cd608
d4161107200d0d065527b8ffe0b40d0d065523b8ffe0400b0d0d06552120
0d0d065507b8ffe0b42720232021b8ffe04011281e400d500d020d0d141b
01d35f000100b802684009051e1b05221e140d01b80138401200b5257310
40212334301001001010100210b8fff0b70c0c065510902c0aba0138001e
013940163f175f176f177f170417160c0c065517160d0d065517b80224b3
2bc78b182b10f62b2b5deded10f62b5d712bedf4ed003fed3fedfd5de411
12392f5ded313001383838382b2b2b2b015d005d59010726272623220706
060736363332121514060623220011103736333216011416163332363534
2623220603fbb3182c496b564155620241bc67b4fd77d084e1fee49d89e8
adddfd374f8e4e72a4a27b7aaa04530e6a304d303eeedc6360fef7d28aed
7e014b017c01a9c1a8c2fcdd5daa59b89e98afaf>KRBBAA+ArialMT AddT42Char 
KRBBAA+ArialMT /CharStrings get begin
/g25 25 def
end
KRBBAA+ArialMT /Encoding get
dup 54 /g25 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/UOXUCN+ArialMT*1 
[46{/.notdef}rp /g17 /.notdef /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 /.notdef /g28 198{/.notdef}rp]
UOXUCN+ArialMT nf
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
44.8325 87.4255 mo
(126.0)
[.848343 .848343 .848351 .424171 0 ]xsh
84.1424 93.5155 mo
84.1424 94.8755 83.0525 95.9655 81.7025 95.9655 cv
80.3525 95.9655 79.2525 94.8755 79.2525 93.5155 cv
79.2525 92.1655 80.3525 91.0754 81.7025 91.0754 cv
83.0525 91.0754 84.1424 92.1655 84.1424 93.5155 cv
cp
0 0 0 .71875 cmyk
@
84.1424 93.5155 mo
84.1424 94.8755 83.0525 95.9655 81.7025 95.9655 cv
80.3525 95.9655 79.2525 94.8755 79.2525 93.5155 cv
79.2525 92.1655 80.3525 91.0754 81.7025 91.0754 cv
83.0525 91.0754 84.1424 92.1655 84.1424 93.5155 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
79.7925 94.0154 mo
(123.0)
[.848343 .848343 .848343 .424179 0 ]xsh
72.9125 96.8555 mo
72.9125 98.2055 71.8225 99.3055 70.4725 99.3055 cv
69.1225 99.3055 68.0225 98.2055 68.0225 96.8555 cv
68.0225 95.5055 69.1225 94.4055 70.4725 94.4055 cv
71.8225 94.4055 72.9125 95.5055 72.9125 96.8555 cv
cp
0 0 0 .71875 cmyk
@
72.9125 96.8555 mo
72.9125 98.2055 71.8225 99.3055 70.4725 99.3055 cv
69.1225 99.3055 68.0225 98.2055 68.0225 96.8555 cv
68.0225 95.5055 69.1225 94.4055 70.4725 94.4055 cv
71.8225 94.4055 72.9125 95.5055 72.9125 96.8555 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
68.5625 97.3455 mo
(121.0)
[.848343 .848343 .848343 .424835 0 ]xsh
99.6825 90.5854 mo
99.6825 91.9355 98.5825 93.0255 97.2325 93.0255 cv
95.8825 93.0255 94.7825 91.9355 94.7825 90.5854 cv
94.7825 89.2355 95.8825 88.1355 97.2325 88.1355 cv
98.5825 88.1355 99.6825 89.2355 99.6825 90.5854 cv
cp
0 0 0 .71875 cmyk
@
99.6825 90.5854 mo
99.6825 91.9355 98.5825 93.0255 97.2325 93.0255 cv
95.8825 93.0255 94.7825 91.9355 94.7825 90.5854 cv
94.7825 89.2355 95.8825 88.1355 97.2325 88.1355 cv
98.5825 88.1355 99.6825 89.2355 99.6825 90.5854 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
95.3225 91.0754 mo
(119.0)
[.848343 .848343 .848343 .424179 0 ]xsh
120.942 89.6055 mo
120.942 90.9655 119.842 92.0555 118.492 92.0555 cv
117.142 92.0555 116.042 90.9655 116.042 89.6055 cv
116.042 88.2555 117.142 87.1655 118.492 87.1655 cv
119.842 87.1655 120.942 88.2555 120.942 89.6055 cv
cp
0 0 0 .71875 cmyk
@
120.942 89.6055 mo
120.942 90.9655 119.842 92.0555 118.492 92.0555 cv
117.142 92.0555 116.042 90.9655 116.042 89.6055 cv
116.042 88.2555 117.142 87.1655 118.492 87.1655 cv
119.842 87.1655 120.942 88.2555 120.942 89.6055 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
117.012 90.1055 mo
(70.0)
[.848343 .848343 .424179 0 ]xsh
123.982 75.3155 mo
123.982 76.6655 122.882 77.7555 121.532 77.7555 cv
120.182 77.7555 119.082 76.6655 119.082 75.3155 cv
119.082 73.9655 120.182 72.8655 121.532 72.8655 cv
122.882 72.8655 123.982 73.9655 123.982 75.3155 cv
cp
0 0 0 .71875 cmyk
@
123.982 75.3155 mo
123.982 76.6655 122.882 77.7555 121.532 77.7555 cv
120.182 77.7555 119.082 76.6655 119.082 75.3155 cv
119.082 73.9655 120.182 72.8655 121.532 72.8655 cv
122.882 72.8655 123.982 73.9655 123.982 75.3155 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
120.042 75.8055 mo
(69.0)
[.848343 .848343 .424179 0 ]xsh
113.212 73.8455 mo
113.212 75.1955 112.112 76.2955 110.762 76.2955 cv
109.412 76.2955 108.312 75.1955 108.312 73.8455 cv
108.312 72.4955 109.412 71.3955 110.762 71.3955 cv
112.112 71.3955 113.212 72.4955 113.212 73.8455 cv
cp
0 0 0 .71875 cmyk
@
113.212 73.8455 mo
113.212 75.1955 112.112 76.2955 110.762 76.2955 cv
109.412 76.2955 108.312 75.1955 108.312 73.8455 cv
108.312 72.4955 109.412 71.3955 110.762 71.3955 cv
112.112 71.3955 113.212 72.4955 113.212 73.8455 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
109.282 74.3354 mo
(56.0)
[.848343 .848343 .424179 0 ]xsh
62.9025 200.255 mo
62.9025 201.605 61.8025 202.706 60.4525 202.706 cv
59.1025 202.706 58.0025 201.605 58.0025 200.255 cv
58.0025 198.906 59.1025 197.805 60.4525 197.805 cv
61.8025 197.805 62.9025 198.906 62.9025 200.255 cv
cp
0 0 0 .71875 cmyk
@
62.9025 200.255 mo
62.9025 201.605 61.8025 202.706 60.4525 202.706 cv
59.1025 202.706 58.0025 201.605 58.0025 200.255 cv
58.0025 198.906 59.1025 197.805 60.4525 197.805 cv
61.8025 197.805 62.9025 198.906 62.9025 200.255 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: KRBBAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal KRBBAA+ArialMT gcheck setglobal} if
1 3230 27 <00030053ffe7041905c00017002300300200b10202435458b40c001b1e2e
b8ffc04017131302552e2e12211e0605281e120d1e090c0c0c025509b8ff
f4b60d0d0255092b0fb8fff0b40f0f02550fb8ffe8b40b0b02550fb8ffe8
b60d0d02550f1803b8fff0b41010025503b8fff0b40f0f025503b8fff440
190d0d02550324150c0b0b0255150c0c0c0255150c0d0d0255152f2b2b2b
cd2f2b2b2bcd2f2b2b2bcd2f2b2bcd003fed3fed12392f2bed393931301b
b10602435458b71e090c0c0c065509b8fff4b60d0d0655092b0fb8ffe4b4
0f0f06550fb8ffe4b60d0d06550f1803b8fff0b40f0f065503b8fffc4022
0d0d06550324150c0c0c0655150c0d0d0655150c001b1e2e2e12211e0605
281e120d003fed3fed12392fed3939012f2b2bcd2f2b2bcd2f2b2bcd2f2b
2bcd31301b4037351601291649164926e60ce930050930017d007d017c04
7408710b720c750d7a178b008a018c048608810b840c860d8d17cc11c613
1222b8ffe0b21c201ab8ffe0b220202fb8ffe0b22d2026b8ffe0401e2920
0c001e18000c1b1e2ea02e012e12211e0605281e120d1e73bf090109b802
6740102b730f40202334300f01000f100f020fb80191b6321873b0030103
b80267b2247315b8ffc0400e2123342015401502159031c78b182b10f65d
2bedf45ded10f45d712bedf45ded003fed3fed12395d2fed393901111239
393130013838383838383838015d72710071595901262635343633321615
140607161615140023220035343613141633323635342623220603141616
333236353426232206016a706ce6bfc0ea6b6d878dfef6d9d9fef6916286
6b6885896667883a49905381a8ad827fa7031b29986aa0dadfa06697292c
c488bcff000101c08fc101546884835f638784fcff4d904fa68082aaa800
>KRBBAA+ArialMT AddT42Char 
KRBBAA+ArialMT /CharStrings get begin
/g27 27 def
end
KRBBAA+ArialMT /Encoding get
dup 56 /g27 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/UOXUCN+ArialMT*1 
[46{/.notdef}rp /g17 /.notdef /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 /g27 /g28 198{/.notdef}rp]
UOXUCN+ArialMT nf
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
58.9725 200.745 mo
(86.0)
[.848343 .848343 .424179 0 ]xsh
53.5625 205.385 mo
53.5625 206.735 52.4625 207.835 51.1125 207.835 cv
49.7625 207.835 48.6625 206.735 48.6625 205.385 cv
48.6625 204.035 49.7625 202.935 51.1125 202.935 cv
52.4625 202.935 53.5625 204.035 53.5625 205.385 cv
cp
0 0 0 .71875 cmyk
@
53.5625 205.385 mo
53.5625 206.735 52.4625 207.835 51.1125 207.835 cv
49.7625 207.835 48.6625 206.735 48.6625 205.385 cv
48.6625 204.035 49.7625 202.935 51.1125 202.935 cv
52.4625 202.935 53.5625 204.035 53.5625 205.385 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
49.6225 205.875 mo
(85.0)
[.848343 .848343 .424171 0 ]xsh
42.4525 194.885 mo
42.4525 196.235 41.3525 197.335 40.0025 197.335 cv
38.6525 197.335 37.5526 196.235 37.5526 194.885 cv
37.5526 193.535 38.6525 192.435 40.0025 192.435 cv
41.3525 192.435 42.4525 193.535 42.4525 194.885 cv
cp
0 0 0 .71875 cmyk
@
42.4525 194.885 mo
42.4525 196.235 41.3525 197.335 40.0025 197.335 cv
38.6525 197.335 37.5526 196.235 37.5526 194.885 cv
37.5526 193.535 38.6525 192.435 40.0025 192.435 cv
41.3525 192.435 42.4525 193.535 42.4525 194.885 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
38.5225 195.375 mo
(84.0)
[.848343 .848343 .424179 0 ]xsh
35.1827 190.945 mo
35.1827 192.295 34.0827 193.385 32.7327 193.385 cv
31.3827 193.385 30.2827 192.295 30.2827 190.945 cv
30.2827 189.595 31.3827 188.495 32.7327 188.495 cv
34.0827 188.495 35.1827 189.595 35.1827 190.945 cv
cp
0 0 0 .71875 cmyk
@
35.1827 190.945 mo
35.1827 192.295 34.0827 193.385 32.7327 193.385 cv
31.3827 193.385 30.2827 192.295 30.2827 190.945 cv
30.2827 189.595 31.3827 188.495 32.7327 188.495 cv
34.0827 188.495 35.1827 189.595 35.1827 190.945 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
31.2526 191.435 mo
(83.0)
[.848343 .848343 .424171 0 ]xsh
28.8327 205.706 mo
28.8327 207.065 27.7424 208.156 26.3924 208.156 cv
25.0327 208.156 23.9424 207.065 23.9424 205.706 cv
23.9424 204.355 25.0327 203.266 26.3924 203.266 cv
27.7424 203.266 28.8327 204.355 28.8327 205.706 cv
cp
0 0 0 .71875 cmyk
@
28.8327 205.706 mo
28.8327 207.065 27.7424 208.156 26.3924 208.156 cv
25.0327 208.156 23.9424 207.065 23.9424 205.706 cv
23.9424 204.355 25.0327 203.266 26.3924 203.266 cv
27.7424 203.266 28.8327 204.355 28.8327 205.706 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
24.9026 206.205 mo
(82.0)
[.848343 .848343 .424179 0 ]xsh
72.8825 169.555 mo
72.8825 170.906 71.7925 172.005 70.4325 172.005 cv
69.0825 172.005 67.9925 170.906 67.9925 169.555 cv
67.9925 168.206 69.0825 167.105 70.4325 167.105 cv
71.7925 167.105 72.8825 168.206 72.8825 169.555 cv
cp
0 0 0 .71875 cmyk
@
72.8825 169.555 mo
72.8825 170.906 71.7925 172.005 70.4325 172.005 cv
69.0825 172.005 67.9925 170.906 67.9925 169.555 cv
67.9925 168.206 69.0825 167.105 70.4325 167.105 cv
71.7925 167.105 72.8825 168.206 72.8825 169.555 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
68.9525 170.045 mo
(78.0)
[.848343 .848343 .424179 0 ]xsh
78.9025 171.385 mo
78.9025 172.735 77.8125 173.835 76.4525 173.835 cv
75.1025 173.835 74.0125 172.735 74.0125 171.385 cv
74.0125 170.035 75.1025 168.935 76.4525 168.935 cv
77.8125 168.935 78.9025 170.035 78.9025 171.385 cv
cp
0 0 0 .71875 cmyk
@
78.9025 171.385 mo
78.9025 172.735 77.8125 173.835 76.4525 173.835 cv
75.1025 173.835 74.0125 172.735 74.0125 171.385 cv
74.0125 170.035 75.1025 168.935 76.4525 168.935 cv
77.8125 168.935 78.9025 170.035 78.9025 171.385 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
74.5525 171.875 mo
(142.0)
[.848343 .848343 .848343 .424179 0 ]xsh
64.8825 169.166 mo
64.8825 170.516 63.7925 171.615 62.4425 171.615 cv
61.0825 171.615 59.9925 170.516 59.9925 169.166 cv
59.9925 167.815 61.0825 166.716 62.4425 166.716 cv
63.7925 166.716 64.8825 167.815 64.8825 169.166 cv
cp
0 0 0 .71875 cmyk
@
64.8825 169.166 mo
64.8825 170.516 63.7925 171.615 62.4425 171.615 cv
61.0825 171.615 59.9925 170.516 59.9925 169.166 cv
59.9925 167.815 61.0825 166.716 62.4425 166.716 cv
63.7925 166.716 64.8825 167.815 64.8825 169.166 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
60.5325 169.655 mo
(141.0)
[.848343 .848343 .848351 .424171 0 ]xsh
71.4025 150.785 mo
71.4025 152.135 70.3025 153.235 68.9525 153.235 cv
67.6025 153.235 66.5025 152.135 66.5025 150.785 cv
66.5025 149.435 67.6025 148.335 68.9525 148.335 cv
70.3025 148.335 71.4025 149.435 71.4025 150.785 cv
cp
0 0 0 .71875 cmyk
@
71.4025 150.785 mo
71.4025 152.135 70.3025 153.235 68.9525 153.235 cv
67.6025 153.235 66.5025 152.135 66.5025 150.785 cv
66.5025 149.435 67.6025 148.335 68.9525 148.335 cv
70.3025 148.335 71.4025 149.435 71.4025 150.785 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
67.0425 151.275 mo
(140.0)
[.848343 .848343 .848343 .424179 0 ]xsh
87.3625 183.666 mo
87.3625 185.016 86.2725 186.115 84.9225 186.115 cv
83.5625 186.115 82.4725 185.016 82.4725 183.666 cv
82.4725 182.315 83.5625 181.216 84.9225 181.216 cv
86.2725 181.216 87.3625 182.315 87.3625 183.666 cv
cp
0 0 0 .71875 cmyk
@
87.3625 183.666 mo
87.3625 185.016 86.2725 186.115 84.9225 186.115 cv
83.5625 186.115 82.4725 185.016 82.4725 183.666 cv
82.4725 182.315 83.5625 181.216 84.9225 181.216 cv
86.2725 181.216 87.3625 182.315 87.3625 183.666 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
83.4325 184.155 mo
(89.0)
[.848343 .848343 .424179 0 ]xsh
68.9825 177.435 mo
68.9825 178.785 67.8825 179.885 66.5325 179.885 cv
65.1825 179.885 64.0825 178.785 64.0825 177.435 cv
64.0825 176.085 65.1825 174.985 66.5325 174.985 cv
67.8825 174.985 68.9825 176.085 68.9825 177.435 cv
cp
0 0 0 .71875 cmyk
@
68.9825 177.435 mo
68.9825 178.785 67.8825 179.885 66.5325 179.885 cv
65.1825 179.885 64.0825 178.785 64.0825 177.435 cv
64.0825 176.085 65.1825 174.985 66.5325 174.985 cv
67.8825 174.985 68.9825 176.085 68.9825 177.435 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
65.0525 177.925 mo
(87.0)
[.848343 .848343 .424179 0 ]xsh
51.3425 156.735 mo
51.3425 158.085 50.2525 159.175 48.8925 159.175 cv
47.5425 159.175 46.4525 158.085 46.4525 156.735 cv
46.4525 155.375 47.5425 154.285 48.8925 154.285 cv
50.2525 154.285 51.3425 155.375 51.3425 156.735 cv
cp
0 0 0 .71875 cmyk
@
51.3425 156.735 mo
51.3425 158.085 50.2525 159.175 48.8925 159.175 cv
47.5425 159.175 46.4525 158.085 46.4525 156.735 cv
46.4525 155.375 47.5425 154.285 48.8925 154.285 cv
50.2525 154.285 51.3425 155.375 51.3425 156.735 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
47.4125 157.225 mo
(81.0)
[.848343 .848343 .424179 0 ]xsh
49.2925 177.916 mo
49.2925 179.275 48.2025 180.365 46.8525 180.365 cv
45.4925 180.365 44.4025 179.275 44.4025 177.916 cv
44.4025 176.565 45.4925 175.475 46.8525 175.475 cv
48.2025 175.475 49.2925 176.565 49.2925 177.916 cv
cp
0 0 0 .71875 cmyk
@
49.2925 177.916 mo
49.2925 179.275 48.2025 180.365 46.8525 180.365 cv
45.4925 180.365 44.4025 179.275 44.4025 177.916 cv
44.4025 176.565 45.4925 175.475 46.8525 175.475 cv
48.2025 175.475 49.2925 176.565 49.2925 177.916 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
45.3625 178.415 mo
(80.0)
[.848343 .848343 .424179 0 ]xsh
57.1825 146.516 mo
57.1825 147.865 56.0925 148.966 54.7425 148.966 cv
53.3925 148.966 52.2925 147.865 52.2925 146.516 cv
52.2925 145.166 53.3925 144.065 54.7425 144.065 cv
56.0925 144.065 57.1825 145.166 57.1825 146.516 cv
cp
0 0 0 .71875 cmyk
@
57.1825 146.516 mo
57.1825 147.865 56.0925 148.966 54.7425 148.966 cv
53.3925 148.966 52.2925 147.865 52.2925 146.516 cv
52.2925 145.166 53.3925 144.065 54.7425 144.065 cv
56.0925 144.065 57.1825 145.166 57.1825 146.516 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
53.2525 147.005 mo
(79.0)
[.848343 .848343 .424179 0 ]xsh
84.2225 154.945 mo
84.2225 156.295 83.1325 157.385 81.7825 157.385 cv
80.4225 157.385 79.3325 156.295 79.3325 154.945 cv
79.3325 153.585 80.4225 152.495 81.7825 152.495 cv
83.1325 152.495 84.2225 153.585 84.2225 154.945 cv
cp
0 0 0 .71875 cmyk
@
84.2225 154.945 mo
84.2225 156.295 83.1325 157.385 81.7825 157.385 cv
80.4225 157.385 79.3325 156.295 79.3325 154.945 cv
79.3325 153.585 80.4225 152.495 81.7825 152.495 cv
83.1325 152.495 84.2225 153.585 84.2225 154.945 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
80.2925 155.435 mo
(76.0)
[.848343 .848343 .424179 0 ]xsh
21.0526 161.745 mo
21.0526 163.105 19.9526 164.195 18.6026 164.195 cv
17.2526 164.195 16.1526 163.105 16.1526 161.745 cv
16.1526 160.396 17.2526 159.305 18.6026 159.305 cv
19.9526 159.305 21.0526 160.396 21.0526 161.745 cv
cp
0 0 0 .71875 cmyk
@
21.0526 161.745 mo
21.0526 163.105 19.9526 164.195 18.6026 164.195 cv
17.2526 164.195 16.1526 163.105 16.1526 161.745 cv
16.1526 160.396 17.2526 159.305 18.6026 159.305 cv
19.9526 159.305 21.0526 160.396 21.0526 161.745 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
16.6924 162.245 mo
(136.0)
[.848343 .848343 .848351 .424171 0 ]xsh
30.5924 158.885 mo
30.5924 160.235 29.4924 161.335 28.1424 161.335 cv
26.7924 161.335 25.6924 160.235 25.6924 158.885 cv
25.6924 157.535 26.7924 156.435 28.1424 156.435 cv
29.4924 156.435 30.5924 157.535 30.5924 158.885 cv
cp
0 0 0 .71875 cmyk
@
30.5924 158.885 mo
30.5924 160.235 29.4924 161.335 28.1424 161.335 cv
26.7924 161.335 25.6924 160.235 25.6924 158.885 cv
25.6924 157.535 26.7924 156.435 28.1424 156.435 cv
29.4924 156.435 30.5924 157.535 30.5924 158.885 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
26.2327 159.375 mo
(137.0)
[.848343 .848343 .848351 .424171 0 ]xsh
35.0725 167.835 mo
35.0725 169.185 33.9725 170.275 32.6225 170.275 cv
31.2725 170.275 30.1725 169.185 30.1725 167.835 cv
30.1725 166.475 31.2725 165.385 32.6225 165.385 cv
33.9725 165.385 35.0725 166.475 35.0725 167.835 cv
cp
0 0 0 .71875 cmyk
@
35.0725 167.835 mo
35.0725 169.185 33.9725 170.275 32.6225 170.275 cv
31.2725 170.275 30.1725 169.185 30.1725 167.835 cv
30.1725 166.475 31.2725 165.385 32.6225 165.385 cv
33.9725 165.385 35.0725 166.475 35.0725 167.835 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
30.7123 168.325 mo
(138.0)
[.848343 .848343 .848351 .424171 0 ]xsh
42.7025 175.525 mo
42.7025 176.875 41.6025 177.975 40.2525 177.975 cv
38.9025 177.975 37.8026 176.875 37.8026 175.525 cv
37.8026 174.175 38.9025 173.075 40.2525 173.075 cv
41.6025 173.075 42.7025 174.175 42.7025 175.525 cv
cp
0 0 0 .71875 cmyk
@
42.7025 175.525 mo
42.7025 176.875 41.6025 177.975 40.2525 177.975 cv
38.9025 177.975 37.8026 176.875 37.8026 175.525 cv
37.8026 174.175 38.9025 173.075 40.2525 173.075 cv
41.6025 173.075 42.7025 174.175 42.7025 175.525 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
38.3424 176.015 mo
(139.0)
[.848343 .848343 .848351 .424171 0 ]xsh
39.4825 155.725 mo
39.4825 157.075 38.3827 158.175 37.0327 158.175 cv
35.6827 158.175 34.5827 157.075 34.5827 155.725 cv
34.5827 154.375 35.6827 153.275 37.0327 153.275 cv
38.3827 153.275 39.4825 154.375 39.4825 155.725 cv
cp
0 0 0 .71875 cmyk
@
39.4825 155.725 mo
39.4825 157.075 38.3827 158.175 37.0327 158.175 cv
35.6827 158.175 34.5827 157.075 34.5827 155.725 cv
34.5827 154.375 35.6827 153.275 37.0327 153.275 cv
38.3827 153.275 39.4825 154.375 39.4825 155.725 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
35.1225 156.215 mo
(133.0)
[.848343 .848343 .848351 .424171 0 ]xsh
42.4525 145.045 mo
42.4525 146.396 41.3525 147.495 40.0025 147.495 cv
38.6525 147.495 37.5526 146.396 37.5526 145.045 cv
37.5526 143.695 38.6525 142.595 40.0025 142.595 cv
41.3525 142.595 42.4525 143.695 42.4525 145.045 cv
cp
0 0 0 .71875 cmyk
@
42.4525 145.045 mo
42.4525 146.396 41.3525 147.495 40.0025 147.495 cv
38.6525 147.495 37.5526 146.396 37.5526 145.045 cv
37.5526 143.695 38.6525 142.595 40.0025 142.595 cv
41.3525 142.595 42.4525 143.695 42.4525 145.045 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
38.0924 145.535 mo
(134.0)
[.848343 .848343 .848351 .424171 0 ]xsh
20.8623 166.125 mo
20.8623 167.475 19.7623 168.575 18.4123 168.575 cv
17.0623 168.575 15.9623 167.475 15.9623 166.125 cv
15.9623 164.775 17.0623 163.675 18.4123 163.675 cv
19.7623 163.675 20.8623 164.775 20.8623 166.125 cv
cp
0 0 0 .71875 cmyk
@
20.8623 166.125 mo
20.8623 167.475 19.7623 168.575 18.4123 168.575 cv
17.0623 168.575 15.9623 167.475 15.9623 166.125 cv
15.9623 164.775 17.0623 163.675 18.4123 163.675 cv
19.7623 163.675 20.8623 164.775 20.8623 166.125 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
16.5026 166.615 mo
(135.0)
[.848343 .848343 .848351 .424171 0 ]xsh
24.6225 139.785 mo
24.6225 141.135 23.5327 142.235 22.1827 142.235 cv
20.8225 142.235 19.7327 141.135 19.7327 139.785 cv
19.7327 138.435 20.8225 137.345 22.1827 137.345 cv
23.5327 137.345 24.6225 138.435 24.6225 139.785 cv
cp
0 0 0 .71875 cmyk
@
24.6225 139.785 mo
24.6225 141.135 23.5327 142.235 22.1827 142.235 cv
20.8225 142.235 19.7327 141.135 19.7327 139.785 cv
19.7327 138.435 20.8225 137.345 22.1827 137.345 cv
23.5327 137.345 24.6225 138.435 24.6225 139.785 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
20.2725 140.285 mo
(132.0)
[.848343 .848343 .848351 .424171 0 ]xsh
32.9924 130.985 mo
32.9924 132.335 31.8924 133.425 30.5424 133.425 cv
29.1924 133.425 28.0924 132.335 28.0924 130.985 cv
28.0924 129.625 29.1924 128.535 30.5424 128.535 cv
31.8924 128.535 32.9924 129.625 32.9924 130.985 cv
cp
0 0 0 .71875 cmyk
@
32.9924 130.985 mo
32.9924 132.335 31.8924 133.425 30.5424 133.425 cv
29.1924 133.425 28.0924 132.335 28.0924 130.985 cv
28.0924 129.625 29.1924 128.535 30.5424 128.535 cv
31.8924 128.535 32.9924 129.625 32.9924 130.985 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
28.6327 131.475 mo
(131.0)
[.848343 .848343 .848351 .424171 0 ]xsh
32.0424 120.575 mo
32.0424 121.925 30.9526 123.025 29.6026 123.025 cv
28.2424 123.025 27.1526 121.925 27.1526 120.575 cv
27.1526 119.225 28.2424 118.125 29.6026 118.125 cv
30.9526 118.125 32.0424 119.225 32.0424 120.575 cv
cp
0 0 0 .71875 cmyk
@
32.0424 120.575 mo
32.0424 121.925 30.9526 123.025 29.6026 123.025 cv
28.2424 123.025 27.1526 121.925 27.1526 120.575 cv
27.1526 119.225 28.2424 118.125 29.6026 118.125 cv
30.9526 118.125 32.0424 119.225 32.0424 120.575 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
27.6924 121.065 mo
(130.0)
[.848343 .848343 .848351 .424171 0 ]xsh
114.862 180.716 mo
114.862 182.065 113.762 183.166 112.412 183.166 cv
111.062 183.166 109.962 182.065 109.962 180.716 cv
109.962 179.365 111.062 178.266 112.412 178.266 cv
113.762 178.266 114.862 179.365 114.862 180.716 cv
cp
0 0 0 .71875 cmyk
@
114.862 180.716 mo
114.862 182.065 113.762 183.166 112.412 183.166 cv
111.062 183.166 109.962 182.065 109.962 180.716 cv
109.962 179.365 111.062 178.266 112.412 178.266 cv
113.762 178.266 114.862 179.365 114.862 180.716 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
110.502 181.205 mo
(146.0)
[.848343 .848343 .848343 .424179 0 ]xsh
110.632 172.406 mo
110.632 173.766 109.532 174.855 108.182 174.855 cv
106.832 174.855 105.732 173.766 105.732 172.406 cv
105.732 171.055 106.832 169.966 108.182 169.966 cv
109.532 169.966 110.632 171.055 110.632 172.406 cv
cp
0 0 0 .71875 cmyk
@
110.632 172.406 mo
110.632 173.766 109.532 174.855 108.182 174.855 cv
106.832 174.855 105.732 173.766 105.732 172.406 cv
105.732 171.055 106.832 169.966 108.182 169.966 cv
109.532 169.966 110.632 171.055 110.632 172.406 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
106.692 172.905 mo
(90.0)
[.848343 .848343 .424179 0 ]xsh
111.642 189.505 mo
111.642 190.855 110.542 191.956 109.192 191.956 cv
107.842 191.956 106.742 190.855 106.742 189.505 cv
106.742 188.156 107.842 187.055 109.192 187.055 cv
110.542 187.055 111.642 188.156 111.642 189.505 cv
cp
0 0 0 .71875 cmyk
@
111.642 189.505 mo
111.642 190.855 110.542 191.956 109.192 191.956 cv
107.842 191.956 106.742 190.855 106.742 189.505 cv
106.742 188.156 107.842 187.055 109.192 187.055 cv
110.542 187.055 111.642 188.156 111.642 189.505 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
107.282 189.995 mo
(147.0)
[.848343 .848343 .848343 .424179 0 ]xsh
136.852 168.445 mo
136.852 169.795 135.762 170.896 134.412 170.896 cv
133.052 170.896 131.962 169.795 131.962 168.445 cv
131.962 167.095 133.052 165.995 134.412 165.995 cv
135.762 165.995 136.852 167.095 136.852 168.445 cv
cp
0 0 0 .71875 cmyk
@
136.852 168.445 mo
136.852 169.795 135.762 170.896 134.412 170.896 cv
133.052 170.896 131.962 169.795 131.962 168.445 cv
131.962 167.095 133.052 165.995 134.412 165.995 cv
135.762 165.995 136.852 167.095 136.852 168.445 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
132.922 168.935 mo
(91.0)
[.848343 .848343 .424179 0 ]xsh
122.162 194.906 mo
122.162 196.255 121.062 197.355 119.712 197.355 cv
118.362 197.355 117.262 196.255 117.262 194.906 cv
117.262 193.555 118.362 192.456 119.712 192.456 cv
121.062 192.456 122.162 193.555 122.162 194.906 cv
cp
0 0 0 .71875 cmyk
@
122.162 194.906 mo
122.162 196.255 121.062 197.355 119.712 197.355 cv
118.362 197.355 117.262 196.255 117.262 194.906 cv
117.262 193.555 118.362 192.456 119.712 192.456 cv
121.062 192.456 122.162 193.555 122.162 194.906 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
117.802 195.395 mo
(149.0)
[.848343 .848343 .848343 .424179 0 ]xsh
127.122 176.885 mo
127.122 178.245 126.032 179.335 124.682 179.335 cv
123.322 179.335 122.232 178.245 122.232 176.885 cv
122.232 175.535 123.322 174.445 124.682 174.445 cv
126.032 174.445 127.122 175.535 127.122 176.885 cv
cp
0 0 0 .71875 cmyk
@
127.122 176.885 mo
127.122 178.245 126.032 179.335 124.682 179.335 cv
123.322 179.335 122.232 178.245 122.232 176.885 cv
122.232 175.535 123.322 174.445 124.682 174.445 cv
126.032 174.445 127.122 175.535 127.122 176.885 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
122.772 177.385 mo
(145.0)
[.848343 .848343 .848343 .424179 0 ]xsh
113.482 200.435 mo
113.482 201.785 112.382 202.885 111.032 202.885 cv
109.682 202.885 108.592 201.785 108.592 200.435 cv
108.592 199.085 109.682 197.985 111.032 197.985 cv
112.382 197.985 113.482 199.085 113.482 200.435 cv
cp
0 0 0 .71875 cmyk
@
113.482 200.435 mo
113.482 201.785 112.382 202.885 111.032 202.885 cv
109.682 202.885 108.592 201.785 108.592 200.435 cv
108.592 199.085 109.682 197.985 111.032 197.985 cv
112.382 197.985 113.482 199.085 113.482 200.435 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
109.552 200.925 mo
(88.0)
[.848343 .848343 .424179 0 ]xsh
98.4025 171.396 mo
98.4025 172.745 97.3025 173.845 95.9525 173.845 cv
94.6025 173.845 93.5025 172.745 93.5025 171.396 cv
93.5025 170.045 94.6025 168.945 95.9525 168.945 cv
97.3025 168.945 98.4025 170.045 98.4025 171.396 cv
cp
0 0 0 .71875 cmyk
@
98.4025 171.396 mo
98.4025 172.745 97.3025 173.845 95.9525 173.845 cv
94.6025 173.845 93.5025 172.745 93.5025 171.396 cv
93.5025 170.045 94.6025 168.945 95.9525 168.945 cv
97.3025 168.945 98.4025 170.045 98.4025 171.396 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
94.4625 171.885 mo
(77.0)
[.848343 .848343 .424179 0 ]xsh
64.5025 103.505 mo
64.5025 104.855 63.4025 105.956 62.0525 105.956 cv
60.7025 105.956 59.6025 104.855 59.6025 103.505 cv
59.6025 102.156 60.7025 101.055 62.0525 101.055 cv
63.4025 101.055 64.5025 102.156 64.5025 103.505 cv
cp
0 0 0 .71875 cmyk
@
64.5025 103.505 mo
64.5025 104.855 63.4025 105.956 62.0525 105.956 cv
60.7025 105.956 59.6025 104.855 59.6025 103.505 cv
59.6025 102.156 60.7025 101.055 62.0525 101.055 cv
63.4025 101.055 64.5025 102.156 64.5025 103.505 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
60.1425 103.995 mo
(127.0)
[.848343 .848343 .848351 .424171 0 ]xsh
51.4725 113.985 mo
51.4725 115.335 50.3825 116.435 49.0325 116.435 cv
47.6825 116.435 46.5825 115.335 46.5825 113.985 cv
46.5825 112.635 47.6825 111.545 49.0325 111.545 cv
50.3825 111.545 51.4725 112.635 51.4725 113.985 cv
cp
0 0 0 .71875 cmyk
@
51.4725 113.985 mo
51.4725 115.335 50.3825 116.435 49.0325 116.435 cv
47.6825 116.435 46.5825 115.335 46.5825 113.985 cv
46.5825 112.635 47.6825 111.545 49.0325 111.545 cv
50.3825 111.545 51.4725 112.635 51.4725 113.985 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
47.1225 114.485 mo
(129.0)
[.848343 .848343 .848351 .424171 0 ]xsh
40.0125 101.456 mo
40.0125 102.805 38.9225 103.906 37.5725 103.906 cv
36.2225 103.906 35.1225 102.805 35.1225 101.456 cv
35.1225 100.105 36.2225 99.0055 37.5725 99.0055 cv
38.9225 99.0055 40.0125 100.105 40.0125 101.456 cv
cp
0 0 0 .71875 cmyk
@
40.0125 101.456 mo
40.0125 102.805 38.9225 103.906 37.5725 103.906 cv
36.2225 103.906 35.1225 102.805 35.1225 101.456 cv
35.1225 100.105 36.2225 99.0055 37.5725 99.0055 cv
38.9225 99.0055 40.0125 100.105 40.0125 101.456 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
35.6623 101.945 mo
(128.0)
[.848343 .848343 .848351 .424835 0 ]xsh
110.622 100.065 mo
110.622 101.416 109.522 102.516 108.172 102.516 cv
106.822 102.516 105.722 101.416 105.722 100.065 cv
105.722 98.7155 106.822 97.6155 108.172 97.6155 cv
109.522 97.6155 110.622 98.7155 110.622 100.065 cv
cp
0 0 0 .71875 cmyk
@
110.622 100.065 mo
110.622 101.416 109.522 102.516 108.172 102.516 cv
106.822 102.516 105.722 101.416 105.722 100.065 cv
105.722 98.7155 106.822 97.6155 108.172 97.6155 cv
109.522 97.6155 110.622 98.7155 110.622 100.065 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
106.682 100.555 mo
(71.0)
[.848343 .848343 .424179 0 ]xsh
126.622 105.065 mo
126.622 106.416 125.532 107.516 124.172 107.516 cv
122.822 107.516 121.732 106.416 121.732 105.065 cv
121.732 103.716 122.822 102.615 124.172 102.615 cv
125.532 102.615 126.622 103.716 126.622 105.065 cv
cp
0 0 0 .71875 cmyk
@
126.622 105.065 mo
126.622 106.416 125.532 107.516 124.172 107.516 cv
122.822 107.516 121.732 106.416 121.732 105.065 cv
121.732 103.716 122.822 102.615 124.172 102.615 cv
125.532 102.615 126.622 103.716 126.622 105.065 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
122.272 105.555 mo
(117.0)
[.848343 .848343 .848343 .424179 0 ]xsh
111.072 106.365 mo
111.072 107.716 109.972 108.805 108.622 108.805 cv
107.272 108.805 106.172 107.716 106.172 106.365 cv
106.172 105.005 107.272 103.916 108.622 103.916 cv
109.972 103.916 111.072 105.005 111.072 106.365 cv
cp
0 0 0 .71875 cmyk
@
111.072 106.365 mo
111.072 107.716 109.972 108.805 108.622 108.805 cv
107.272 108.805 106.172 107.716 106.172 106.365 cv
106.172 105.005 107.272 103.916 108.622 103.916 cv
109.972 103.916 111.072 105.005 111.072 106.365 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
106.712 106.855 mo
(118.0)
[.848343 .848343 .848343 .424835 0 ]xsh
113.522 102.016 mo
113.522 103.375 112.432 104.466 111.072 104.466 cv
109.722 104.466 108.632 103.375 108.632 102.016 cv
108.632 100.666 109.722 99.5754 111.072 99.5754 cv
112.432 99.5754 113.522 100.666 113.522 102.016 cv
cp
0 0 0 .71875 cmyk
@
113.522 102.016 mo
113.522 103.375 112.432 104.466 111.072 104.466 cv
109.722 104.466 108.632 103.375 108.632 102.016 cv
108.632 100.666 109.722 99.5754 111.072 99.5754 cv
112.432 99.5754 113.522 100.666 113.522 102.016 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
109.592 102.515 mo
(55.0)
[.848343 .848343 .424179 0 ]xsh
134.772 119.875 mo
134.772 121.225 133.682 122.325 132.322 122.325 cv
130.972 122.325 129.882 121.225 129.882 119.875 cv
129.882 118.525 130.972 117.425 132.322 117.425 cv
133.682 117.425 134.772 118.525 134.772 119.875 cv
cp
0 0 0 .71875 cmyk
@
134.772 119.875 mo
134.772 121.225 133.682 122.325 132.322 122.325 cv
130.972 122.325 129.882 121.225 129.882 119.875 cv
129.882 118.525 130.972 117.425 132.322 117.425 cv
133.682 117.425 134.772 118.525 134.772 119.875 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
130.842 120.365 mo
(34.0)
[.848343 .848343 .424179 0 ]xsh
251.082 245.825 mo
251.082 247.175 249.982 248.275 248.632 248.275 cv
247.282 248.275 246.192 247.175 246.192 245.825 cv
246.192 244.475 247.282 243.375 248.632 243.375 cv
249.982 243.375 251.082 244.475 251.082 245.825 cv
cp
0 0 0 .71875 cmyk
@
251.082 245.825 mo
251.082 247.175 249.982 248.275 248.632 248.275 cv
247.282 248.275 246.192 247.175 246.192 245.825 cv
246.192 244.475 247.282 243.375 248.632 243.375 cv
249.982 243.375 251.082 244.475 251.082 245.825 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
246.722 246.315 mo
(187.0)
[.848358 .848328 .848358 .424164 0 ]xsh
243.932 316.655 mo
243.932 318.005 242.832 319.105 241.482 319.105 cv
240.132 319.105 239.032 318.005 239.032 316.655 cv
239.032 315.305 240.132 314.205 241.482 314.205 cv
242.832 314.205 243.932 315.305 243.932 316.655 cv
cp
0 0 0 .71875 cmyk
@
243.932 316.655 mo
243.932 318.005 242.832 319.105 241.482 319.105 cv
240.132 319.105 239.032 318.005 239.032 316.655 cv
239.032 315.305 240.132 314.205 241.482 314.205 cv
242.832 314.205 243.932 315.305 243.932 316.655 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
239.572 317.145 mo
(190.0)
[.848358 .848328 .848358 .424164 0 ]xsh
246.192 264.245 mo
246.192 265.595 245.092 266.685 243.742 266.685 cv
242.392 266.685 241.292 265.595 241.292 264.245 cv
241.292 262.885 242.392 261.795 243.742 261.795 cv
245.092 261.795 246.192 262.885 246.192 264.245 cv
cp
0 0 0 .71875 cmyk
@
246.192 264.245 mo
246.192 265.595 245.092 266.685 243.742 266.685 cv
242.392 266.685 241.292 265.595 241.292 264.245 cv
241.292 262.885 242.392 261.795 243.742 261.795 cv
245.092 261.795 246.192 262.885 246.192 264.245 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
241.832 264.735 mo
(163.0)
[.848358 .848328 .848358 .424164 0 ]xsh
246.142 302.605 mo
246.142 303.955 245.042 305.055 243.692 305.055 cv
242.342 305.055 241.242 303.955 241.242 302.605 cv
241.242 301.255 242.342 300.155 243.692 300.155 cv
245.042 300.155 246.142 301.255 246.142 302.605 cv
cp
0 0 0 .71875 cmyk
@
246.142 302.605 mo
246.142 303.955 245.042 305.055 243.692 305.055 cv
242.342 305.055 241.242 303.955 241.242 302.605 cv
241.242 301.255 242.342 300.155 243.692 300.155 cv
245.042 300.155 246.142 301.255 246.142 302.605 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
241.782 303.095 mo
(189.0)
[.848358 .848328 .848358 .424164 0 ]xsh
242.672 243.285 mo
242.672 244.635 241.572 245.725 240.222 245.725 cv
238.872 245.725 237.772 244.635 237.772 243.285 cv
237.772 241.935 238.872 240.835 240.222 240.835 cv
241.572 240.835 242.672 241.935 242.672 243.285 cv
cp
0 0 0 .71875 cmyk
@
242.672 243.285 mo
242.672 244.635 241.572 245.725 240.222 245.725 cv
238.872 245.725 237.772 244.635 237.772 243.285 cv
237.772 241.935 238.872 240.835 240.222 240.835 cv
241.572 240.835 242.672 241.935 242.672 243.285 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
238.312 243.775 mo
(161.0)
[.848358 .848328 .848358 .424835 0 ]xsh
238.122 218.055 mo
238.122 219.406 237.032 220.495 235.672 220.495 cv
234.322 220.495 233.232 219.406 233.232 218.055 cv
233.232 216.695 234.322 215.605 235.672 215.605 cv
237.032 215.605 238.122 216.695 238.122 218.055 cv
cp
0 0 0 .71875 cmyk
@
238.122 218.055 mo
238.122 219.406 237.032 220.495 235.672 220.495 cv
234.322 220.495 233.232 219.406 233.232 218.055 cv
233.232 216.695 234.322 215.605 235.672 215.605 cv
237.032 215.605 238.122 216.695 238.122 218.055 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
233.762 218.545 mo
(160.0)
[.848358 .848328 .848358 .424835 0 ]xsh
228.732 246.935 mo
228.732 248.285 227.632 249.385 226.282 249.385 cv
224.932 249.385 223.832 248.285 223.832 246.935 cv
223.832 245.585 224.932 244.485 226.282 244.485 cv
227.632 244.485 228.732 245.585 228.732 246.935 cv
cp
0 0 0 .71875 cmyk
@
228.732 246.935 mo
228.732 248.285 227.632 249.385 226.282 249.385 cv
224.932 249.385 223.832 248.285 223.832 246.935 cv
223.832 245.585 224.932 244.485 226.282 244.485 cv
227.632 244.485 228.732 245.585 228.732 246.935 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
225.222 247.425 mo
(8.0)
[.848358 .424164 0 ]xsh
213.562 331.995 mo
213.562 333.345 212.462 334.445 211.112 334.445 cv
209.762 334.445 208.662 333.345 208.662 331.995 cv
208.662 330.645 209.762 329.545 211.112 329.545 cv
212.462 329.545 213.562 330.645 213.562 331.995 cv
cp
0 0 0 .71875 cmyk
@
213.562 331.995 mo
213.562 333.345 212.462 334.445 211.112 334.445 cv
209.762 334.445 208.662 333.345 208.662 331.995 cv
208.662 330.645 209.762 329.545 211.112 329.545 cv
212.462 329.545 213.562 330.645 213.562 331.995 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
209.202 332.485 mo
(194.0)
[.848358 .848328 .848358 .424164 0 ]xsh
199.972 313.985 mo
199.972 315.345 198.872 316.435 197.522 316.435 cv
196.172 316.435 195.072 315.345 195.072 313.985 cv
195.072 312.635 196.172 311.545 197.522 311.545 cv
198.872 311.545 199.972 312.635 199.972 313.985 cv
cp
0 0 0 .71875 cmyk
@
199.972 313.985 mo
199.972 315.345 198.872 316.435 197.522 316.435 cv
196.172 316.435 195.072 315.345 195.072 313.985 cv
195.072 312.635 196.172 311.545 197.522 311.545 cv
198.872 311.545 199.972 312.635 199.972 313.985 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
195.612 314.485 mo
(197.0)
[.848358 .848328 .848358 .424835 0 ]xsh
229.402 317.345 mo
229.402 318.695 228.302 319.795 226.952 319.795 cv
225.602 319.795 224.502 318.695 224.502 317.345 cv
224.502 315.995 225.602 314.895 226.952 314.895 cv
228.302 314.895 229.402 315.995 229.402 317.345 cv
cp
0 0 0 .71875 cmyk
@
229.402 317.345 mo
229.402 318.695 228.302 319.795 226.952 319.795 cv
225.602 319.795 224.502 318.695 224.502 317.345 cv
224.502 315.995 225.602 314.895 226.952 314.895 cv
228.302 314.895 229.402 315.995 229.402 317.345 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
225.042 317.835 mo
(193.0)
[.848358 .848328 .848358 .424164 0 ]xsh
227.882 328.695 mo
227.882 330.045 226.782 331.145 225.432 331.145 cv
224.082 331.145 222.982 330.045 222.982 328.695 cv
222.982 327.345 224.082 326.245 225.432 326.245 cv
226.782 326.245 227.882 327.345 227.882 328.695 cv
cp
0 0 0 .71875 cmyk
@
227.882 328.695 mo
227.882 330.045 226.782 331.145 225.432 331.145 cv
224.082 331.145 222.982 330.045 222.982 328.695 cv
222.982 327.345 224.082 326.245 225.432 326.245 cv
226.782 326.245 227.882 327.345 227.882 328.695 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
223.522 329.185 mo
(192.0)
[.848358 .848328 .848358 .424164 0 ]xsh
196.492 324.985 mo
196.492 326.335 195.392 327.435 194.042 327.435 cv
192.692 327.435 191.602 326.335 191.602 324.985 cv
191.602 323.635 192.692 322.535 194.042 322.535 cv
195.392 322.535 196.492 323.635 196.492 324.985 cv
cp
0 0 0 .71875 cmyk
@
196.492 324.985 mo
196.492 326.335 195.392 327.435 194.042 327.435 cv
192.692 327.435 191.602 326.335 191.602 324.985 cv
191.602 323.635 192.692 322.535 194.042 322.535 cv
195.392 322.535 196.492 323.635 196.492 324.985 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
192.132 325.475 mo
(196.0)
[.848343 .848343 .848358 .424164 0 ]xsh
233.812 332.875 mo
233.812 334.225 232.722 335.325 231.372 335.325 cv
230.012 335.325 228.922 334.225 228.922 332.875 cv
228.922 331.525 230.012 330.425 231.372 330.425 cv
232.722 330.425 233.812 331.525 233.812 332.875 cv
cp
0 0 0 .71875 cmyk
@
233.812 332.875 mo
233.812 334.225 232.722 335.325 231.372 335.325 cv
230.012 335.325 228.922 334.225 228.922 332.875 cv
228.922 331.525 230.012 330.425 231.372 330.425 cv
232.722 330.425 233.812 331.525 233.812 332.875 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
229.462 333.365 mo
(191.0)
[.848358 .848328 .848358 .424835 0 ]xsh
181.662 158.535 mo
181.662 159.885 180.562 160.985 179.212 160.985 cv
177.862 160.985 176.762 159.885 176.762 158.535 cv
176.762 157.185 177.862 156.085 179.212 156.085 cv
180.562 156.085 181.662 157.185 181.662 158.535 cv
cp
0 0 0 .71875 cmyk
@
181.662 158.535 mo
181.662 159.885 180.562 160.985 179.212 160.985 cv
177.862 160.985 176.762 159.885 176.762 158.535 cv
176.762 157.185 177.862 156.085 179.212 156.085 cv
180.562 156.085 181.662 157.185 181.662 158.535 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
177.302 159.025 mo
(111.0)
[.848343 .848343 .848343 .424179 0 ]xsh
170.812 157.865 mo
170.812 159.225 169.712 160.315 168.362 160.315 cv
167.012 160.315 165.912 159.225 165.912 157.865 cv
165.912 156.516 167.012 155.425 168.362 155.425 cv
169.712 155.425 170.812 156.516 170.812 157.865 cv
cp
0 0 0 .71875 cmyk
@
170.812 157.865 mo
170.812 159.225 169.712 160.315 168.362 160.315 cv
167.012 160.315 165.912 159.225 165.912 157.865 cv
165.912 156.516 167.012 155.425 168.362 155.425 cv
169.712 155.425 170.812 156.516 170.812 157.865 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
166.452 158.365 mo
(108.0)
[.848343 .848343 .848343 .424179 0 ]xsh
175.092 184.755 mo
175.092 186.105 173.992 187.206 172.642 187.206 cv
171.292 187.206 170.192 186.105 170.192 184.755 cv
170.192 183.406 171.292 182.305 172.642 182.305 cv
173.992 182.305 175.092 183.406 175.092 184.755 cv
cp
0 0 0 .71875 cmyk
@
175.092 184.755 mo
175.092 186.105 173.992 187.206 172.642 187.206 cv
171.292 187.206 170.192 186.105 170.192 184.755 cv
170.192 183.406 171.292 182.305 172.642 182.305 cv
173.992 182.305 175.092 183.406 175.092 184.755 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
170.732 185.245 mo
(151.0)
[.848343 .848343 .848343 .424179 0 ]xsh
162.612 162.175 mo
162.612 163.525 161.512 164.625 160.162 164.625 cv
158.812 164.625 157.712 163.525 157.712 162.175 cv
157.712 160.825 158.812 159.725 160.162 159.725 cv
161.512 159.725 162.612 160.825 162.612 162.175 cv
cp
0 0 0 .71875 cmyk
@
162.612 162.175 mo
162.612 163.525 161.512 164.625 160.162 164.625 cv
158.812 164.625 157.712 163.525 157.712 162.175 cv
157.712 160.825 158.812 159.725 160.162 159.725 cv
161.512 159.725 162.612 160.825 162.612 162.175 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
158.252 162.665 mo
(112.0)
[.848343 .848343 .848343 .424179 0 ]xsh
180.522 185.456 mo
180.522 186.805 179.432 187.906 178.082 187.906 cv
176.722 187.906 175.632 186.805 175.632 185.456 cv
175.632 184.105 176.722 183.005 178.082 183.005 cv
179.432 183.005 180.522 184.105 180.522 185.456 cv
cp
0 0 0 .71875 cmyk
@
180.522 185.456 mo
180.522 186.805 179.432 187.906 178.082 187.906 cv
176.722 187.906 175.632 186.805 175.632 185.456 cv
175.632 184.105 176.722 183.005 178.082 183.005 cv
179.432 183.005 180.522 184.105 180.522 185.456 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
176.172 185.945 mo
(109.0)
[.848343 .848343 .848343 .424179 0 ]xsh
174.342 152.825 mo
174.342 154.175 173.252 155.266 171.892 155.266 cv
170.542 155.266 169.452 154.175 169.452 152.825 cv
169.452 151.466 170.542 150.375 171.892 150.375 cv
173.252 150.375 174.342 151.466 174.342 152.825 cv
cp
0 0 0 .71875 cmyk
@
174.342 152.825 mo
174.342 154.175 173.252 155.266 171.892 155.266 cv
170.542 155.266 169.452 154.175 169.452 152.825 cv
169.452 151.466 170.542 150.375 171.892 150.375 cv
173.252 150.375 174.342 151.466 174.342 152.825 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
169.982 153.315 mo
(107.0)
[.848343 .848343 .848343 .424179 0 ]xsh
183.132 164.575 mo
183.132 165.925 182.042 167.025 180.692 167.025 cv
179.332 167.025 178.242 165.925 178.242 164.575 cv
178.242 163.225 179.332 162.125 180.692 162.125 cv
182.042 162.125 183.132 163.225 183.132 164.575 cv
cp
0 0 0 .71875 cmyk
@
183.132 164.575 mo
183.132 165.925 182.042 167.025 180.692 167.025 cv
179.332 167.025 178.242 165.925 178.242 164.575 cv
178.242 163.225 179.332 162.125 180.692 162.125 cv
182.042 162.125 183.132 163.225 183.132 164.575 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
178.782 165.065 mo
(110.0)
[.848343 .848343 .848343 .424179 0 ]xsh
154.582 180.216 mo
154.582 181.565 153.492 182.656 152.132 182.656 cv
150.782 182.656 149.692 181.565 149.692 180.216 cv
149.692 178.855 150.782 177.766 152.132 177.766 cv
153.492 177.766 154.582 178.855 154.582 180.216 cv
cp
0 0 0 .71875 cmyk
@
154.582 180.216 mo
154.582 181.565 153.492 182.656 152.132 182.656 cv
150.782 182.656 149.692 181.565 149.692 180.216 cv
149.692 178.855 150.782 177.766 152.132 177.766 cv
153.492 177.766 154.582 178.855 154.582 180.216 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
150.222 180.705 mo
(148.0)
[.848343 .848343 .848343 .424179 0 ]xsh
144.902 223.646 mo
144.902 224.995 143.802 226.095 142.452 226.095 cv
141.102 226.095 140.002 224.995 140.002 223.646 cv
140.002 222.295 141.102 221.195 142.452 221.195 cv
143.802 221.195 144.902 222.295 144.902 223.646 cv
cp
0 0 0 .71875 cmyk
@
144.902 223.646 mo
144.902 224.995 143.802 226.095 142.452 226.095 cv
141.102 226.095 140.002 224.995 140.002 223.646 cv
140.002 222.295 141.102 221.195 142.452 221.195 cv
143.802 221.195 144.902 222.295 144.902 223.646 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
140.542 224.135 mo
(152.0)
[.848343 .848343 .848343 .424179 0 ]xsh
190.462 240.315 mo
190.462 241.666 189.362 242.766 188.012 242.766 cv
186.662 242.766 185.562 241.666 185.562 240.315 cv
185.562 238.966 186.662 237.865 188.012 237.865 cv
189.362 237.865 190.462 238.966 190.462 240.315 cv
cp
0 0 0 .71875 cmyk
@
190.462 240.315 mo
190.462 241.666 189.362 242.766 188.012 242.766 cv
186.662 242.766 185.562 241.666 185.562 240.315 cv
185.562 238.966 186.662 237.865 188.012 237.865 cv
189.362 237.865 190.462 238.966 190.462 240.315 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
186.952 240.805 mo
(7.0)
[.848343 .424179 0 ]xsh
184.142 263.305 mo
184.142 264.656 183.052 265.755 181.702 265.755 cv
180.352 265.755 179.252 264.656 179.252 263.305 cv
179.252 261.956 180.352 260.855 181.702 260.855 cv
183.052 260.855 184.142 261.956 184.142 263.305 cv
cp
0 0 0 .71875 cmyk
@
184.142 263.305 mo
184.142 264.656 183.052 265.755 181.702 265.755 cv
180.352 265.755 179.252 264.656 179.252 263.305 cv
179.252 261.956 180.352 260.855 181.702 260.855 cv
183.052 260.855 184.142 261.956 184.142 263.305 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
180.642 263.795 mo
(6.0)
[.848343 .424179 0 ]xsh
170.002 216.416 mo
170.002 217.766 168.902 218.865 167.552 218.865 cv
166.202 218.865 165.102 217.766 165.102 216.416 cv
165.102 215.065 166.202 213.966 167.552 213.966 cv
168.902 213.966 170.002 215.065 170.002 216.416 cv
cp
0 0 0 .71875 cmyk
@
170.002 216.416 mo
170.002 217.766 168.902 218.865 167.552 218.865 cv
166.202 218.865 165.102 217.766 165.102 216.416 cv
165.102 215.065 166.202 213.966 167.552 213.966 cv
168.902 213.966 170.002 215.065 170.002 216.416 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
165.642 216.905 mo
(153.0)
[.848343 .848343 .848343 .424179 0 ]xsh
165.252 278.495 mo
165.252 279.855 164.152 280.945 162.802 280.945 cv
161.452 280.945 160.362 279.855 160.362 278.495 cv
160.362 277.146 161.452 276.055 162.802 276.055 cv
164.152 276.055 165.252 277.146 165.252 278.495 cv
cp
0 0 0 .71875 cmyk
@
165.252 278.495 mo
165.252 279.855 164.152 280.945 162.802 280.945 cv
161.452 280.945 160.362 279.855 160.362 278.495 cv
160.362 277.146 161.452 276.055 162.802 276.055 cv
164.152 276.055 165.252 277.146 165.252 278.495 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
161.742 278.995 mo
(4.0)
[.848343 .424179 0 ]xsh
141.992 205.095 mo
141.992 206.456 140.892 207.545 139.542 207.545 cv
138.192 207.545 137.092 206.456 137.092 205.095 cv
137.092 203.745 138.192 202.656 139.542 202.656 cv
140.892 202.656 141.992 203.745 141.992 205.095 cv
cp
0 0 0 .71875 cmyk
@
141.992 205.095 mo
141.992 206.456 140.892 207.545 139.542 207.545 cv
138.192 207.545 137.092 206.456 137.092 205.095 cv
137.092 203.745 138.192 202.656 139.542 202.656 cv
140.892 202.656 141.992 203.745 141.992 205.095 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
137.632 205.595 mo
(150.0)
[.848343 .848343 .848343 .424179 0 ]xsh
171.872 263.396 mo
171.872 264.745 170.772 265.845 169.422 265.845 cv
168.072 265.845 166.972 264.745 166.972 263.396 cv
166.972 262.045 168.072 260.945 169.422 260.945 cv
170.772 260.945 171.872 262.045 171.872 263.396 cv
cp
0 0 0 .71875 cmyk
@
171.872 263.396 mo
171.872 264.745 170.772 265.845 169.422 265.845 cv
168.072 265.845 166.972 264.745 166.972 263.396 cv
166.972 262.045 168.072 260.945 169.422 260.945 cv
170.772 260.945 171.872 262.045 171.872 263.396 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
168.362 263.885 mo
(5.0)
[.848343 .424179 0 ]xsh
150.782 260.755 mo
150.782 262.105 149.682 263.206 148.332 263.206 cv
146.982 263.206 145.882 262.105 145.882 260.755 cv
145.882 259.406 146.982 258.305 148.332 258.305 cv
149.682 258.305 150.782 259.406 150.782 260.755 cv
cp
0 0 0 .71875 cmyk
@
150.782 260.755 mo
150.782 262.105 149.682 263.206 148.332 263.206 cv
146.982 263.206 145.882 262.105 145.882 260.755 cv
145.882 259.406 146.982 258.305 148.332 258.305 cv
149.682 258.305 150.782 259.406 150.782 260.755 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
147.272 261.245 mo
(3.0)
[.848343 .424179 0 ]xsh
188.422 211.605 mo
188.422 212.956 187.322 214.055 185.972 214.055 cv
184.622 214.055 183.522 212.956 183.522 211.605 cv
183.522 210.255 184.622 209.156 185.972 209.156 cv
187.322 209.156 188.422 210.255 188.422 211.605 cv
cp
0 0 0 .71875 cmyk
@
188.422 211.605 mo
188.422 212.956 187.322 214.055 185.972 214.055 cv
184.622 214.055 183.522 212.956 183.522 211.605 cv
183.522 210.255 184.622 209.156 185.972 209.156 cv
187.322 209.156 188.422 210.255 188.422 211.605 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
184.062 212.095 mo
(155.0)
[.848343 .848343 .848343 .424835 0 ]xsh
181.582 220.575 mo
181.582 221.925 180.492 223.016 179.142 223.016 cv
177.782 223.016 176.692 221.925 176.692 220.575 cv
176.692 219.225 177.782 218.125 179.142 218.125 cv
180.492 218.125 181.582 219.225 181.582 220.575 cv
cp
0 0 0 .71875 cmyk
@
181.582 220.575 mo
181.582 221.925 180.492 223.016 179.142 223.016 cv
177.782 223.016 176.692 221.925 176.692 220.575 cv
176.692 219.225 177.782 218.125 179.142 218.125 cv
180.492 218.125 181.582 219.225 181.582 220.575 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
177.232 221.065 mo
(154.0)
[.848343 .848343 .848343 .424179 0 ]xsh
215.812 211.785 mo
215.812 213.135 214.722 214.225 213.362 214.225 cv
212.012 214.225 210.922 213.135 210.922 211.785 cv
210.922 210.425 212.012 209.335 213.362 209.335 cv
214.722 209.335 215.812 210.425 215.812 211.785 cv
cp
0 0 0 .71875 cmyk
@
215.812 211.785 mo
215.812 213.135 214.722 214.225 213.362 214.225 cv
212.012 214.225 210.922 213.135 210.922 211.785 cv
210.922 210.425 212.012 209.335 213.362 209.335 cv
214.722 209.335 215.812 210.425 215.812 211.785 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
211.452 212.275 mo
(156.0)
[.848358 .848328 .848358 .424164 0 ]xsh
207.742 222.195 mo
207.742 223.545 206.642 224.646 205.292 224.646 cv
203.942 224.646 202.842 223.545 202.842 222.195 cv
202.842 220.845 203.942 219.745 205.292 219.745 cv
206.642 219.745 207.742 220.845 207.742 222.195 cv
cp
0 0 0 .71875 cmyk
@
207.742 222.195 mo
207.742 223.545 206.642 224.646 205.292 224.646 cv
203.942 224.646 202.842 223.545 202.842 222.195 cv
202.842 220.845 203.942 219.745 205.292 219.745 cv
206.642 219.745 207.742 220.845 207.742 222.195 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
203.382 222.685 mo
(157.0)
[.848358 .848328 .848358 .424164 0 ]xsh
218.442 225.795 mo
218.442 227.156 217.352 228.245 216.002 228.245 cv
214.642 228.245 213.552 227.156 213.552 225.795 cv
213.552 224.445 214.642 223.355 216.002 223.355 cv
217.352 223.355 218.442 224.445 218.442 225.795 cv
cp
0 0 0 .71875 cmyk
@
218.442 225.795 mo
218.442 227.156 217.352 228.245 216.002 228.245 cv
214.642 228.245 213.552 227.156 213.552 225.795 cv
213.552 224.445 214.642 223.355 216.002 223.355 cv
217.352 223.355 218.442 224.445 218.442 225.795 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
214.092 226.295 mo
(158.0)
[.848358 .848328 .848358 .424164 0 ]xsh
209.682 198.315 mo
209.682 199.666 208.592 200.766 207.242 200.766 cv
205.882 200.766 204.792 199.666 204.792 198.315 cv
204.792 196.966 205.882 195.865 207.242 195.865 cv
208.592 195.865 209.682 196.966 209.682 198.315 cv
cp
0 0 0 .71875 cmyk
@
209.682 198.315 mo
209.682 199.666 208.592 200.766 207.242 200.766 cv
205.882 200.766 204.792 199.666 204.792 198.315 cv
204.792 196.966 205.882 195.865 207.242 195.865 cv
208.592 195.865 209.682 196.966 209.682 198.315 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
205.332 198.805 mo
(159.0)
[.848358 .848328 .848358 .424164 0 ]xsh
172.722 320.955 mo
172.722 322.315 171.622 323.405 170.272 323.405 cv
168.922 323.405 167.822 322.315 167.822 320.955 cv
167.822 319.605 168.922 318.515 170.272 318.515 cv
171.622 318.515 172.722 319.605 172.722 320.955 cv
cp
0 0 0 .71875 cmyk
@
172.722 320.955 mo
172.722 322.315 171.622 323.405 170.272 323.405 cv
168.922 323.405 167.822 322.315 167.822 320.955 cv
167.822 319.605 168.922 318.515 170.272 318.515 cv
171.622 318.515 172.722 319.605 172.722 320.955 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
168.362 321.455 mo
(198.0)
[.848343 .848343 .848343 .424835 0 ]xsh
154.162 301.645 mo
154.162 302.995 153.072 304.095 151.712 304.095 cv
150.362 304.095 149.272 302.995 149.272 301.645 cv
149.272 300.295 150.362 299.195 151.712 299.195 cv
153.072 299.195 154.162 300.295 154.162 301.645 cv
cp
0 0 0 .71875 cmyk
@
154.162 301.645 mo
154.162 302.995 153.072 304.095 151.712 304.095 cv
150.362 304.095 149.272 302.995 149.272 301.645 cv
149.272 300.295 150.362 299.195 151.712 299.195 cv
153.072 299.195 154.162 300.295 154.162 301.645 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
150.652 302.135 mo
(1.0)
[.848343 .424179 0 ]xsh
158.912 296.915 mo
158.912 298.265 157.822 299.355 156.472 299.355 cv
155.112 299.355 154.022 298.265 154.022 296.915 cv
154.022 295.555 155.112 294.465 156.472 294.465 cv
157.822 294.465 158.912 295.555 158.912 296.915 cv
cp
0 0 0 .71875 cmyk
@
158.912 296.915 mo
158.912 298.265 157.822 299.355 156.472 299.355 cv
155.112 299.355 154.022 298.265 154.022 296.915 cv
154.022 295.555 155.112 294.465 156.472 294.465 cv
157.822 294.465 158.912 295.555 158.912 296.915 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
155.402 297.405 mo
(2.0)
[.848343 .424179 0 ]xsh
214.882 312.175 mo
214.882 313.525 213.792 314.625 212.432 314.625 cv
211.082 314.625 209.992 313.525 209.992 312.175 cv
209.992 310.825 211.082 309.725 212.432 309.725 cv
213.792 309.725 214.882 310.825 214.882 312.175 cv
cp
0 0 0 .71875 cmyk
@
214.882 312.175 mo
214.882 313.525 213.792 314.625 212.432 314.625 cv
211.082 314.625 209.992 313.525 209.992 312.175 cv
209.992 310.825 211.082 309.725 212.432 309.725 cv
213.792 309.725 214.882 310.825 214.882 312.175 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
210.522 312.665 mo
(195.0)
[.848358 .848328 .848358 .424164 0 ]xsh
173.702 296.575 mo
173.702 297.935 172.612 299.025 171.262 299.025 cv
169.902 299.025 168.812 297.935 168.812 296.575 cv
168.812 295.225 169.902 294.135 171.262 294.135 cv
172.612 294.135 173.702 295.225 173.702 296.575 cv
cp
0 0 0 .71875 cmyk
@
173.702 296.575 mo
173.702 297.935 172.612 299.025 171.262 299.025 cv
169.902 299.025 168.812 297.935 168.812 296.575 cv
168.812 295.225 169.902 294.135 171.262 294.135 cv
172.612 294.135 173.702 295.225 173.702 296.575 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
169.352 297.075 mo
(199.0)
[.848343 .848343 .848343 .424179 0 ]xsh
164.852 308.225 mo
164.852 309.575 163.752 310.675 162.402 310.675 cv
161.052 310.675 159.952 309.575 159.952 308.225 cv
159.952 306.875 161.052 305.775 162.402 305.775 cv
163.752 305.775 164.852 306.875 164.852 308.225 cv
cp
0 0 0 .71875 cmyk
@
164.852 308.225 mo
164.852 309.575 163.752 310.675 162.402 310.675 cv
161.052 310.675 159.952 309.575 159.952 308.225 cv
159.952 306.875 161.052 305.775 162.402 305.775 cv
163.752 305.775 164.852 306.875 164.852 308.225 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
161.342 308.715 mo
(0.0)
[.848343 .424179 0 ]xsh
149.652 125.315 mo
149.652 126.666 148.562 127.766 147.212 127.766 cv
145.862 127.766 144.762 126.666 144.762 125.315 cv
144.762 123.966 145.862 122.865 147.212 122.865 cv
148.562 122.865 149.652 123.966 149.652 125.315 cv
cp
0 0 0 .71875 cmyk
@
149.652 125.315 mo
149.652 126.666 148.562 127.766 147.212 127.766 cv
145.862 127.766 144.762 126.666 144.762 125.315 cv
144.762 123.966 145.862 122.865 147.212 122.865 cv
148.562 122.865 149.652 123.966 149.652 125.315 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
145.302 125.805 mo
(115.0)
[.848343 .848343 .848343 .424179 0 ]xsh
148.212 91.1955 mo
148.212 92.5455 147.112 93.6455 145.762 93.6455 cv
144.412 93.6455 143.312 92.5455 143.312 91.1955 cv
143.312 89.8455 144.412 88.7555 145.762 88.7555 cv
147.112 88.7555 148.212 89.8455 148.212 91.1955 cv
cp
0 0 0 .71875 cmyk
@
148.212 91.1955 mo
148.212 92.5455 147.112 93.6455 145.762 93.6455 cv
144.412 93.6455 143.312 92.5455 143.312 91.1955 cv
143.312 89.8455 144.412 88.7555 145.762 88.7555 cv
147.112 88.7555 148.212 89.8455 148.212 91.1955 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
144.272 91.6855 mo
(59.0)
[.848343 .848343 .424179 0 ]xsh
146.802 133.635 mo
146.802 134.995 145.712 136.085 144.352 136.085 cv
143.002 136.085 141.912 134.995 141.912 133.635 cv
141.912 132.285 143.002 131.195 144.352 131.195 cv
145.712 131.195 146.802 132.285 146.802 133.635 cv
cp
0 0 0 .71875 cmyk
@
146.802 133.635 mo
146.802 134.995 145.712 136.085 144.352 136.085 cv
143.002 136.085 141.912 134.995 141.912 133.635 cv
141.912 132.285 143.002 131.195 144.352 131.195 cv
145.712 131.195 146.802 132.285 146.802 133.635 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
142.442 134.135 mo
(106.0)
[.848343 .848343 .848343 .424179 0 ]xsh
140.482 112.875 mo
140.482 114.225 139.382 115.315 138.032 115.315 cv
136.682 115.315 135.582 114.225 135.582 112.875 cv
135.582 111.516 136.682 110.425 138.032 110.425 cv
139.382 110.425 140.482 111.516 140.482 112.875 cv
cp
0 0 0 .71875 cmyk
@
140.482 112.875 mo
140.482 114.225 139.382 115.315 138.032 115.315 cv
136.682 115.315 135.582 114.225 135.582 112.875 cv
135.582 111.516 136.682 110.425 138.032 110.425 cv
139.382 110.425 140.482 111.516 140.482 112.875 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
136.122 113.365 mo
(116.0)
[.848343 .848343 .848343 .424179 0 ]xsh
202.002 8.06549 mo
202.002 9.41553 200.902 10.5155 199.552 10.5155 cv
198.202 10.5155 197.102 9.41553 197.102 8.06549 cv
197.102 6.71552 198.202 5.62549 199.552 5.62549 cv
200.902 5.62549 202.002 6.71552 202.002 8.06549 cv
cp
0 0 0 .71875 cmyk
@
202.002 8.06549 mo
202.002 9.41553 200.902 10.5155 199.552 10.5155 cv
198.202 10.5155 197.102 9.41553 197.102 8.06549 cv
197.102 6.71552 198.202 5.62549 199.552 5.62549 cv
200.902 5.62549 202.002 6.71552 202.002 8.06549 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
198.062 8.55548 mo
(48.0)
[.848358 .848328 .424164 0 ]xsh
247.302 48.1355 mo
247.302 49.4855 246.212 50.5854 244.862 50.5854 cv
243.512 50.5854 242.412 49.4855 242.412 48.1355 cv
242.412 46.7855 243.512 45.6855 244.862 45.6855 cv
246.212 45.6855 247.302 46.7855 247.302 48.1355 cv
cp
0 0 0 .71875 cmyk
@
247.302 48.1355 mo
247.302 49.4855 246.212 50.5854 244.862 50.5854 cv
243.512 50.5854 242.412 49.4855 242.412 48.1355 cv
242.412 46.7855 243.512 45.6855 244.862 45.6855 cv
246.212 45.6855 247.302 46.7855 247.302 48.1355 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
243.372 48.6255 mo
(43.0)
[.848358 .848328 .424164 0 ]xsh
229.132 23.8755 mo
229.132 25.2255 228.042 26.3254 226.692 26.3254 cv
225.332 26.3254 224.242 25.2255 224.242 23.8755 cv
224.242 22.5255 225.332 21.4255 226.692 21.4255 cv
228.042 21.4255 229.132 22.5255 229.132 23.8755 cv
cp
0 0 0 .71875 cmyk
@
229.132 23.8755 mo
229.132 25.2255 228.042 26.3254 226.692 26.3254 cv
225.332 26.3254 224.242 25.2255 224.242 23.8755 cv
224.242 22.5255 225.332 21.4255 226.692 21.4255 cv
228.042 21.4255 229.132 22.5255 229.132 23.8755 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
225.202 24.3655 mo
(46.0)
[.848358 .848328 .424164 0 ]xsh
224.802 35.5555 mo
224.802 36.9055 223.702 37.9955 222.352 37.9955 cv
221.002 37.9955 219.902 36.9055 219.902 35.5555 cv
219.902 34.1955 221.002 33.1055 222.352 33.1055 cv
223.702 33.1055 224.802 34.1955 224.802 35.5555 cv
cp
0 0 0 .71875 cmyk
@
224.802 35.5555 mo
224.802 36.9055 223.702 37.9955 222.352 37.9955 cv
221.002 37.9955 219.902 36.9055 219.902 35.5555 cv
219.902 34.1955 221.002 33.1055 222.352 33.1055 cv
223.702 33.1055 224.802 34.1955 224.802 35.5555 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
220.872 36.0455 mo
(45.0)
[.848358 .848328 .424164 0 ]xsh
245.262 38.8354 mo
245.262 40.1955 244.172 41.2855 242.822 41.2855 cv
241.462 41.2855 240.372 40.1955 240.372 38.8354 cv
240.372 37.4855 241.462 36.3955 242.822 36.3955 cv
244.172 36.3955 245.262 37.4855 245.262 38.8354 cv
cp
0 0 0 .71875 cmyk
@
245.262 38.8354 mo
245.262 40.1955 244.172 41.2855 242.822 41.2855 cv
241.462 41.2855 240.372 40.1955 240.372 38.8354 cv
240.372 37.4855 241.462 36.3955 242.822 36.3955 cv
244.172 36.3955 245.262 37.4855 245.262 38.8354 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
241.332 39.3354 mo
(44.0)
[.848358 .848328 .424164 0 ]xsh
234.312 59.5854 mo
234.312 60.9455 233.222 62.0355 231.872 62.0355 cv
230.512 62.0355 229.422 60.9455 229.422 59.5854 cv
229.422 58.2355 230.512 57.1455 231.872 57.1455 cv
233.222 57.1455 234.312 58.2355 234.312 59.5854 cv
cp
0 0 0 .71875 cmyk
@
234.312 59.5854 mo
234.312 60.9455 233.222 62.0355 231.872 62.0355 cv
230.512 62.0355 229.422 60.9455 229.422 59.5854 cv
229.422 58.2355 230.512 57.1455 231.872 57.1455 cv
233.222 57.1455 234.312 58.2355 234.312 59.5854 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
230.382 60.0854 mo
(47.0)
[.848358 .848328 .424164 0 ]xsh
197.532 16.1555 mo
197.532 17.5055 196.442 18.6055 195.082 18.6055 cv
193.732 18.6055 192.642 17.5055 192.642 16.1555 cv
192.642 14.8055 193.732 13.7055 195.082 13.7055 cv
196.442 13.7055 197.532 14.8055 197.532 16.1555 cv
cp
0 0 0 .71875 cmyk
@
197.532 16.1555 mo
197.532 17.5055 196.442 18.6055 195.082 18.6055 cv
193.732 18.6055 192.642 17.5055 192.642 16.1555 cv
192.642 14.8055 193.732 13.7055 195.082 13.7055 cv
196.442 13.7055 197.532 14.8055 197.532 16.1555 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
193.602 16.6454 mo
(49.0)
[.848343 .848343 .424164 0 ]xsh
248.782 61.8254 mo
248.782 63.1755 247.692 64.2755 246.332 64.2755 cv
244.982 64.2755 243.892 63.1755 243.892 61.8254 cv
243.892 60.4755 244.982 59.3755 246.332 59.3755 cv
247.692 59.3755 248.782 60.4755 248.782 61.8254 cv
cp
0 0 0 .71875 cmyk
@
248.782 61.8254 mo
248.782 63.1755 247.692 64.2755 246.332 64.2755 cv
244.982 64.2755 243.892 63.1755 243.892 61.8254 cv
243.892 60.4755 244.982 59.3755 246.332 59.3755 cv
247.692 59.3755 248.782 60.4755 248.782 61.8254 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
244.852 62.3154 mo
(42.0)
[.848358 .848328 .424164 0 ]xsh
247.962 68.2055 mo
247.962 69.5655 246.872 70.6555 245.522 70.6555 cv
244.172 70.6555 243.072 69.5655 243.072 68.2055 cv
243.072 66.8555 244.172 65.7655 245.522 65.7655 cv
246.872 65.7655 247.962 66.8555 247.962 68.2055 cv
cp
0 0 0 .71875 cmyk
@
247.962 68.2055 mo
247.962 69.5655 246.872 70.6555 245.522 70.6555 cv
244.172 70.6555 243.072 69.5655 243.072 68.2055 cv
243.072 66.8555 244.172 65.7655 245.522 65.7655 cv
246.872 65.7655 247.962 66.8555 247.962 68.2055 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
244.032 68.7054 mo
(41.0)
[.848358 .848328 .424164 0 ]xsh
153.342 140.466 mo
153.342 141.815 152.242 142.916 150.892 142.916 cv
149.542 142.916 148.442 141.815 148.442 140.466 cv
148.442 139.115 149.542 138.016 150.892 138.016 cv
152.242 138.016 153.342 139.115 153.342 140.466 cv
cp
0 0 0 .71875 cmyk
@
153.342 140.466 mo
153.342 141.815 152.242 142.916 150.892 142.916 cv
149.542 142.916 148.442 141.815 148.442 140.466 cv
148.442 139.115 149.542 138.016 150.892 138.016 cv
152.242 138.016 153.342 139.115 153.342 140.466 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
149.402 140.955 mo
(93.0)
[.848343 .848343 .424179 0 ]xsh
174.752 139.275 mo
174.752 140.625 173.652 141.725 172.302 141.725 cv
170.952 141.725 169.852 140.625 169.852 139.275 cv
169.852 137.925 170.952 136.825 172.302 136.825 cv
173.652 136.825 174.752 137.925 174.752 139.275 cv
cp
0 0 0 .71875 cmyk
@
174.752 139.275 mo
174.752 140.625 173.652 141.725 172.302 141.725 cv
170.952 141.725 169.852 140.625 169.852 139.275 cv
169.852 137.925 170.952 136.825 172.302 136.825 cv
173.652 136.825 174.752 137.925 174.752 139.275 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
170.392 139.765 mo
(104.0)
[.848343 .848343 .848343 .424179 0 ]xsh
167.362 145.166 mo
167.362 146.516 166.262 147.605 164.912 147.605 cv
163.562 147.605 162.462 146.516 162.462 145.166 cv
162.462 143.805 163.562 142.716 164.912 142.716 cv
166.262 142.716 167.362 143.805 167.362 145.166 cv
cp
0 0 0 .71875 cmyk
@
167.362 145.166 mo
167.362 146.516 166.262 147.605 164.912 147.605 cv
163.562 147.605 162.462 146.516 162.462 145.166 cv
162.462 143.805 163.562 142.716 164.912 142.716 cv
166.262 142.716 167.362 143.805 167.362 145.166 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
163.422 145.655 mo
(96.0)
[.848343 .848343 .424179 0 ]xsh
172.382 128.735 mo
172.382 130.085 171.282 131.175 169.932 131.175 cv
168.582 131.175 167.482 130.085 167.482 128.735 cv
167.482 127.375 168.582 126.285 169.932 126.285 cv
171.282 126.285 172.382 127.375 172.382 128.735 cv
cp
0 0 0 .71875 cmyk
@
172.382 128.735 mo
172.382 130.085 171.282 131.175 169.932 131.175 cv
168.582 131.175 167.482 130.085 167.482 128.735 cv
167.482 127.375 168.582 126.285 169.932 126.285 cv
171.282 126.285 172.382 127.375 172.382 128.735 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
168.442 129.225 mo
(95.0)
[.848343 .848343 .424179 0 ]xsh
171.472 144.125 mo
171.472 145.475 170.372 146.575 169.022 146.575 cv
167.672 146.575 166.572 145.475 166.572 144.125 cv
166.572 142.775 167.672 141.675 169.022 141.675 cv
170.372 141.675 171.472 142.775 171.472 144.125 cv
cp
0 0 0 .71875 cmyk
@
171.472 144.125 mo
171.472 145.475 170.372 146.575 169.022 146.575 cv
167.672 146.575 166.572 145.475 166.572 144.125 cv
166.572 142.775 167.672 141.675 169.022 141.675 cv
170.372 141.675 171.472 142.775 171.472 144.125 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
167.112 144.615 mo
(114.0)
[.848343 .848343 .848343 .424835 0 ]xsh
171.372 133.535 mo
171.372 134.885 170.272 135.985 168.922 135.985 cv
167.572 135.985 166.472 134.885 166.472 133.535 cv
166.472 132.185 167.572 131.085 168.922 131.085 cv
170.272 131.085 171.372 132.185 171.372 133.535 cv
cp
0 0 0 .71875 cmyk
@
171.372 133.535 mo
171.372 134.885 170.272 135.985 168.922 135.985 cv
167.572 135.985 166.472 134.885 166.472 133.535 cv
166.472 132.185 167.572 131.085 168.922 131.085 cv
170.272 131.085 171.372 132.185 171.372 133.535 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
167.432 134.025 mo
(94.0)
[.848343 .848343 .424179 0 ]xsh
165.002 136.975 mo
165.002 138.335 163.902 139.425 162.552 139.425 cv
161.202 139.425 160.102 138.335 160.102 136.975 cv
160.102 135.625 161.202 134.535 162.552 134.535 cv
163.902 134.535 165.002 135.625 165.002 136.975 cv
cp
0 0 0 .71875 cmyk
@
165.002 136.975 mo
165.002 138.335 163.902 139.425 162.552 139.425 cv
161.202 139.425 160.102 138.335 160.102 136.975 cv
160.102 135.625 161.202 134.535 162.552 134.535 cv
163.902 134.535 165.002 135.625 165.002 136.975 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
160.642 137.475 mo
(103.0)
[.848343 .848343 .848343 .424179 0 ]xsh
245.952 111.885 mo
245.952 113.245 244.852 114.335 243.502 114.335 cv
242.152 114.335 241.052 113.245 241.052 111.885 cv
241.052 110.535 242.152 109.445 243.502 109.445 cv
244.852 109.445 245.952 110.535 245.952 111.885 cv
cp
0 0 0 .71875 cmyk
@
245.952 111.885 mo
245.952 113.245 244.852 114.335 243.502 114.335 cv
242.152 114.335 241.052 113.245 241.052 111.885 cv
241.052 110.535 242.152 109.445 243.502 109.445 cv
244.852 109.445 245.952 110.535 245.952 111.885 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
242.022 112.385 mo
(39.0)
[.848358 .848328 .424164 0 ]xsh
248.672 106.805 mo
248.672 108.166 247.582 109.255 246.232 109.255 cv
244.872 109.255 243.782 108.166 243.782 106.805 cv
243.782 105.456 244.872 104.365 246.232 104.365 cv
247.582 104.365 248.672 105.456 248.672 106.805 cv
cp
0 0 0 .71875 cmyk
@
248.672 106.805 mo
248.672 108.166 247.582 109.255 246.232 109.255 cv
244.872 109.255 243.782 108.166 243.782 106.805 cv
243.782 105.456 244.872 104.365 246.232 104.365 cv
247.582 104.365 248.672 105.456 248.672 106.805 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
244.742 107.305 mo
(36.0)
[.848358 .848328 .424164 0 ]xsh
219.672 117.575 mo
219.672 118.925 218.572 120.025 217.222 120.025 cv
215.872 120.025 214.772 118.925 214.772 117.575 cv
214.772 116.225 215.872 115.125 217.222 115.125 cv
218.572 115.125 219.672 116.225 219.672 117.575 cv
cp
0 0 0 .71875 cmyk
@
219.672 117.575 mo
219.672 118.925 218.572 120.025 217.222 120.025 cv
215.872 120.025 214.772 118.925 214.772 117.575 cv
214.772 116.225 215.872 115.125 217.222 115.125 cv
218.572 115.125 219.672 116.225 219.672 117.575 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
215.732 118.065 mo
(35.0)
[.848358 .848328 .424164 0 ]xsh
221.952 108.295 mo
221.952 109.646 220.852 110.745 219.502 110.745 cv
218.152 110.745 217.052 109.646 217.052 108.295 cv
217.052 106.945 218.152 105.855 219.502 105.855 cv
220.852 105.855 221.952 106.945 221.952 108.295 cv
cp
0 0 0 .71875 cmyk
@
221.952 108.295 mo
221.952 109.646 220.852 110.745 219.502 110.745 cv
218.152 110.745 217.052 109.646 217.052 108.295 cv
217.052 106.945 218.152 105.855 219.502 105.855 cv
220.852 105.855 221.952 106.945 221.952 108.295 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
218.022 108.785 mo
(38.0)
[.848358 .848328 .424164 0 ]xsh
244.972 102.855 mo
244.972 104.206 243.882 105.295 242.522 105.295 cv
241.172 105.295 240.082 104.206 240.082 102.855 cv
240.082 101.505 241.172 100.406 242.522 100.406 cv
243.882 100.406 244.972 101.505 244.972 102.855 cv
cp
0 0 0 .71875 cmyk
@
244.972 102.855 mo
244.972 104.206 243.882 105.295 242.522 105.295 cv
241.172 105.295 240.082 104.206 240.082 102.855 cv
240.082 101.505 241.172 100.406 242.522 100.406 cv
243.882 100.406 244.972 101.505 244.972 102.855 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
241.042 103.345 mo
(40.0)
[.848358 .848328 .424164 0 ]xsh
257.322 112.045 mo
257.322 113.396 256.222 114.485 254.872 114.485 cv
253.522 114.485 252.422 113.396 252.422 112.045 cv
252.422 110.695 253.522 109.595 254.872 109.595 cv
256.222 109.595 257.322 110.695 257.322 112.045 cv
cp
0 0 0 .71875 cmyk
@
257.322 112.045 mo
257.322 113.396 256.222 114.485 254.872 114.485 cv
253.522 114.485 252.422 113.396 252.422 112.045 cv
252.422 110.695 253.522 109.595 254.872 109.595 cv
256.222 109.595 257.322 110.695 257.322 112.045 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
253.392 112.535 mo
(32.0)
[.848358 .848328 .424164 0 ]xsh
234.462 118.475 mo
234.462 119.835 233.362 120.925 232.012 120.925 cv
230.662 120.925 229.562 119.835 229.562 118.475 cv
229.562 117.125 230.662 116.035 232.012 116.035 cv
233.362 116.035 234.462 117.125 234.462 118.475 cv
cp
0 0 0 .71875 cmyk
@
234.462 118.475 mo
234.462 119.835 233.362 120.925 232.012 120.925 cv
230.662 120.925 229.562 119.835 229.562 118.475 cv
229.562 117.125 230.662 116.035 232.012 116.035 cv
233.362 116.035 234.462 117.125 234.462 118.475 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
230.522 118.975 mo
(31.0)
[.848358 .848328 .424164 0 ]xsh
192.922 115.875 mo
192.922 117.225 191.822 118.315 190.472 118.315 cv
189.122 118.315 188.022 117.225 188.022 115.875 cv
188.022 114.516 189.122 113.425 190.472 113.425 cv
191.822 113.425 192.922 114.516 192.922 115.875 cv
cp
0 0 0 .71875 cmyk
@
192.922 115.875 mo
192.922 117.225 191.822 118.315 190.472 118.315 cv
189.122 118.315 188.022 117.225 188.022 115.875 cv
188.022 114.516 189.122 113.425 190.472 113.425 cv
191.822 113.425 192.922 114.516 192.922 115.875 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
188.992 116.365 mo
(97.0)
[.848343 .848343 .424179 0 ]xsh
176.342 131.025 mo
176.342 132.375 175.242 133.475 173.892 133.475 cv
172.542 133.475 171.442 132.375 171.442 131.025 cv
171.442 129.675 172.542 128.575 173.892 128.575 cv
175.242 128.575 176.342 129.675 176.342 131.025 cv
cp
0 0 0 .71875 cmyk
@
176.342 131.025 mo
176.342 132.375 175.242 133.475 173.892 133.475 cv
172.542 133.475 171.442 132.375 171.442 131.025 cv
171.442 129.675 172.542 128.575 173.892 128.575 cv
175.242 128.575 176.342 129.675 176.342 131.025 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
171.982 131.515 mo
(105.0)
[.848343 .848343 .848343 .424179 0 ]xsh
194.812 107.385 mo
194.812 108.735 193.712 109.835 192.362 109.835 cv
191.012 109.835 189.912 108.735 189.912 107.385 cv
189.912 106.035 191.012 104.935 192.362 104.935 cv
193.712 104.935 194.812 106.035 194.812 107.385 cv
cp
0 0 0 .71875 cmyk
@
194.812 107.385 mo
194.812 108.735 193.712 109.835 192.362 109.835 cv
191.012 109.835 189.912 108.735 189.912 107.385 cv
189.912 106.035 191.012 104.935 192.362 104.935 cv
193.712 104.935 194.812 106.035 194.812 107.385 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
190.452 107.875 mo
(102.0)
[.848343 .848343 .848343 .424179 0 ]xsh
186.412 134.735 mo
186.412 136.085 185.322 137.185 183.972 137.185 cv
182.612 137.185 181.522 136.085 181.522 134.735 cv
181.522 133.385 182.612 132.285 183.972 132.285 cv
185.322 132.285 186.412 133.385 186.412 134.735 cv
cp
0 0 0 .71875 cmyk
@
186.412 134.735 mo
186.412 136.085 185.322 137.185 183.972 137.185 cv
182.612 137.185 181.522 136.085 181.522 134.735 cv
181.522 133.385 182.612 132.285 183.972 132.285 cv
185.322 132.285 186.412 133.385 186.412 134.735 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
182.062 135.225 mo
(113.0)
[.848343 .848343 .848343 .424835 0 ]xsh
192.092 123.475 mo
192.092 124.825 190.992 125.925 189.642 125.925 cv
188.292 125.925 187.202 124.825 187.202 123.475 cv
187.202 122.125 188.292 121.025 189.642 121.025 cv
190.992 121.025 192.092 122.125 192.092 123.475 cv
cp
0 0 0 .71875 cmyk
@
192.092 123.475 mo
192.092 124.825 190.992 125.925 189.642 125.925 cv
188.292 125.925 187.202 124.825 187.202 123.475 cv
187.202 122.125 188.292 121.025 189.642 121.025 cv
190.992 121.025 192.092 122.125 192.092 123.475 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
187.732 123.965 mo
(101.0)
[.848343 .848343 .848343 .424179 0 ]xsh
198.722 118.845 mo
198.722 120.195 197.622 121.295 196.272 121.295 cv
194.922 121.295 193.822 120.195 193.822 118.845 cv
193.822 117.495 194.922 116.396 196.272 116.396 cv
197.622 116.396 198.722 117.495 198.722 118.845 cv
cp
0 0 0 .71875 cmyk
@
198.722 118.845 mo
198.722 120.195 197.622 121.295 196.272 121.295 cv
194.922 121.295 193.822 120.195 193.822 118.845 cv
193.822 117.495 194.922 116.396 196.272 116.396 cv
197.622 116.396 198.722 117.495 198.722 118.845 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
194.792 119.335 mo
(99.0)
[.848358 .848328 .424164 0 ]xsh
184.632 115.595 mo
184.632 116.945 183.532 118.045 182.182 118.045 cv
180.832 118.045 179.732 116.945 179.732 115.595 cv
179.732 114.245 180.832 113.146 182.182 113.146 cv
183.532 113.146 184.632 114.245 184.632 115.595 cv
cp
0 0 0 .71875 cmyk
@
184.632 115.595 mo
184.632 116.945 183.532 118.045 182.182 118.045 cv
180.832 118.045 179.732 116.945 179.732 115.595 cv
179.732 114.245 180.832 113.146 182.182 113.146 cv
183.532 113.146 184.632 114.245 184.632 115.595 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
180.272 116.085 mo
(100.0)
[.848343 .848343 .848343 .424179 0 ]xsh
208.702 132.216 mo
208.702 133.565 207.602 134.666 206.252 134.666 cv
204.902 134.666 203.802 133.565 203.802 132.216 cv
203.802 130.865 204.902 129.766 206.252 129.766 cv
207.602 129.766 208.702 130.865 208.702 132.216 cv
cp
0 0 0 .71875 cmyk
@
208.702 132.216 mo
208.702 133.565 207.602 134.666 206.252 134.666 cv
204.902 134.666 203.802 133.565 203.802 132.216 cv
203.802 130.865 204.902 129.766 206.252 129.766 cv
207.602 129.766 208.702 130.865 208.702 132.216 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
204.762 132.705 mo
(98.0)
[.848358 .848328 .424164 0 ]xsh
129.192 54.9255 mo
129.192 56.2755 128.102 57.3655 126.742 57.3655 cv
125.392 57.3655 124.302 56.2755 124.302 54.9255 cv
124.302 53.5754 125.392 52.4755 126.742 52.4755 cv
128.102 52.4755 129.192 53.5754 129.192 54.9255 cv
cp
0 0 0 .71875 cmyk
@
129.192 54.9255 mo
129.192 56.2755 128.102 57.3655 126.742 57.3655 cv
125.392 57.3655 124.302 56.2755 124.302 54.9255 cv
124.302 53.5754 125.392 52.4755 126.742 52.4755 cv
128.102 52.4755 129.192 53.5754 129.192 54.9255 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
125.262 55.4155 mo
(57.0)
[.848343 .848343 .424179 0 ]xsh
125.512 65.6755 mo
125.512 67.0255 124.412 68.1255 123.062 68.1255 cv
121.712 68.1255 120.612 67.0255 120.612 65.6755 cv
120.612 64.3254 121.712 63.2255 123.062 63.2255 cv
124.412 63.2255 125.512 64.3254 125.512 65.6755 cv
cp
0 0 0 .71875 cmyk
@
125.512 65.6755 mo
125.512 67.0255 124.412 68.1255 123.062 68.1255 cv
121.712 68.1255 120.612 67.0255 120.612 65.6755 cv
120.612 64.3254 121.712 63.2255 123.062 63.2255 cv
124.412 63.2255 125.512 64.3254 125.512 65.6755 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
121.582 66.1655 mo
(58.0)
[.848343 .848343 .424179 0 ]xsh
133.522 39.7955 mo
133.522 41.1455 132.432 42.2455 131.072 42.2455 cv
129.722 42.2455 128.632 41.1455 128.632 39.7955 cv
128.632 38.4455 129.722 37.3455 131.072 37.3455 cv
132.432 37.3455 133.522 38.4455 133.522 39.7955 cv
cp
0 0 0 .71875 cmyk
@
133.522 39.7955 mo
133.522 41.1455 132.432 42.2455 131.072 42.2455 cv
129.722 42.2455 128.632 41.1455 128.632 39.7955 cv
128.632 38.4455 129.722 37.3455 131.072 37.3455 cv
132.432 37.3455 133.522 38.4455 133.522 39.7955 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
129.592 40.2855 mo
(54.0)
[.848343 .848343 .424179 0 ]xsh
148.742 66.1055 mo
148.742 67.4555 147.652 68.5555 146.302 68.5555 cv
144.942 68.5555 143.852 67.4555 143.852 66.1055 cv
143.852 64.7555 144.942 63.6555 146.302 63.6555 cv
147.652 63.6555 148.742 64.7555 148.742 66.1055 cv
cp
0 0 0 .71875 cmyk
@
148.742 66.1055 mo
148.742 67.4555 147.652 68.5555 146.302 68.5555 cv
144.942 68.5555 143.852 67.4555 143.852 66.1055 cv
143.852 64.7555 144.942 63.6555 146.302 63.6555 cv
147.652 63.6555 148.742 64.7555 148.742 66.1055 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
144.812 66.5955 mo
(60.0)
[.848343 .848343 .424179 0 ]xsh
135.842 54.2055 mo
135.842 55.5555 134.752 56.6555 133.392 56.6555 cv
132.042 56.6555 130.952 55.5555 130.952 54.2055 cv
130.952 52.8555 132.042 51.7555 133.392 51.7555 cv
134.752 51.7555 135.842 52.8555 135.842 54.2055 cv
cp
0 0 0 .71875 cmyk
@
135.842 54.2055 mo
135.842 55.5555 134.752 56.6555 133.392 56.6555 cv
132.042 56.6555 130.952 55.5555 130.952 54.2055 cv
130.952 52.8555 132.042 51.7555 133.392 51.7555 cv
134.752 51.7555 135.842 52.8555 135.842 54.2055 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
131.912 54.6954 mo
(68.0)
[.848343 .848343 .424179 0 ]xsh
150.122 53.7755 mo
150.122 55.1255 149.022 56.2255 147.672 56.2255 cv
146.322 56.2255 145.222 55.1255 145.222 53.7755 cv
145.222 52.4255 146.322 51.3254 147.672 51.3254 cv
149.022 51.3254 150.122 52.4255 150.122 53.7755 cv
cp
0 0 0 .71875 cmyk
@
150.122 53.7755 mo
150.122 55.1255 149.022 56.2255 147.672 56.2255 cv
146.322 56.2255 145.222 55.1255 145.222 53.7755 cv
145.222 52.4255 146.322 51.3254 147.672 51.3254 cv
149.022 51.3254 150.122 52.4255 150.122 53.7755 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
146.192 54.2654 mo
(66.0)
[.848343 .848343 .424179 0 ]xsh
141.492 61.2855 mo
141.492 62.6355 140.392 63.7355 139.042 63.7355 cv
137.692 63.7355 136.592 62.6355 136.592 61.2855 cv
136.592 59.9355 137.692 58.8354 139.042 58.8354 cv
140.392 58.8354 141.492 59.9355 141.492 61.2855 cv
cp
0 0 0 .71875 cmyk
@
141.492 61.2855 mo
141.492 62.6355 140.392 63.7355 139.042 63.7355 cv
137.692 63.7355 136.592 62.6355 136.592 61.2855 cv
136.592 59.9355 137.692 58.8354 139.042 58.8354 cv
140.392 58.8354 141.492 59.9355 141.492 61.2855 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
137.552 61.7755 mo
(67.0)
[.848343 .848343 .424179 0 ]xsh
141.512 34.8354 mo
141.512 36.1855 140.412 37.2855 139.062 37.2855 cv
137.712 37.2855 136.612 36.1855 136.612 34.8354 cv
136.612 33.4855 137.712 32.3855 139.062 32.3855 cv
140.412 32.3855 141.512 33.4855 141.512 34.8354 cv
cp
0 0 0 .71875 cmyk
@
141.512 34.8354 mo
141.512 36.1855 140.412 37.2855 139.062 37.2855 cv
137.712 37.2855 136.612 36.1855 136.612 34.8354 cv
136.612 33.4855 137.712 32.3855 139.062 32.3855 cv
140.412 32.3855 141.512 33.4855 141.512 34.8354 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
137.582 35.3254 mo
(53.0)
[.848343 .848343 .424179 0 ]xsh
256.162 127.885 mo
256.162 129.235 255.062 130.335 253.712 130.335 cv
252.362 130.335 251.262 129.235 251.262 127.885 cv
251.262 126.535 252.362 125.435 253.712 125.435 cv
255.062 125.435 256.162 126.535 256.162 127.885 cv
cp
0 0 0 .71875 cmyk
@
256.162 127.885 mo
256.162 129.235 255.062 130.335 253.712 130.335 cv
252.362 130.335 251.262 129.235 251.262 127.885 cv
251.262 126.535 252.362 125.435 253.712 125.435 cv
255.062 125.435 256.162 126.535 256.162 127.885 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
252.232 128.375 mo
(33.0)
[.848358 .848328 .424164 0 ]xsh
242.222 130.925 mo
242.222 132.285 241.132 133.375 239.782 133.375 cv
238.422 133.375 237.332 132.285 237.332 130.925 cv
237.332 129.575 238.422 128.485 239.782 128.485 cv
241.132 128.485 242.222 129.575 242.222 130.925 cv
cp
0 0 0 .71875 cmyk
@
242.222 130.925 mo
242.222 132.285 241.132 133.375 239.782 133.375 cv
238.422 133.375 237.332 132.285 237.332 130.925 cv
237.332 129.575 238.422 128.485 239.782 128.485 cv
241.132 128.485 242.222 129.575 242.222 130.925 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
238.292 131.425 mo
(37.0)
[.848358 .848328 .424164 0 ]xsh
265.442 125.466 mo
265.442 126.825 264.352 127.916 263.002 127.916 cv
261.652 127.916 260.552 126.825 260.552 125.466 cv
260.552 124.115 261.652 123.025 263.002 123.025 cv
264.352 123.025 265.442 124.115 265.442 125.466 cv
cp
0 0 0 .71875 cmyk
@
265.442 125.466 mo
265.442 126.825 264.352 127.916 263.002 127.916 cv
261.652 127.916 260.552 126.825 260.552 125.466 cv
260.552 124.115 261.652 123.025 263.002 123.025 cv
264.352 123.025 265.442 124.115 265.442 125.466 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
261.512 125.965 mo
(30.0)
[.848358 .848328 .424164 0 ]xsh
252.812 131.535 mo
252.812 132.885 251.712 133.985 250.362 133.985 cv
249.012 133.985 247.912 132.885 247.912 131.535 cv
247.912 130.185 249.012 129.095 250.362 129.095 cv
251.712 129.095 252.812 130.185 252.812 131.535 cv
cp
0 0 0 .71875 cmyk
@
252.812 131.535 mo
252.812 132.885 251.712 133.985 250.362 133.985 cv
249.012 133.985 247.912 132.885 247.912 131.535 cv
247.912 130.185 249.012 129.095 250.362 129.095 cv
251.712 129.095 252.812 130.185 252.812 131.535 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
248.882 132.035 mo
(29.0)
[.848358 .848328 .424164 0 ]xsh
238.152 134.385 mo
238.152 135.745 237.062 136.835 235.712 136.835 cv
234.362 136.835 233.262 135.745 233.262 134.385 cv
233.262 133.035 234.362 131.945 235.712 131.945 cv
237.062 131.945 238.152 133.035 238.152 134.385 cv
cp
0 0 0 .71875 cmyk
@
238.152 134.385 mo
238.152 135.745 237.062 136.835 235.712 136.835 cv
234.362 136.835 233.262 135.745 233.262 134.385 cv
233.262 133.035 234.362 131.945 235.712 131.945 cv
237.062 131.945 238.152 133.035 238.152 134.385 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
234.222 134.885 mo
(28.0)
[.848358 .848328 .424164 0 ]xsh
162.862 63.6055 mo
162.862 64.9555 161.762 66.0555 160.412 66.0555 cv
159.062 66.0555 157.962 64.9555 157.962 63.6055 cv
157.962 62.2555 159.062 61.1555 160.412 61.1555 cv
161.762 61.1555 162.862 62.2555 162.862 63.6055 cv
cp
0 0 0 .71875 cmyk
@
162.862 63.6055 mo
162.862 64.9555 161.762 66.0555 160.412 66.0555 cv
159.062 66.0555 157.962 64.9555 157.962 63.6055 cv
157.962 62.2555 159.062 61.1555 160.412 61.1555 cv
161.762 61.1555 162.862 62.2555 162.862 63.6055 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
158.932 64.0955 mo
(63.0)
[.848343 .848343 .424179 0 ]xsh
158.852 12.9055 mo
158.852 14.2655 157.752 15.3555 156.402 15.3555 cv
155.052 15.3555 153.952 14.2655 153.952 12.9055 cv
153.952 11.5555 155.052 10.4655 156.402 10.4655 cv
157.752 10.4655 158.852 11.5555 158.852 12.9055 cv
cp
0 0 0 .71875 cmyk
@
158.852 12.9055 mo
158.852 14.2655 157.752 15.3555 156.402 15.3555 cv
155.052 15.3555 153.952 14.2655 153.952 12.9055 cv
153.952 11.5555 155.052 10.4655 156.402 10.4655 cv
157.752 10.4655 158.852 11.5555 158.852 12.9055 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
154.922 13.4055 mo
(52.0)
[.848343 .848343 .424179 0 ]xsh
169.482 9.9455 mo
169.482 11.2955 168.382 12.3955 167.032 12.3955 cv
165.682 12.3955 164.582 11.2955 164.582 9.9455 cv
164.582 8.59546 165.682 7.49548 167.032 7.49548 cv
168.382 7.49548 169.482 8.59546 169.482 9.9455 cv
cp
0 0 0 .71875 cmyk
@
169.482 9.9455 mo
169.482 11.2955 168.382 12.3955 167.032 12.3955 cv
165.682 12.3955 164.582 11.2955 164.582 9.9455 cv
164.582 8.59546 165.682 7.49548 167.032 7.49548 cv
168.382 7.49548 169.482 8.59546 169.482 9.9455 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
165.552 10.4355 mo
(51.0)
[.848343 .848343 .424179 0 ]xsh
174.492 74.3354 mo
174.492 75.6855 173.402 76.7855 172.042 76.7855 cv
170.692 76.7855 169.602 75.6855 169.602 74.3354 cv
169.602 72.9855 170.692 71.8855 172.042 71.8855 cv
173.402 71.8855 174.492 72.9855 174.492 74.3354 cv
cp
0 0 0 .71875 cmyk
@
174.492 74.3354 mo
174.492 75.6855 173.402 76.7855 172.042 76.7855 cv
170.692 76.7855 169.602 75.6855 169.602 74.3354 cv
169.602 72.9855 170.692 71.8855 172.042 71.8855 cv
173.402 71.8855 174.492 72.9855 174.492 74.3354 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
170.562 74.8254 mo
(61.0)
[.848343 .848343 .424179 0 ]xsh
165.532 86.8855 mo
165.532 88.2355 164.442 89.3354 163.082 89.3354 cv
161.732 89.3354 160.642 88.2355 160.642 86.8855 cv
160.642 85.5355 161.732 84.4355 163.082 84.4355 cv
164.442 84.4355 165.532 85.5355 165.532 86.8855 cv
cp
0 0 0 .71875 cmyk
@
165.532 86.8855 mo
165.532 88.2355 164.442 89.3354 163.082 89.3354 cv
161.732 89.3354 160.642 88.2355 160.642 86.8855 cv
160.642 85.5355 161.732 84.4355 163.082 84.4355 cv
164.442 84.4355 165.532 85.5355 165.532 86.8855 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
161.602 87.3755 mo
(64.0)
[.848343 .848343 .424179 0 ]xsh
167.882 55.1955 mo
167.882 56.5455 166.782 57.6455 165.432 57.6455 cv
164.082 57.6455 162.982 56.5455 162.982 55.1955 cv
162.982 53.8455 164.082 52.7455 165.432 52.7455 cv
166.782 52.7455 167.882 53.8455 167.882 55.1955 cv
cp
0 0 0 .71875 cmyk
@
167.882 55.1955 mo
167.882 56.5455 166.782 57.6455 165.432 57.6455 cv
164.082 57.6455 162.982 56.5455 162.982 55.1955 cv
162.982 53.8455 164.082 52.7455 165.432 52.7455 cv
166.782 52.7455 167.882 53.8455 167.882 55.1955 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
163.952 55.6855 mo
(65.0)
[.848343 .848343 .424179 0 ]xsh
163.282 101.445 mo
163.282 102.795 162.182 103.896 160.832 103.896 cv
159.482 103.896 158.382 102.795 158.382 101.445 cv
158.382 100.095 159.482 98.9955 160.832 98.9955 cv
162.182 98.9955 163.282 100.095 163.282 101.445 cv
cp
0 0 0 .71875 cmyk
@
163.282 101.445 mo
163.282 102.795 162.182 103.896 160.832 103.896 cv
159.482 103.896 158.382 102.795 158.382 101.445 cv
158.382 100.095 159.482 98.9955 160.832 98.9955 cv
162.182 98.9955 163.282 100.095 163.282 101.445 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
159.352 101.935 mo
(62.0)
[.848343 .848343 .424179 0 ]xsh
168.962 16.8055 mo
168.962 18.1555 167.862 19.2555 166.512 19.2555 cv
165.162 19.2555 164.062 18.1555 164.062 16.8055 cv
164.062 15.4555 165.162 14.3555 166.512 14.3555 cv
167.862 14.3555 168.962 15.4555 168.962 16.8055 cv
cp
0 0 0 .71875 cmyk
@
168.962 16.8055 mo
168.962 18.1555 167.862 19.2555 166.512 19.2555 cv
165.162 19.2555 164.062 18.1555 164.062 16.8055 cv
164.062 15.4555 165.162 14.3555 166.512 14.3555 cv
167.862 14.3555 168.962 15.4555 168.962 16.8055 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
165.022 17.2955 mo
(50.0)
[.848343 .848343 .424179 0 ]xsh
323.312 255.295 mo
323.312 256.646 322.212 257.745 320.862 257.745 cv
319.512 257.745 318.412 256.646 318.412 255.295 cv
318.412 253.945 319.512 252.845 320.862 252.845 cv
322.212 252.845 323.312 253.945 323.312 255.295 cv
cp
0 0 0 .71875 cmyk
@
323.312 255.295 mo
323.312 256.646 322.212 257.745 320.862 257.745 cv
319.512 257.745 318.412 256.646 318.412 255.295 cv
318.412 253.945 319.512 252.845 320.862 252.845 cv
322.212 252.845 323.312 253.945 323.312 255.295 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
318.952 255.785 mo
(179.0)
[.848358 .848328 .848358 .424164 0 ]xsh
325.792 242.656 mo
325.792 244.016 324.692 245.105 323.342 245.105 cv
321.992 245.105 320.892 244.016 320.892 242.656 cv
320.892 241.305 321.992 240.216 323.342 240.216 cv
324.692 240.216 325.792 241.305 325.792 242.656 cv
cp
0 0 0 .71875 cmyk
@
325.792 242.656 mo
325.792 244.016 324.692 245.105 323.342 245.105 cv
321.992 245.105 320.892 244.016 320.892 242.656 cv
320.892 241.305 321.992 240.216 323.342 240.216 cv
324.692 240.216 325.792 241.305 325.792 242.656 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
321.432 243.155 mo
(180.0)
[.848358 .848328 .848358 .424164 0 ]xsh
303.802 248.966 mo
303.802 250.325 302.702 251.416 301.352 251.416 cv
300.002 251.416 298.902 250.325 298.902 248.966 cv
298.902 247.615 300.002 246.525 301.352 246.525 cv
302.702 246.525 303.802 247.615 303.802 248.966 cv
cp
0 0 0 .71875 cmyk
@
303.802 248.966 mo
303.802 250.325 302.702 251.416 301.352 251.416 cv
300.002 251.416 298.902 250.325 298.902 248.966 cv
298.902 247.615 300.002 246.525 301.352 246.525 cv
302.702 246.525 303.802 247.615 303.802 248.966 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
299.442 249.465 mo
(177.0)
[.848358 .848328 .848358 .424164 0 ]xsh
318.772 240.175 mo
318.772 241.525 317.672 242.615 316.322 242.615 cv
314.972 242.615 313.872 241.525 313.872 240.175 cv
313.872 238.815 314.972 237.725 316.322 237.725 cv
317.672 237.725 318.772 238.815 318.772 240.175 cv
cp
0 0 0 .71875 cmyk
@
318.772 240.175 mo
318.772 241.525 317.672 242.615 316.322 242.615 cv
314.972 242.615 313.872 241.525 313.872 240.175 cv
313.872 238.815 314.972 237.725 316.322 237.725 cv
317.672 237.725 318.772 238.815 318.772 240.175 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
314.412 240.665 mo
(181.0)
[.848358 .848328 .848358 .424835 0 ]xsh
320.662 233.295 mo
320.662 234.646 319.562 235.745 318.212 235.745 cv
316.862 235.745 315.762 234.646 315.762 233.295 cv
315.762 231.945 316.862 230.845 318.212 230.845 cv
319.562 230.845 320.662 231.945 320.662 233.295 cv
cp
0 0 0 .71875 cmyk
@
320.662 233.295 mo
320.662 234.646 319.562 235.745 318.212 235.745 cv
316.862 235.745 315.762 234.646 315.762 233.295 cv
315.762 231.945 316.862 230.845 318.212 230.845 cv
319.562 230.845 320.662 231.945 320.662 233.295 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
316.302 233.785 mo
(182.0)
[.848358 .848328 .848358 .424164 0 ]xsh
292.502 233.565 mo
292.502 234.916 291.402 236.016 290.052 236.016 cv
288.702 236.016 287.602 234.916 287.602 233.565 cv
287.602 232.216 288.702 231.115 290.052 231.115 cv
291.402 231.115 292.502 232.216 292.502 233.565 cv
cp
0 0 0 .71875 cmyk
@
292.502 233.565 mo
292.502 234.916 291.402 236.016 290.052 236.016 cv
288.702 236.016 287.602 234.916 287.602 233.565 cv
287.602 232.216 288.702 231.115 290.052 231.115 cv
291.402 231.115 292.502 232.216 292.502 233.565 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
288.142 234.055 mo
(184.0)
[.848358 .848328 .848358 .424164 0 ]xsh
312.572 263.735 mo
312.572 265.085 311.472 266.175 310.122 266.175 cv
308.772 266.175 307.672 265.085 307.672 263.735 cv
307.672 262.375 308.772 261.285 310.122 261.285 cv
311.472 261.285 312.572 262.375 312.572 263.735 cv
cp
0 0 0 .71875 cmyk
@
312.572 263.735 mo
312.572 265.085 311.472 266.175 310.122 266.175 cv
308.772 266.175 307.672 265.085 307.672 263.735 cv
307.672 262.375 308.772 261.285 310.122 261.285 cv
311.472 261.285 312.572 262.375 312.572 263.735 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
308.212 264.225 mo
(176.0)
[.848358 .848328 .848358 .424835 0 ]xsh
324.392 260.605 mo
324.392 261.966 323.302 263.055 321.952 263.055 cv
320.592 263.055 319.502 261.966 319.502 260.605 cv
319.502 259.255 320.592 258.166 321.952 258.166 cv
323.302 258.166 324.392 259.255 324.392 260.605 cv
cp
0 0 0 .71875 cmyk
@
324.392 260.605 mo
324.392 261.966 323.302 263.055 321.952 263.055 cv
320.592 263.055 319.502 261.966 319.502 260.605 cv
319.502 259.255 320.592 258.166 321.952 258.166 cv
323.302 258.166 324.392 259.255 324.392 260.605 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
320.042 261.105 mo
(178.0)
[.848358 .848328 .848358 .424164 0 ]xsh
300.082 263.815 mo
300.082 265.166 298.982 266.266 297.632 266.266 cv
296.282 266.266 295.192 265.166 295.192 263.815 cv
295.192 262.466 296.282 261.365 297.632 261.365 cv
298.982 261.365 300.082 262.466 300.082 263.815 cv
cp
0 0 0 .71875 cmyk
@
300.082 263.815 mo
300.082 265.166 298.982 266.266 297.632 266.266 cv
296.282 266.266 295.192 265.166 295.192 263.815 cv
295.192 262.466 296.282 261.365 297.632 261.365 cv
298.982 261.365 300.082 262.466 300.082 263.815 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
295.722 264.305 mo
(175.0)
[.848358 .848328 .848358 .424164 0 ]xsh
256.622 263.885 mo
256.622 265.235 255.532 266.335 254.182 266.335 cv
252.822 266.335 251.732 265.235 251.732 263.885 cv
251.732 262.535 252.822 261.435 254.182 261.435 cv
255.532 261.435 256.622 262.535 256.622 263.885 cv
cp
0 0 0 .71875 cmyk
@
256.622 263.885 mo
256.622 265.235 255.532 266.335 254.182 266.335 cv
252.822 266.335 251.732 265.235 251.732 263.885 cv
251.732 262.535 252.822 261.435 254.182 261.435 cv
255.532 261.435 256.622 262.535 256.622 263.885 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
252.272 264.375 mo
(188.0)
[.848358 .848328 .848358 .424164 0 ]xsh
265.662 257.605 mo
265.662 258.956 264.562 260.055 263.212 260.055 cv
261.862 260.055 260.762 258.956 260.762 257.605 cv
260.762 256.255 261.862 255.156 263.212 255.156 cv
264.562 255.156 265.662 256.255 265.662 257.605 cv
cp
0 0 0 .71875 cmyk
@
265.662 257.605 mo
265.662 258.956 264.562 260.055 263.212 260.055 cv
261.862 260.055 260.762 258.956 260.762 257.605 cv
260.762 256.255 261.862 255.156 263.212 255.156 cv
264.562 255.156 265.662 256.255 265.662 257.605 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
261.302 258.095 mo
(171.0)
[.848358 .848328 .848358 .424164 0 ]xsh
278.702 247.365 mo
278.702 248.716 277.602 249.815 276.252 249.815 cv
274.902 249.815 273.812 248.716 273.812 247.365 cv
273.812 246.016 274.902 244.916 276.252 244.916 cv
277.602 244.916 278.702 246.016 278.702 247.365 cv
cp
0 0 0 .71875 cmyk
@
278.702 247.365 mo
278.702 248.716 277.602 249.815 276.252 249.815 cv
274.902 249.815 273.812 248.716 273.812 247.365 cv
273.812 246.016 274.902 244.916 276.252 244.916 cv
277.602 244.916 278.702 246.016 278.702 247.365 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
274.342 247.855 mo
(173.0)
[.848358 .848328 .848358 .424164 0 ]xsh
267.022 242.365 mo
267.022 243.725 265.932 244.815 264.582 244.815 cv
263.222 244.815 262.132 243.725 262.132 242.365 cv
262.132 241.016 263.222 239.925 264.582 239.925 cv
265.932 239.925 267.022 241.016 267.022 242.365 cv
cp
0 0 0 .71875 cmyk
@
267.022 242.365 mo
267.022 243.725 265.932 244.815 264.582 244.815 cv
263.222 244.815 262.132 243.725 262.132 242.365 cv
262.132 241.016 263.222 239.925 264.582 239.925 cv
265.932 239.925 267.022 241.016 267.022 242.365 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
262.672 242.865 mo
(162.0)
[.848358 .848328 .848358 .424164 0 ]xsh
271.222 263.646 mo
271.222 265.005 270.122 266.095 268.772 266.095 cv
267.422 266.095 266.322 265.005 266.322 263.646 cv
266.322 262.295 267.422 261.206 268.772 261.206 cv
270.122 261.206 271.222 262.295 271.222 263.646 cv
cp
0 0 0 .71875 cmyk
@
271.222 263.646 mo
271.222 265.005 270.122 266.095 268.772 266.095 cv
267.422 266.095 266.322 265.005 266.322 263.646 cv
266.322 262.295 267.422 261.206 268.772 261.206 cv
270.122 261.206 271.222 262.295 271.222 263.646 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
266.862 264.145 mo
(172.0)
[.848358 .848328 .848358 .424835 0 ]xsh
273.252 290.755 mo
273.252 292.105 272.152 293.195 270.802 293.195 cv
269.452 293.195 268.352 292.105 268.352 290.755 cv
268.352 289.395 269.452 288.305 270.802 288.305 cv
272.152 288.305 273.252 289.395 273.252 290.755 cv
cp
0 0 0 .71875 cmyk
@
273.252 290.755 mo
273.252 292.105 272.152 293.195 270.802 293.195 cv
269.452 293.195 268.352 292.105 268.352 290.755 cv
268.352 289.395 269.452 288.305 270.802 288.305 cv
272.152 288.305 273.252 289.395 273.252 290.755 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
268.892 291.245 mo
(168.0)
[.848358 .848328 .848358 .424164 0 ]xsh
276.122 283.325 mo
276.122 284.675 275.022 285.765 273.672 285.765 cv
272.322 285.765 271.222 284.675 271.222 283.325 cv
271.222 281.975 272.322 280.875 273.672 280.875 cv
275.022 280.875 276.122 281.975 276.122 283.325 cv
cp
0 0 0 .71875 cmyk
@
276.122 283.325 mo
276.122 284.675 275.022 285.765 273.672 285.765 cv
272.322 285.765 271.222 284.675 271.222 283.325 cv
271.222 281.975 272.322 280.875 273.672 280.875 cv
275.022 280.875 276.122 281.975 276.122 283.325 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
271.762 283.815 mo
(169.0)
[.848358 .848328 .848358 .424835 0 ]xsh
254.612 277.605 mo
254.612 278.956 253.512 280.055 252.162 280.055 cv
250.812 280.055 249.712 278.956 249.712 277.605 cv
249.712 276.255 250.812 275.156 252.162 275.156 cv
253.512 275.156 254.612 276.255 254.612 277.605 cv
cp
0 0 0 .71875 cmyk
@
254.612 277.605 mo
254.612 278.956 253.512 280.055 252.162 280.055 cv
250.812 280.055 249.712 278.956 249.712 277.605 cv
249.712 276.255 250.812 275.156 252.162 275.156 cv
253.512 275.156 254.612 276.255 254.612 277.605 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
250.252 278.095 mo
(170.0)
[.848358 .848328 .848358 .424164 0 ]xsh
261.362 293.315 mo
261.362 294.665 260.262 295.765 258.912 295.765 cv
257.562 295.765 256.462 294.665 256.462 293.315 cv
256.462 291.965 257.562 290.865 258.912 290.865 cv
260.262 290.865 261.362 291.965 261.362 293.315 cv
cp
0 0 0 .71875 cmyk
@
261.362 293.315 mo
261.362 294.665 260.262 295.765 258.912 295.765 cv
257.562 295.765 256.462 294.665 256.462 293.315 cv
256.462 291.965 257.562 290.865 258.912 290.865 cv
260.262 290.865 261.362 291.965 261.362 293.315 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
257.002 293.805 mo
(166.0)
[.848358 .848328 .848358 .424164 0 ]xsh
272.592 299.075 mo
272.592 300.425 271.492 301.525 270.142 301.525 cv
268.792 301.525 267.692 300.425 267.692 299.075 cv
267.692 297.725 268.792 296.625 270.142 296.625 cv
271.492 296.625 272.592 297.725 272.592 299.075 cv
cp
0 0 0 .71875 cmyk
@
272.592 299.075 mo
272.592 300.425 271.492 301.525 270.142 301.525 cv
268.792 301.525 267.692 300.425 267.692 299.075 cv
267.692 297.725 268.792 296.625 270.142 296.625 cv
271.492 296.625 272.592 297.725 272.592 299.075 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
268.232 299.565 mo
(167.0)
[.848358 .848328 .848358 .424164 0 ]xsh
270.062 279.655 mo
270.062 281.005 268.962 282.105 267.612 282.105 cv
266.262 282.105 265.162 281.005 265.162 279.655 cv
265.162 278.305 266.262 277.206 267.612 277.206 cv
268.962 277.206 270.062 278.305 270.062 279.655 cv
cp
0 0 0 .71875 cmyk
@
270.062 279.655 mo
270.062 281.005 268.962 282.105 267.612 282.105 cv
266.262 282.105 265.162 281.005 265.162 279.655 cv
265.162 278.305 266.262 277.206 267.612 277.206 cv
268.962 277.206 270.062 278.305 270.062 279.655 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
265.702 280.145 mo
(165.0)
[.848358 .848328 .848358 .424164 0 ]xsh
262.492 269.625 mo
262.492 270.975 261.392 272.075 260.042 272.075 cv
258.692 272.075 257.592 270.975 257.592 269.625 cv
257.592 268.275 258.692 267.175 260.042 267.175 cv
261.392 267.175 262.492 268.275 262.492 269.625 cv
cp
0 0 0 .71875 cmyk
@
262.492 269.625 mo
262.492 270.975 261.392 272.075 260.042 272.075 cv
258.692 272.075 257.592 270.975 257.592 269.625 cv
257.592 268.275 258.692 267.175 260.042 267.175 cv
261.392 267.175 262.492 268.275 262.492 269.625 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
258.132 270.115 mo
(164.0)
[.848358 .848328 .848358 .424164 0 ]xsh
237.952 212.175 mo
237.952 213.525 236.862 214.625 235.512 214.625 cv
234.152 214.625 233.062 213.525 233.062 212.175 cv
233.062 210.825 234.152 209.725 235.512 209.725 cv
236.862 209.725 237.952 210.825 237.952 212.175 cv
cp
0 0 0 .71875 cmyk
@
237.952 212.175 mo
237.952 213.525 236.862 214.625 235.512 214.625 cv
234.152 214.625 233.062 213.525 233.062 212.175 cv
233.062 210.825 234.152 209.725 235.512 209.725 cv
236.862 209.725 237.952 210.825 237.952 212.175 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
234.022 212.665 mo
(10.0)
[.848358 .848328 .424164 0 ]xsh
234.452 215.795 mo
234.452 217.146 233.362 218.235 232.012 218.235 cv
230.652 218.235 229.562 217.146 229.562 215.795 cv
229.562 214.435 230.652 213.345 232.012 213.345 cv
233.362 213.345 234.452 214.435 234.452 215.795 cv
cp
0 0 0 .71875 cmyk
@
234.452 215.795 mo
234.452 217.146 233.362 218.235 232.012 218.235 cv
230.652 218.235 229.562 217.146 229.562 215.795 cv
229.562 214.435 230.652 213.345 232.012 213.345 cv
233.362 213.345 234.452 214.435 234.452 215.795 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
230.102 216.285 mo
(174.0)
[.848358 .848328 .848358 .424164 0 ]xsh
260.782 191.135 mo
260.782 192.485 259.682 193.585 258.332 193.585 cv
256.982 193.585 255.882 192.485 255.882 191.135 cv
255.882 189.785 256.982 188.685 258.332 188.685 cv
259.682 188.685 260.782 189.785 260.782 191.135 cv
cp
0 0 0 .71875 cmyk
@
260.782 191.135 mo
260.782 192.485 259.682 193.585 258.332 193.585 cv
256.982 193.585 255.882 192.485 255.882 191.135 cv
255.882 189.785 256.982 188.685 258.332 188.685 cv
259.682 188.685 260.782 189.785 260.782 191.135 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
256.842 191.625 mo
(11.0)
[.848358 .848328 .424164 0 ]xsh
297.662 206.325 mo
297.662 207.675 296.572 208.766 295.222 208.766 cv
293.862 208.766 292.772 207.675 292.772 206.325 cv
292.772 204.966 293.862 203.875 295.222 203.875 cv
296.572 203.875 297.662 204.966 297.662 206.325 cv
cp
0 0 0 .71875 cmyk
@
297.662 206.325 mo
297.662 207.675 296.572 208.766 295.222 208.766 cv
293.862 208.766 292.772 207.675 292.772 206.325 cv
292.772 204.966 293.862 203.875 295.222 203.875 cv
296.572 203.875 297.662 204.966 297.662 206.325 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
293.312 206.815 mo
(183.0)
[.848358 .848328 .848358 .424835 0 ]xsh
275.292 198.595 mo
275.292 199.945 274.192 201.045 272.842 201.045 cv
271.492 201.045 270.392 199.945 270.392 198.595 cv
270.392 197.245 271.492 196.156 272.842 196.156 cv
274.192 196.156 275.292 197.245 275.292 198.595 cv
cp
0 0 0 .71875 cmyk
@
275.292 198.595 mo
275.292 199.945 274.192 201.045 272.842 201.045 cv
271.492 201.045 270.392 199.945 270.392 198.595 cv
270.392 197.245 271.492 196.156 272.842 196.156 cv
274.192 196.156 275.292 197.245 275.292 198.595 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
271.362 199.085 mo
(12.0)
[.848358 .848328 .424164 0 ]xsh
257.902 204.325 mo
257.902 205.675 256.802 206.775 255.452 206.775 cv
254.102 206.775 253.002 205.675 253.002 204.325 cv
253.002 202.975 254.102 201.875 255.452 201.875 cv
256.802 201.875 257.902 202.975 257.902 204.325 cv
cp
0 0 0 .71875 cmyk
@
257.902 204.325 mo
257.902 205.675 256.802 206.775 255.452 206.775 cv
254.102 206.775 253.002 205.675 253.002 204.325 cv
253.002 202.975 254.102 201.875 255.452 201.875 cv
256.802 201.875 257.902 202.975 257.902 204.325 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
253.542 204.815 mo
(186.0)
[.848358 .848328 .848343 .424164 0 ]xsh
280.412 221.745 mo
280.412 223.105 279.312 224.195 277.962 224.195 cv
276.612 224.195 275.522 223.105 275.522 221.745 cv
275.522 220.396 276.612 219.305 277.962 219.305 cv
279.312 219.305 280.412 220.396 280.412 221.745 cv
cp
0 0 0 .71875 cmyk
@
280.412 221.745 mo
280.412 223.105 279.312 224.195 277.962 224.195 cv
276.612 224.195 275.522 223.105 275.522 221.745 cv
275.522 220.396 276.612 219.305 277.962 219.305 cv
279.312 219.305 280.412 220.396 280.412 221.745 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
276.052 222.245 mo
(185.0)
[.848358 .848328 .848358 .424164 0 ]xsh
232.272 229.216 mo
232.272 230.575 231.182 231.666 229.832 231.666 cv
228.472 231.666 227.382 230.575 227.382 229.216 cv
227.382 227.865 228.472 226.775 229.832 226.775 cv
231.182 226.775 232.272 227.865 232.272 229.216 cv
cp
0 0 0 .71875 cmyk
@
232.272 229.216 mo
232.272 230.575 231.182 231.666 229.832 231.666 cv
228.472 231.666 227.382 230.575 227.382 229.216 cv
227.382 227.865 228.472 226.775 229.832 226.775 cv
231.182 226.775 232.272 227.865 232.272 229.216 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
228.772 229.715 mo
(9.0)
[.848358 .424164 0 ]xsh
332.702 168.505 mo
332.702 169.855 331.612 170.956 330.262 170.956 cv
328.902 170.956 327.812 169.855 327.812 168.505 cv
327.812 167.156 328.902 166.055 330.262 166.055 cv
331.612 166.055 332.702 167.156 332.702 168.505 cv
cp
0 0 0 .71875 cmyk
@
332.702 168.505 mo
332.702 169.855 331.612 170.956 330.262 170.956 cv
328.902 170.956 327.812 169.855 327.812 168.505 cv
327.812 167.156 328.902 166.055 330.262 166.055 cv
331.612 166.055 332.702 167.156 332.702 168.505 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
328.772 168.995 mo
(20.0)
[.848358 .848328 .424164 0 ]xsh
313.742 155.875 mo
313.742 157.225 312.642 158.325 311.292 158.325 cv
309.942 158.325 308.842 157.225 308.842 155.875 cv
308.842 154.525 309.942 153.425 311.292 153.425 cv
312.642 153.425 313.742 154.525 313.742 155.875 cv
cp
0 0 0 .71875 cmyk
@
313.742 155.875 mo
313.742 157.225 312.642 158.325 311.292 158.325 cv
309.942 158.325 308.842 157.225 308.842 155.875 cv
308.842 154.525 309.942 153.425 311.292 153.425 cv
312.642 153.425 313.742 154.525 313.742 155.875 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
309.802 156.365 mo
(24.0)
[.848358 .848328 .424164 0 ]xsh
328.112 153.295 mo
328.112 154.646 327.012 155.745 325.662 155.745 cv
324.312 155.745 323.212 154.646 323.212 153.295 cv
323.212 151.945 324.312 150.845 325.662 150.845 cv
327.012 150.845 328.112 151.945 328.112 153.295 cv
cp
0 0 0 .71875 cmyk
@
328.112 153.295 mo
328.112 154.646 327.012 155.745 325.662 155.745 cv
324.312 155.745 323.212 154.646 323.212 153.295 cv
323.212 151.945 324.312 150.845 325.662 150.845 cv
327.012 150.845 328.112 151.945 328.112 153.295 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
324.182 153.785 mo
(22.0)
[.848358 .848328 .424164 0 ]xsh
335.622 159.575 mo
335.622 160.925 334.522 162.025 333.172 162.025 cv
331.822 162.025 330.722 160.925 330.722 159.575 cv
330.722 158.225 331.822 157.125 333.172 157.125 cv
334.522 157.125 335.622 158.225 335.622 159.575 cv
cp
0 0 0 .71875 cmyk
@
335.622 159.575 mo
335.622 160.925 334.522 162.025 333.172 162.025 cv
331.822 162.025 330.722 160.925 330.722 159.575 cv
330.722 158.225 331.822 157.125 333.172 157.125 cv
334.522 157.125 335.622 158.225 335.622 159.575 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
331.682 160.065 mo
(21.0)
[.848358 .848328 .424164 0 ]xsh
343.992 157.095 mo
343.992 158.445 342.902 159.545 341.542 159.545 cv
340.192 159.545 339.102 158.445 339.102 157.095 cv
339.102 155.745 340.192 154.656 341.542 154.656 cv
342.902 154.656 343.992 155.745 343.992 157.095 cv
cp
0 0 0 .71875 cmyk
@
343.992 157.095 mo
343.992 158.445 342.902 159.545 341.542 159.545 cv
340.192 159.545 339.102 158.445 339.102 157.095 cv
339.102 155.745 340.192 154.656 341.542 154.656 cv
342.902 154.656 343.992 155.745 343.992 157.095 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
340.062 157.585 mo
(19.0)
[.848358 .848328 .424164 0 ]xsh
322.812 161.885 mo
322.812 163.235 321.712 164.335 320.362 164.335 cv
319.012 164.335 317.912 163.235 317.912 161.885 cv
317.912 160.535 319.012 159.435 320.362 159.435 cv
321.712 159.435 322.812 160.535 322.812 161.885 cv
cp
0 0 0 .71875 cmyk
@
322.812 161.885 mo
322.812 163.235 321.712 164.335 320.362 164.335 cv
319.012 164.335 317.912 163.235 317.912 161.885 cv
317.912 160.535 319.012 159.435 320.362 159.435 cv
321.712 159.435 322.812 160.535 322.812 161.885 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
318.872 162.375 mo
(18.0)
[.848358 .848328 .424164 0 ]xsh
308.322 175.795 mo
308.322 177.156 307.222 178.245 305.872 178.245 cv
304.522 178.245 303.422 177.156 303.422 175.795 cv
303.422 174.445 304.522 173.355 305.872 173.355 cv
307.222 173.355 308.322 174.445 308.322 175.795 cv
cp
0 0 0 .71875 cmyk
@
308.322 175.795 mo
308.322 177.156 307.222 178.245 305.872 178.245 cv
304.522 178.245 303.422 177.156 303.422 175.795 cv
303.422 174.445 304.522 173.355 305.872 173.355 cv
307.222 173.355 308.322 174.445 308.322 175.795 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
304.382 176.295 mo
(17.0)
[.848358 .848328 .424164 0 ]xsh
278.892 151.425 mo
278.892 152.775 277.792 153.875 276.442 153.875 cv
275.092 153.875 273.992 152.775 273.992 151.425 cv
273.992 150.075 275.092 148.975 276.442 148.975 cv
277.792 148.975 278.892 150.075 278.892 151.425 cv
cp
0 0 0 .71875 cmyk
@
278.892 151.425 mo
278.892 152.775 277.792 153.875 276.442 153.875 cv
275.092 153.875 273.992 152.775 273.992 151.425 cv
273.992 150.075 275.092 148.975 276.442 148.975 cv
277.792 148.975 278.892 150.075 278.892 151.425 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
274.952 151.915 mo
(14.0)
[.848358 .848328 .424164 0 ]xsh
270.072 159.845 mo
270.072 161.206 268.972 162.295 267.622 162.295 cv
266.272 162.295 265.172 161.206 265.172 159.845 cv
265.172 158.495 266.272 157.406 267.622 157.406 cv
268.972 157.406 270.072 158.495 270.072 159.845 cv
cp
0 0 0 .71875 cmyk
@
270.072 159.845 mo
270.072 161.206 268.972 162.295 267.622 162.295 cv
266.272 162.295 265.172 161.206 265.172 159.845 cv
265.172 158.495 266.272 157.406 267.622 157.406 cv
268.972 157.406 270.072 158.495 270.072 159.845 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
266.132 160.345 mo
(27.0)
[.848358 .848328 .424164 0 ]xsh
298.132 144.625 mo
298.132 145.975 297.032 147.075 295.682 147.075 cv
294.332 147.075 293.232 145.975 293.232 144.625 cv
293.232 143.275 294.332 142.175 295.682 142.175 cv
297.032 142.175 298.132 143.275 298.132 144.625 cv
cp
0 0 0 .71875 cmyk
@
298.132 144.625 mo
298.132 145.975 297.032 147.075 295.682 147.075 cv
294.332 147.075 293.232 145.975 293.232 144.625 cv
293.232 143.275 294.332 142.175 295.682 142.175 cv
297.032 142.175 298.132 143.275 298.132 144.625 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
294.202 145.115 mo
(25.0)
[.848358 .848328 .424164 0 ]xsh
301.612 179.206 mo
301.612 180.555 300.512 181.656 299.162 181.656 cv
297.812 181.656 296.712 180.555 296.712 179.206 cv
296.712 177.855 297.812 176.755 299.162 176.755 cv
300.512 176.755 301.612 177.855 301.612 179.206 cv
cp
0 0 0 .71875 cmyk
@
301.612 179.206 mo
301.612 180.555 300.512 181.656 299.162 181.656 cv
297.812 181.656 296.712 180.555 296.712 179.206 cv
296.712 177.855 297.812 176.755 299.162 176.755 cv
300.512 176.755 301.612 177.855 301.612 179.206 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
297.672 179.695 mo
(23.0)
[.848358 .848328 .424164 0 ]xsh
276.142 168.285 mo
276.142 169.635 275.042 170.735 273.692 170.735 cv
272.342 170.735 271.242 169.635 271.242 168.285 cv
271.242 166.935 272.342 165.835 273.692 165.835 cv
275.042 165.835 276.142 166.935 276.142 168.285 cv
cp
0 0 0 .71875 cmyk
@
276.142 168.285 mo
276.142 169.635 275.042 170.735 273.692 170.735 cv
272.342 170.735 271.242 169.635 271.242 168.285 cv
271.242 166.935 272.342 165.835 273.692 165.835 cv
275.042 165.835 276.142 166.935 276.142 168.285 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
272.212 168.775 mo
(16.0)
[.848358 .848328 .424164 0 ]xsh
300.792 168.966 mo
300.792 170.325 299.692 171.416 298.342 171.416 cv
296.992 171.416 295.892 170.325 295.892 168.966 cv
295.892 167.615 296.992 166.525 298.342 166.525 cv
299.692 166.525 300.792 167.615 300.792 168.966 cv
cp
0 0 0 .71875 cmyk
@
300.792 168.966 mo
300.792 170.325 299.692 171.416 298.342 171.416 cv
296.992 171.416 295.892 170.325 295.892 168.966 cv
295.892 167.615 296.992 166.525 298.342 166.525 cv
299.692 166.525 300.792 167.615 300.792 168.966 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
296.852 169.465 mo
(15.0)
[.848358 .848328 .424164 0 ]xsh
295.862 164.775 mo
295.862 166.125 294.762 167.216 293.412 167.216 cv
292.062 167.216 290.962 166.125 290.962 164.775 cv
290.962 163.416 292.062 162.325 293.412 162.325 cv
294.762 162.325 295.862 163.416 295.862 164.775 cv
cp
0 0 0 .71875 cmyk
@
295.862 164.775 mo
295.862 166.125 294.762 167.216 293.412 167.216 cv
292.062 167.216 290.962 166.125 290.962 164.775 cv
290.962 163.416 292.062 162.325 293.412 162.325 cv
294.762 162.325 295.862 163.416 295.862 164.775 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
291.932 165.265 mo
(26.0)
[.848358 .848328 .424164 0 ]xsh
289.672 175.935 mo
289.672 177.285 288.582 178.385 287.222 178.385 cv
285.872 178.385 284.782 177.285 284.782 175.935 cv
284.782 174.585 285.872 173.485 287.222 173.485 cv
288.582 173.485 289.672 174.585 289.672 175.935 cv
cp
0 0 0 .71875 cmyk
@
289.672 175.935 mo
289.672 177.285 288.582 178.385 287.222 178.385 cv
285.872 178.385 284.782 177.285 284.782 175.935 cv
284.782 174.585 285.872 173.485 287.222 173.485 cv
288.582 173.485 289.672 174.585 289.672 175.935 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
UOXUCN+ArialMT*1 [1.5258 0 0 -1.5258 0 0 ]msf
285.742 176.425 mo
(13.0)
[.848358 .848328 .424164 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/UOXUCN+ArialMT*1 uf
/UOXUCN+ArialMT uf
/KRBBAA+ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
