%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9RCE37.tmp.pdf
%%Creator: Adobe Acrobat 10.1.2
%%For: Administrator
%%CreationDate: 2012-3-26, 20:21:30
%%BoundingBox: 0 0 248 153
%%HiResBoundingBox: 0 0 247.4181 152.8364
%%CropBox: 0 0 247.4181 152.8364
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 852 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2012-03-26T20:20:53+08:00"
   xmp:CreateDate="2012-03-26T20:20:53+08:00"
   xmp:MetadataDate="2012-03-26T20:20:53+08:00"
   xmp:CreatorTool="LaTeX with hyperref package"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:e1daf7e4-afaa-4dd4-b5b8-441f9900811d"
   xmpMM:InstanceID="uuid:df22c77c-bcdb-4a73-96ad-6e777a3acb30"
   pdf:Producer="dvips + GPL Ghostscript SVN PRE-RELEASE 8.62"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -152.836 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 152.836 li
247.418 152.836 li
247.418 0 li
cp
clp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: DMSAAA+CMR10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /DMSAAA+CMR10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /four put
def
/FontBBox {-40 -250 1009 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 448 666 677] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [69] def
/StemSnapH [22 31] def
/StemSnapV [69 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/four <1C60D8A8C9B7A73DC579B9C1587087D4749982A674065F9D4190A646C
4B6AEC0EE9FA16CBD7A614FBA5C7797971DF7C6EA57394603F00B98324AF84E1
D747CBDA8BF6ACE99B270F3634D0598A7799230B2FA53F37697C8FB04996EB79
CA1E39DB1488D8A5A85F57D049C7AE31C6F8A6F15F2EE8FAE7CD4D80767B9> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/NCPDHG+CMR10 /DMSAAA+CMR10 findfont ct_VMDictPut
/NCPDHG+CMR10*1 
[52{/.notdef}rp /four 203{/.notdef}rp]
NCPDHG+CMR10 nf
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
506.433 -6.75269 mo
(4)sh
12.875 147.814 mo
238.62 147.814 li
238.62 17.3143 li
12.875 17.3143 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
gsave
12.875 17.3143 mo
238.62 17.3143 li
238.62 147.814 li
12.875 147.814 li
12.875 17.3143 li
cp
clp
104.464 48.7913 mo
92.5297 73.7643 li
92.9137 73.9473 li
104.847 48.9743 li
104.464 48.7913 li
1 /0 /CSD get_res sepcs
1 sep
f
127.828 59.9743 mo
94.6407 75.6802 li
94.8227 76.0643 li
128.01 60.3583 li
127.828 59.9743 li
f
128.099 56.1802 mo
110.35 46.8393 li
110.152 47.2153 li
127.901 56.5563 li
128.099 56.1802 li
f
95.0007 31.1153 mo
91.0697 73.4383 li
91.4937 73.4773 li
95.4238 31.1543 li
95.0007 31.1153 li
f
97.6097 30.6573 mo
104.119 41.5113 li
104.484 41.2933 li
97.9737 30.4383 li
97.6097 30.6573 li
f
98.6738 29.8523 mo
128.414 55.7183 li
128.694 55.3983 li
98.9527 29.5323 li
98.6738 29.8523 li
f
79.6407 99.1613 mo
89.0707 81.5393 li
88.6957 81.3383 li
79.2667 98.9612 li
79.6407 99.1613 li
f
58.4997 108.96 mo
87.9637 80.7823 li
87.6697 80.4753 li
58.2067 108.652 li
58.4997 108.96 li
f
55.5608 84.4713 mo
86.7477 78.6763 li
86.6697 78.2583 li
55.4827 84.0543 li
55.5608 84.4713 li
f
54.7367 87.6072 mo
73.8138 100.592 li
74.0538 100.241 li
54.9758 87.2563 li
54.7367 87.6072 li
f
51.7518 89.2753 mo
54.4508 107.57 li
54.8708 107.508 li
52.1728 89.2133 li
51.7518 89.2753 li
f
86.4847 49.5253 mo
90.0527 73.5173 li
90.4737 73.4553 li
86.9057 49.4623 li
86.4847 49.5253 li
f
90.3237 45.4513 mo
102.24 45.3103 li
102.235 44.8853 li
90.3187 45.0263 li
90.3237 45.4513 li
f
90.0987 46.6613 mo
127.616 57.3843 li
127.733 56.9753 li
90.2157 46.2532 li
90.0987 46.6613 li
f
88.2157 41.6133 mo
93.8367 30.7743 li
93.4597 30.5782 li
87.8387 41.4173 li
88.2157 41.6133 li
f
143.565 89.3093 mo
95.0837 78.4153 li
94.9897 78.8303 li
143.472 89.7243 li
143.565 89.3093 li
f
145.842 86.1263 mo
133.848 62.0573 li
133.468 62.2473 li
145.461 86.3163 li
145.842 86.1263 li
f
158.761 28.2473 mo
134.459 55.0552 li
134.775 55.3413 li
159.076 28.5323 li
158.761 28.2473 li
f
81.2388 125.002 mo
90.2287 81.8953 li
89.8127 81.8093 li
80.8217 124.916 li
81.2388 125.002 li
f
79.9377 124.87 mo
78.0957 107.015 li
77.6727 107.059 li
79.5148 124.914 li
79.9377 124.87 li
f
76.7988 126.512 mo
58.8877 114.004 li
58.6447 114.352 li
76.5547 126.861 li
76.7988 126.512 li
f
109.128 111.673 mo
93.0667 81.3483 li
92.6908 81.5473 li
108.753 111.872 li
109.128 111.673 li
f
56.9327 46.8403 mo
87.6117 74.9743 li
87.8997 74.6613 li
57.2197 46.5273 li
56.9327 46.8403 li
f
57.9618 42.4092 mo
91.7457 28.6983 li
91.5857 28.3043 li
57.8018 42.0153 li
57.9618 42.4092 li
f
130.514 32.4693 mo
93.5427 74.3633 li
93.8607 74.6443 li
130.833 32.7503 li
130.514 32.4693 li
f
129.701 31.3683 mo
110.061 42.7343 li
110.274 43.1023 li
129.914 31.7363 li
129.701 31.3683 li
f
133.021 33.6533 mo
131.803 54.0913 li
132.227 54.1172 li
133.446 33.6793 li
133.021 33.6533 li
f
129.259 28.9283 mo
99.8607 26.9723 li
99.8337 27.3973 li
129.231 29.3523 li
129.259 28.9283 li
f
22.2918 106.048 mo
51.0587 111.204 li
51.1337 110.785 li
22.3672 105.63 li
22.2918 106.048 li
f
21.8934 103.073 mo
47.8125 87.4193 li
47.593 87.0552 li
21.674 102.709 li
21.8934 103.073 li
f
66.5368 26.6723 mo
88.8797 73.9383 li
89.2637 73.7573 li
66.9217 26.4903 li
66.5368 26.6723 li
f
68.5577 24.9363 mo
102.642 43.2243 li
102.843 42.8503 li
68.7588 24.5613 li
68.5577 24.9363 li
f
120.975 75.4703 mo
95.1167 77.1953 li
95.1447 77.6203 li
121.003 75.8953 li
120.975 75.4703 li
f
123.178 71.6713 mo
108.903 48.5533 li
108.541 48.7763 li
122.816 71.8943 li
123.178 71.6713 li
f
64.2998 69.3003 mo
86.7787 76.5823 li
86.9097 76.1783 li
64.4307 68.8953 li
64.2998 69.3003 li
f
64.2288 66.1003 mo
102.769 47.1163 li
102.581 46.7353 li
64.0408 65.7183 li
64.2288 66.1003 li
f
186.393 138.34 mo
198.4 112.969 li
198.015 112.787 li
186.009 138.159 li
186.393 138.34 li
f
179.947 142.118 mo
160.857 141.357 li
160.84 141.782 li
179.93 142.543 li
179.947 142.118 li
f
174.191 110.62 mo
134.596 61.5233 li
134.265 61.7903 li
173.86 110.886 li
174.191 110.62 li
f
181.762 114.018 mo
196.025 110.023 li
195.911 109.613 li
181.648 113.608 li
181.762 114.018 li
f
173.928 119.123 mo
159.789 137.017 li
160.123 137.281 li
174.262 119.386 li
173.928 119.123 li
f
167.493 85.8143 mo
135.25 60.7863 li
134.99 61.1223 li
167.232 86.1503 li
167.493 85.8143 li
f
229.955 66.4323 mo
203.068 104.253 li
203.414 104.5 li
230.302 66.6783 li
229.955 66.4323 li
f
232.342 58.0043 mo
227.751 38.7823 li
227.337 38.8813 li
231.928 58.1023 li
232.342 58.0043 li
f
149.887 54.1823 mo
110.689 45.7353 li
110.599 46.1503 li
149.796 54.5983 li
149.887 54.1823 li
f
153.119 59.5193 mo
148.325 86.1833 li
148.744 86.2593 li
153.538 59.5953 li
153.119 59.5193 li
f
147.791 105.744 mo
94.7908 79.3933 li
94.6008 79.7733 li
147.601 106.124 li
147.791 105.744 li
f
152.329 112.328 mo
155.794 137.178 li
156.215 137.12 li
152.75 112.269 li
152.329 112.328 li
f
155.77 112.444 mo
180.056 138.395 li
180.367 138.104 li
156.081 112.154 li
155.77 112.444 li
f
156.345 104.145 mo
167.509 93.4922 li
167.216 93.1843 li
156.052 103.838 li
156.345 104.145 li
f
188.382 76.1953 mo
135.877 59.4383 li
135.747 59.8433 li
188.252 76.6003 li
188.382 76.1953 li
f
188.259 78.7563 mo
151.963 89.0603 li
152.079 89.4693 li
188.375 79.1653 li
188.259 78.7563 li
f
196.967 73.8073 mo
210.093 61.1503 li
209.798 60.8443 li
196.672 73.5023 li
196.967 73.8073 li
f
193.994 73.5623 mo
206.064 31.5423 li
205.655 31.4253 li
193.585 73.4453 li
193.994 73.5623 li
f
196.68 81.5913 mo
215.671 98.0153 li
215.949 97.6933 li
196.959 81.2703 li
196.68 81.5913 li
f
196.782 78.7203 mo
228.643 84.3882 li
228.718 83.9693 li
196.857 78.3013 li
196.782 78.7203 li
f
192.263 73.4773 mo
186.731 27.9143 li
186.309 27.9653 li
191.841 73.5293 li
192.263 73.4773 li
f
193.416 82.0563 mo
198.959 104.428 li
199.372 104.325 li
193.828 81.9543 li
193.416 82.0563 li
f
196.895 76.3343 mo
228.975 64.1213 li
228.823 63.7243 li
196.744 75.9373 li
196.895 76.3343 li
f
188.424 75.0903 mo
158.452 57.6033 li
158.237 57.9703 li
188.21 75.4573 li
188.424 75.0903 li
f
188.19 80.7543 mo
156.071 104.707 li
156.326 105.048 li
188.444 81.0953 li
188.19 80.7543 li
f
179.305 68.9173 mo
151.902 87.4243 li
152.14 87.7773 li
179.543 69.2693 li
179.305 68.9173 li
f
181.755 61.8763 mo
165.074 28.2953 li
164.693 28.4843 li
181.374 62.0663 li
181.755 61.8763 li
f
179.55 62.9333 mo
137.041 31.7653 li
136.789 32.1072 li
179.299 63.2763 li
179.55 62.9333 li
f
187.989 65.1263 mo
210.008 58.3993 li
209.884 57.9933 li
187.865 64.7203 li
187.989 65.1263 li
f
186.41 62.0813 mo
204.711 31.5933 li
204.347 31.3743 li
186.045 61.8613 li
186.41 62.0813 li
f
187.779 70.5003 mo
215.662 97.5573 li
215.958 97.2523 li
188.075 70.1953 li
187.779 70.5003 li
f
179.391 66.6793 mo
129.397 74.5303 li
129.464 74.9503 li
179.458 67.0993 li
179.391 66.6793 li
f
187.852 68.0363 mo
228.605 83.5183 li
228.756 83.1213 li
188.003 67.6382 li
187.852 68.0363 li
f
184.121 61.9833 mo
185.984 27.9513 li
185.559 27.9273 li
183.696 61.9593 li
184.121 61.9833 li
f
185.136 70.5503 mo
198.363 104.454 li
198.759 104.299 li
185.532 70.3953 li
185.136 70.5503 li
f
188.053 63.2543 mo
222.404 37.8913 li
222.152 37.5493 li
187.801 62.9123 li
188.053 63.2543 li
f
182.923 70.4463 mo
177.785 110.726 li
178.207 110.78 li
183.344 70.5003 li
182.923 70.4463 li
f
181.264 70.3743 mo
173.649 84.9323 li
174.026 85.1293 li
181.641 70.5713 li
181.264 70.3743 li
f
187.944 66.0973 mo
228.916 62.8523 li
228.882 62.4293 li
187.911 65.6733 li
187.944 66.0973 li
f
179.498 64.4543 mo
158.418 56.6753 li
158.27 57.0743 li
179.351 64.8523 li
179.498 64.4543 li
f
180.282 70.3443 mo
155.003 103.668 li
155.341 103.925 li
180.621 70.6013 li
180.282 70.3443 li
f
186.785 70.6023 mo
189.122 73.6333 li
189.459 73.3733 li
187.122 70.3433 li
186.785 70.6023 li
f
95.1398 77.6913 mo
95.1398 80.0383 93.2367 81.9413 90.8887 81.9413 cv
88.5408 81.9413 86.6377 80.0383 86.6377 77.6913 cv
86.6377 75.3433 88.5408 73.4402 90.8887 73.4402 cv
93.2367 73.4402 95.1398 75.3433 95.1398 77.6913 cv
1 /0 /CSD get_res sepcs
.00781202 sep
f
94.9277 77.6913 mo
94.9277 79.9213 93.1187 81.7293 90.8887 81.7293 cv
88.6587 81.7293 86.8497 79.9213 86.8497 77.6913 cv
86.8497 75.4603 88.6587 73.6523 90.8887 73.6523 cv
93.1187 73.6523 94.9277 75.4603 94.9277 77.6913 cv
cp
95.3528 77.6913 mo
95.3528 75.2253 93.3537 73.2273 90.8887 73.2273 cv
88.4238 73.2273 86.4247 75.2253 86.4247 77.6913 cv
86.4247 80.1563 88.4238 82.1543 90.8887 82.1543 cv
93.3537 82.1543 95.3528 80.1563 95.3528 77.6913 cv
1 /0 /CSD get_res sepcs
1 sep
f
110.74 45.0473 mo
110.74 47.3953 108.836 49.2983 106.488 49.2983 cv
104.141 49.2983 102.237 47.3953 102.237 45.0473 cv
102.237 42.7003 104.141 40.7973 106.488 40.7973 cv
108.836 40.7973 110.74 42.7003 110.74 45.0473 cv
1 /0 /CSD get_res sepcs
.15625 sep
f
110.527 45.0473 mo
110.527 47.2773 108.719 49.0862 106.488 49.0862 cv
104.258 49.0862 102.45 47.2773 102.45 45.0473 cv
102.45 42.8173 104.258 41.0093 106.488 41.0093 cv
108.719 41.0093 110.527 42.8173 110.527 45.0473 cv
cp
110.952 45.0473 mo
110.952 42.5823 108.954 40.5843 106.488 40.5843 cv
104.023 40.5843 102.025 42.5823 102.025 45.0473 cv
102.025 47.5123 104.023 49.5113 106.488 49.5113 cv
108.954 49.5113 110.952 47.5123 110.952 45.0473 cv
1 /0 /CSD get_res sepcs
1 sep
f
136.013 58.3483 mo
136.013 60.6953 134.11 62.5983 131.762 62.5983 cv
129.414 62.5983 127.511 60.6953 127.511 58.3483 cv
127.511 56.0003 129.414 54.0973 131.762 54.0973 cv
134.11 54.0973 136.013 56.0003 136.013 58.3483 cv
1 /0 /CSD get_res sepcs
.330078 sep
f
135.801 58.3483 mo
135.801 60.5782 133.993 62.3863 131.762 62.3863 cv
129.531 62.3863 127.723 60.5782 127.723 58.3483 cv
127.723 56.1172 129.531 54.3093 131.762 54.3093 cv
133.993 54.3093 135.801 56.1172 135.801 58.3483 cv
cp
136.226 58.3483 mo
136.226 55.8823 134.227 53.8843 131.762 53.8843 cv
129.296 53.8843 127.298 55.8823 127.298 58.3483 cv
127.298 60.8133 129.296 62.8113 131.762 62.8113 cv
134.227 62.8113 136.226 60.8133 136.226 58.3483 cv
1 /0 /CSD get_res sepcs
1 sep
f
99.8567 26.9023 mo
99.8567 29.2503 97.9527 31.1533 95.6047 31.1533 cv
93.2567 31.1533 91.3537 29.2503 91.3537 26.9023 cv
91.3537 24.5552 93.2567 22.6523 95.6047 22.6523 cv
97.9527 22.6523 99.8567 24.5552 99.8567 26.9023 cv
1 /0 /CSD get_res sepcs
.175781 sep
f
99.6437 26.9023 mo
99.6437 29.1323 97.8357 30.9413 95.6047 30.9413 cv
93.3747 30.9413 91.5667 29.1323 91.5667 26.9023 cv
91.5667 24.6723 93.3747 22.8643 95.6047 22.8643 cv
97.8357 22.8643 99.6437 24.6723 99.6437 26.9023 cv
cp
100.069 26.9023 mo
100.069 24.4373 98.0707 22.4393 95.6047 22.4393 cv
93.1398 22.4393 91.1417 24.4373 91.1417 26.9023 cv
91.1417 29.3672 93.1398 31.3663 95.6047 31.3663 cv
98.0707 31.3663 100.069 29.3672 100.069 26.9023 cv
1 /0 /CSD get_res sepcs
1 sep
f
81.6998 102.809 mo
81.6998 105.156 79.7957 107.06 77.4477 107.06 cv
75.0998 107.06 73.1967 105.156 73.1967 102.809 cv
73.1967 100.461 75.0998 98.5583 77.4477 98.5583 cv
79.7957 98.5583 81.6998 100.461 81.6998 102.809 cv
1 /0 /CSD get_res sepcs
.330078 sep
f
81.4867 102.809 mo
81.4867 105.039 79.6788 106.847 77.4477 106.847 cv
75.2177 106.847 73.4098 105.039 73.4098 102.809 cv
73.4098 100.579 75.2177 98.7703 77.4477 98.7703 cv
79.6788 98.7703 81.4867 100.579 81.4867 102.809 cv
cp
81.9117 102.809 mo
81.9117 100.344 79.9137 98.3453 77.4477 98.3453 cv
74.9827 98.3453 72.9847 100.344 72.9847 102.809 cv
72.9847 105.274 74.9827 107.272 77.4477 107.272 cv
79.9137 107.272 81.9117 105.274 81.9117 102.809 cv
1 /0 /CSD get_res sepcs
1 sep
f
59.5327 111.744 mo
59.5327 114.092 57.6288 115.995 55.2817 115.995 cv
52.9337 115.995 51.0297 114.092 51.0297 111.744 cv
51.0297 109.397 52.9337 107.493 55.2817 107.493 cv
57.6288 107.493 59.5327 109.397 59.5327 111.744 cv
1 /0 /CSD get_res sepcs
.314453 sep
f
59.3197 111.744 mo
59.3197 113.974 57.5117 115.782 55.2817 115.782 cv
53.0508 115.782 51.2428 113.974 51.2428 111.744 cv
51.2428 109.514 53.0508 107.706 55.2817 107.706 cv
57.5117 107.706 59.3197 109.514 59.3197 111.744 cv
cp
59.7447 111.744 mo
59.7447 109.279 57.7467 107.281 55.2817 107.281 cv
52.8158 107.281 50.8177 109.279 50.8177 111.744 cv
50.8177 114.209 52.8158 116.207 55.2817 116.207 cv
57.7467 116.207 59.7447 114.209 59.7447 111.744 cv
1 /0 /CSD get_res sepcs
1 sep
f
55.5927 85.0393 mo
55.5927 87.3873 53.6898 89.2903 51.3418 89.2903 cv
48.9939 89.2903 47.0903 87.3873 47.0903 85.0393 cv
47.0903 82.6913 48.9939 80.7883 51.3418 80.7883 cv
53.6898 80.7883 55.5927 82.6913 55.5927 85.0393 cv
1 /0 /CSD get_res sepcs
.314453 sep
f
55.3807 85.0393 mo
55.3807 87.2693 53.5727 89.0773 51.3418 89.0773 cv
49.111 89.0773 47.3028 87.2693 47.3028 85.0393 cv
47.3028 82.8093 49.111 81.0013 51.3418 81.0013 cv
53.5727 81.0013 55.3807 82.8093 55.3807 85.0393 cv
cp
55.8057 85.0393 mo
55.8057 82.5743 53.8067 80.5763 51.3418 80.5763 cv
48.8762 80.5763 46.8779 82.5743 46.8779 85.0393 cv
46.8779 87.5043 48.8762 89.5023 51.3418 89.5023 cv
53.8067 89.5023 55.8057 87.5043 55.8057 85.0393 cv
1 /0 /CSD get_res sepcs
1 sep
f
90.3207 45.2893 mo
90.3207 47.6363 88.4177 49.5393 86.0697 49.5393 cv
83.7217 49.5393 81.8187 47.6363 81.8187 45.2893 cv
81.8187 42.9413 83.7217 41.0383 86.0697 41.0383 cv
88.4177 41.0383 90.3207 42.9413 90.3207 45.2893 cv
1 /0 /CSD get_res sepcs
.234375 sep
f
90.1087 45.2893 mo
90.1087 47.5193 88.3008 49.3273 86.0697 49.3273 cv
83.8398 49.3273 82.0317 47.5193 82.0317 45.2893 cv
82.0317 43.0593 83.8398 41.2503 86.0697 41.2503 cv
88.3008 41.2503 90.1087 43.0593 90.1087 45.2893 cv
cp
90.5337 45.2893 mo
90.5337 42.8233 88.5347 40.8253 86.0697 40.8253 cv
83.6047 40.8253 81.6057 42.8233 81.6057 45.2893 cv
81.6057 47.7543 83.6047 49.7523 86.0697 49.7523 cv
88.5347 49.7523 90.5337 47.7543 90.5337 45.2893 cv
1 /0 /CSD get_res sepcs
1 sep
f
143.519 94.7223 mo
152.021 94.7223 li
152.021 86.2208 li
143.519 86.2208 li
cp
1 /0 /CSD get_res sepcs
.568604 sep
f
143.519 86.4333 mo
152.021 86.4333 li
152.021 86.2213 li
151.809 86.2213 li
151.809 94.7223 li
152.021 94.7223 li
152.021 94.5103 li
143.519 94.5103 li
143.519 94.7223 li
143.731 94.7223 li
143.731 86.2213 li
143.519 86.2213 li
143.519 86.4333 li
cp
143.306 86.2213 mo
143.306 94.7223 li
143.519 94.9353 li
152.021 94.9353 li
152.234 94.7223 li
152.234 86.2213 li
152.021 86.0083 li
143.519 86.0083 li
143.306 86.2213 li
1 /0 /CSD get_res sepcs
1 sep
f
158.521 28.3893 mo
167.023 28.3893 li
167.023 19.8878 li
158.521 19.8878 li
cp
1 /0 /CSD get_res sepcs
.560791 sep
f
158.521 20.1003 mo
167.023 20.1003 li
167.023 19.8882 li
166.811 19.8882 li
166.811 28.3893 li
167.023 28.3893 li
167.023 28.1773 li
158.521 28.1773 li
158.521 28.3893 li
158.733 28.3893 li
158.733 19.8882 li
158.521 19.8882 li
158.521 20.1003 li
cp
158.308 19.8882 mo
158.308 28.3893 li
158.521 28.6023 li
167.023 28.6023 li
167.236 28.3893 li
167.236 19.8882 li
167.023 19.6753 li
158.521 19.6753 li
158.308 19.8882 li
1 /0 /CSD get_res sepcs
1 sep
f
84.4137 129.12 mo
84.4137 131.468 82.5107 133.371 80.1617 133.371 cv
77.8138 133.371 75.9108 131.468 75.9108 129.12 cv
75.9108 126.773 77.8138 124.87 80.1617 124.87 cv
82.5107 124.87 84.4137 126.773 84.4137 129.12 cv
1 /0 /CSD get_res sepcs
.330078 sep
f
84.2007 129.12 mo
84.2007 131.351 82.3927 133.159 80.1617 133.159 cv
77.9317 133.159 76.1237 131.351 76.1237 129.12 cv
76.1237 126.89 77.9317 125.082 80.1617 125.082 cv
82.3927 125.082 84.2007 126.89 84.2007 129.12 cv
cp
84.6268 129.12 mo
84.6268 126.656 82.6277 124.657 80.1617 124.657 cv
77.6967 124.657 75.6988 126.656 75.6988 129.12 cv
75.6988 131.586 77.6967 133.584 80.1617 133.584 cv
82.6277 133.584 84.6268 131.586 84.6268 129.12 cv
1 /0 /CSD get_res sepcs
1 sep
f
115.182 115.529 mo
115.182 117.877 113.278 119.78 110.93 119.78 cv
108.582 119.78 106.679 117.877 106.679 115.529 cv
106.679 113.181 108.582 111.278 110.93 111.278 cv
113.278 111.278 115.182 113.181 115.182 115.529 cv
1 /0 /CSD get_res sepcs
.400391 sep
f
114.969 115.529 mo
114.969 117.759 113.161 119.567 110.93 119.567 cv
108.7 119.567 106.891 117.759 106.891 115.529 cv
106.891 113.298 108.7 111.491 110.93 111.491 cv
113.161 111.491 114.969 113.298 114.969 115.529 cv
cp
115.394 115.529 mo
115.394 113.064 113.396 111.066 110.93 111.066 cv
108.465 111.066 106.466 113.064 106.466 115.529 cv
106.466 117.994 108.465 119.992 110.93 119.992 cv
113.396 119.992 115.394 117.994 115.394 115.529 cv
1 /0 /CSD get_res sepcs
1 sep
f
58.1937 43.8113 mo
58.1937 46.1583 56.2908 48.0613 53.9427 48.0613 cv
51.5947 48.0613 49.6917 46.1583 49.6917 43.8113 cv
49.6917 41.4633 51.5947 39.5603 53.9427 39.5603 cv
56.2908 39.5603 58.1937 41.4633 58.1937 43.8113 cv
1 /0 /CSD get_res sepcs
.333984 sep
f
57.9817 43.8113 mo
57.9817 46.0413 56.1738 47.8493 53.9427 47.8493 cv
51.7128 47.8493 49.9047 46.0413 49.9047 43.8113 cv
49.9047 41.5813 51.7128 39.7723 53.9427 39.7723 cv
56.1738 39.7723 57.9817 41.5813 57.9817 43.8113 cv
cp
58.4067 43.8113 mo
58.4067 41.3463 56.4087 39.3473 53.9427 39.3473 cv
51.4777 39.3473 49.4787 41.3463 49.4787 43.8113 cv
49.4787 46.2763 51.4777 48.2743 53.9427 48.2743 cv
56.4087 48.2743 58.4067 46.2763 58.4067 43.8113 cv
1 /0 /CSD get_res sepcs
1 sep
f
137.738 29.4233 mo
137.738 31.7703 135.835 33.6733 133.487 33.6733 cv
131.139 33.6733 129.235 31.7703 129.235 29.4233 cv
129.235 27.0753 131.139 25.1723 133.487 25.1723 cv
135.835 25.1723 137.738 27.0753 137.738 29.4233 cv
1 /0 /CSD get_res sepcs
.326172 sep
f
137.525 29.4233 mo
137.525 31.6533 135.717 33.4612 133.487 33.4612 cv
131.256 33.4612 129.448 31.6533 129.448 29.4233 cv
129.448 27.1923 131.256 25.3843 133.487 25.3843 cv
135.717 25.3843 137.525 27.1923 137.525 29.4233 cv
cp
137.951 29.4233 mo
137.951 26.9573 135.952 24.9593 133.487 24.9593 cv
131.021 24.9593 129.023 26.9573 129.023 29.4233 cv
129.023 31.8882 131.021 33.8863 133.487 33.8863 cv
135.952 33.8863 137.951 31.8882 137.951 29.4233 cv
1 /0 /CSD get_res sepcs
1 sep
f
209.946 61.1483 mo
218.448 61.1483 li
218.448 52.6467 li
209.946 52.6467 li
cp
1 /0 /CSD get_res sepcs
.674561 sep
f
209.946 52.8593 mo
218.448 52.8593 li
218.448 52.6473 li
218.236 52.6473 li
218.236 61.1483 li
218.448 61.1483 li
218.448 60.9363 li
209.946 60.9363 li
209.946 61.1483 li
210.158 61.1483 li
210.158 52.6473 li
209.946 52.6473 li
209.946 52.8593 li
cp
209.733 52.6473 mo
209.733 61.1483 li
209.946 61.3613 li
218.448 61.3613 li
218.661 61.1483 li
218.661 52.6473 li
218.448 52.4343 li
209.946 52.4343 li
209.733 52.6473 li
1 /0 /CSD get_res sepcs
1 sep
f
202.83 31.4833 mo
211.332 31.4833 li
211.332 22.9818 li
202.83 22.9818 li
cp
1 /0 /CSD get_res sepcs
.674561 sep
f
202.83 23.1943 mo
211.332 23.1943 li
211.332 22.9822 li
211.119 22.9822 li
211.119 31.4833 li
211.332 31.4833 li
211.332 31.2713 li
202.83 31.2713 li
202.83 31.4833 li
203.042 31.4833 li
203.042 22.9822 li
202.83 22.9822 li
202.83 23.1943 li
cp
202.617 22.9822 mo
202.617 31.4833 li
202.83 31.6963 li
211.332 31.6963 li
211.545 31.4833 li
211.545 22.9822 li
211.332 22.7693 li
202.83 22.7693 li
202.617 22.9822 li
1 /0 /CSD get_res sepcs
1 sep
f
22.3961 105.089 mo
22.3961 107.437 20.4926 109.34 18.1451 109.34 cv
15.797 109.34 13.8934 107.437 13.8934 105.089 cv
13.8934 102.742 15.797 100.839 18.1451 100.839 cv
20.4926 100.839 22.3961 102.742 22.3961 105.089 cv
1 /0 /CSD get_res sepcs
.423828 sep
f
22.1836 105.089 mo
22.1836 107.32 20.3754 109.128 18.1451 109.128 cv
15.9141 109.128 14.1059 107.32 14.1059 105.089 cv
14.1059 102.859 15.9141 101.051 18.1451 101.051 cv
20.3754 101.051 22.1836 102.859 22.1836 105.089 cv
cp
22.6087 105.089 mo
22.6087 102.624 20.6102 100.626 18.1451 100.626 cv
15.6793 100.626 13.6809 102.624 13.6809 105.089 cv
13.6809 107.554 15.6793 109.553 18.1451 109.553 cv
20.6102 109.553 22.6087 107.554 22.6087 105.089 cv
1 /0 /CSD get_res sepcs
1 sep
f
69.1637 22.7383 mo
69.1637 25.0862 67.2607 26.9893 64.9128 26.9893 cv
62.5648 26.9893 60.6618 25.0862 60.6618 22.7383 cv
60.6618 20.3903 62.5648 18.4873 64.9128 18.4873 cv
67.2607 18.4873 69.1637 20.3903 69.1637 22.7383 cv
1 /0 /CSD get_res sepcs
.330078 sep
f
68.9518 22.7383 mo
68.9518 24.9683 67.1427 26.7763 64.9128 26.7763 cv
62.6817 26.7763 60.8737 24.9683 60.8737 22.7383 cv
60.8737 20.5083 62.6817 18.7003 64.9128 18.7003 cv
67.1427 18.7003 68.9518 20.5083 68.9518 22.7383 cv
cp
69.3768 22.7383 mo
69.3768 20.2733 67.3778 18.2753 64.9128 18.2753 cv
62.4477 18.2753 60.4488 20.2733 60.4488 22.7383 cv
60.4488 25.2032 62.4477 27.2023 64.9128 27.2023 cv
67.3778 27.2023 69.3768 25.2032 69.3768 22.7383 cv
1 /0 /CSD get_res sepcs
1 sep
f
215.81 105.781 mo
224.312 105.781 li
224.312 97.2797 li
215.81 97.2797 li
cp
1 /0 /CSD get_res sepcs
.674561 sep
f
215.81 97.4922 mo
224.313 97.4922 li
224.313 97.2793 li
224.1 97.2793 li
224.1 105.781 li
224.313 105.781 li
224.313 105.568 li
215.81 105.568 li
215.81 105.781 li
216.023 105.781 li
216.023 97.2793 li
215.81 97.2793 li
215.81 97.4922 li
cp
215.598 97.2793 mo
215.598 105.781 li
215.81 105.993 li
224.313 105.993 li
224.525 105.781 li
224.525 97.2793 li
224.313 97.0673 li
215.81 97.0673 li
215.598 97.2793 li
1 /0 /CSD get_res sepcs
1 sep
f
129.482 75.4003 mo
129.482 77.7473 127.578 79.6503 125.231 79.6503 cv
122.883 79.6503 120.979 77.7473 120.979 75.4003 cv
120.979 73.0523 122.883 71.1493 125.231 71.1493 cv
127.578 71.1493 129.482 73.0523 129.482 75.4003 cv
1 /0 /CSD get_res sepcs
.423828 sep
f
129.269 75.4003 mo
129.269 77.6302 127.461 79.4383 125.231 79.4383 cv
123 79.4383 121.192 77.6302 121.192 75.4003 cv
121.192 73.1693 123 71.3613 125.231 71.3613 cv
127.461 71.3613 129.269 73.1693 129.269 75.4003 cv
cp
129.694 75.4003 mo
129.694 72.9343 127.696 70.9363 125.231 70.9363 cv
122.765 70.9363 120.767 72.9343 120.767 75.4003 cv
120.767 77.8653 122.765 79.8633 125.231 79.8633 cv
127.696 79.8633 129.694 77.8653 129.694 75.4003 cv
1 /0 /CSD get_res sepcs
1 sep
f
228.68 89.1853 mo
237.182 89.1853 li
237.182 80.6837 li
228.68 80.6837 li
cp
1 /0 /CSD get_res sepcs
.674561 sep
f
228.68 80.8963 mo
237.183 80.8963 li
237.183 80.6843 li
236.971 80.6843 li
236.971 89.1853 li
237.183 89.1853 li
237.183 88.9733 li
228.68 88.9733 li
228.68 89.1853 li
228.893 89.1853 li
228.893 80.6843 li
228.68 80.6843 li
228.68 80.8963 li
cp
228.468 80.6843 mo
228.468 89.1853 li
228.68 89.3983 li
237.183 89.3983 li
237.396 89.1853 li
237.396 80.6843 li
237.183 80.4713 li
228.68 80.4713 li
228.468 80.6843 li
1 /0 /CSD get_res sepcs
1 sep
f
64.5727 67.7873 mo
64.5727 70.1353 62.6687 72.0383 60.3207 72.0383 cv
57.9727 72.0383 56.0697 70.1353 56.0697 67.7873 cv
56.0697 65.4393 57.9727 63.5363 60.3207 63.5363 cv
62.6687 63.5363 64.5727 65.4393 64.5727 67.7873 cv
1 /0 /CSD get_res sepcs
.330078 sep
f
64.3597 67.7873 mo
64.3597 70.0183 62.5518 71.8253 60.3207 71.8253 cv
58.0908 71.8253 56.2817 70.0183 56.2817 67.7873 cv
56.2817 65.5573 58.0908 63.7493 60.3207 63.7493 cv
62.5518 63.7493 64.3597 65.5573 64.3597 67.7873 cv
cp
64.7848 67.7873 mo
64.7848 65.3223 62.7868 63.3243 60.3207 63.3243 cv
57.8557 63.3243 55.8567 65.3223 55.8567 67.7873 cv
55.8567 70.2523 57.8557 72.2503 60.3207 72.2503 cv
62.7868 72.2503 64.7848 70.2523 64.7848 67.7873 cv
1 /0 /CSD get_res sepcs
1 sep
f
181.753 27.9393 mo
190.255 27.9393 li
190.255 19.4377 li
181.753 19.4377 li
cp
1 /0 /CSD get_res sepcs
.674561 sep
f
181.753 19.6503 mo
190.255 19.6503 li
190.255 19.4383 li
190.043 19.4383 li
190.043 27.9393 li
190.255 27.9393 li
190.255 27.7273 li
181.753 27.7273 li
181.753 27.9393 li
181.965 27.9393 li
181.965 19.4383 li
181.753 19.4383 li
181.753 19.6503 li
cp
181.54 19.4383 mo
181.54 27.9393 li
181.753 28.1523 li
190.255 28.1523 li
190.468 27.9393 li
190.468 19.4383 li
190.255 19.2253 li
181.753 19.2253 li
181.54 19.4383 li
1 /0 /CSD get_res sepcs
1 sep
f
195.968 112.878 mo
204.47 112.878 li
204.47 104.376 li
195.968 104.376 li
cp
1 /0 /CSD get_res sepcs
.772461 sep
f
195.968 104.589 mo
204.47 104.589 li
204.47 104.376 li
204.258 104.376 li
204.258 112.878 li
204.47 112.878 li
204.47 112.666 li
195.968 112.666 li
195.968 112.878 li
196.18 112.878 li
196.18 104.376 li
195.968 104.376 li
195.968 104.589 li
cp
195.755 104.376 mo
195.755 112.878 li
195.968 113.091 li
204.47 113.091 li
204.683 112.878 li
204.683 104.376 li
204.47 104.164 li
195.968 104.164 li
195.755 104.376 li
1 /0 /CSD get_res sepcs
1 sep
f
152.346 145.65 mo
160.848 145.65 li
160.848 137.149 li
152.346 137.149 li
cp
1 /0 /CSD get_res sepcs
.57251 sep
f
152.346 137.361 mo
160.849 137.361 li
160.849 137.149 li
160.636 137.149 li
160.636 145.65 li
160.849 145.65 li
160.849 145.438 li
152.346 145.438 li
152.346 145.65 li
152.559 145.65 li
152.559 137.149 li
152.346 137.149 li
152.346 137.361 li
cp
152.134 137.149 mo
152.134 145.65 li
152.346 145.863 li
160.849 145.863 li
161.061 145.65 li
161.061 137.149 li
160.849 136.936 li
152.346 136.936 li
152.134 137.149 li
1 /0 /CSD get_res sepcs
1 sep
f
179.938 146.751 mo
188.44 146.751 li
188.44 138.25 li
179.938 138.25 li
cp
1 /0 /CSD get_res sepcs
.596191 sep
f
179.938 138.462 mo
188.441 138.462 li
188.441 138.25 li
188.228 138.25 li
188.228 146.751 li
188.441 146.751 li
188.441 146.539 li
179.938 146.539 li
179.938 146.751 li
180.151 146.751 li
180.151 138.25 li
179.938 138.25 li
179.938 138.462 li
cp
179.726 138.25 mo
179.726 146.751 li
179.938 146.964 li
188.441 146.964 li
188.653 146.751 li
188.653 138.25 li
188.441 138.037 li
179.938 138.037 li
179.726 138.25 li
1 /0 /CSD get_res sepcs
1 sep
f
222.278 38.8313 mo
230.78 38.8313 li
230.78 30.3297 li
222.278 30.3297 li
cp
1 /0 /CSD get_res sepcs
.646973 sep
f
222.278 30.5423 mo
230.78 30.5423 li
230.78 30.3303 li
230.568 30.3303 li
230.568 38.8313 li
230.78 38.8313 li
230.78 38.6193 li
222.278 38.6193 li
222.278 38.8313 li
222.49 38.8313 li
222.49 30.3303 li
222.278 30.3303 li
222.278 30.5423 li
cp
222.065 30.3303 mo
222.065 38.8313 li
222.278 39.0443 li
230.78 39.0443 li
230.993 38.8313 li
230.993 30.3303 li
230.78 30.1172 li
222.278 30.1172 li
222.065 30.3303 li
1 /0 /CSD get_res sepcs
1 sep
f
173.202 119.254 mo
181.704 119.254 li
181.704 110.753 li
173.202 110.753 li
cp
1 /0 /CSD get_res sepcs
.627441 sep
f
173.202 110.965 mo
181.705 110.965 li
181.705 110.753 li
181.493 110.753 li
181.493 119.254 li
181.705 119.254 li
181.705 119.042 li
173.202 119.042 li
173.202 119.254 li
173.415 119.254 li
173.415 110.753 li
173.202 110.753 li
173.202 110.965 li
cp
172.99 110.753 mo
172.99 119.254 li
173.202 119.467 li
181.705 119.467 li
181.918 119.254 li
181.918 110.753 li
181.705 110.54 li
173.202 110.54 li
172.99 110.753 li
1 /0 /CSD get_res sepcs
1 sep
f
167.362 93.5323 mo
175.864 93.5323 li
175.864 85.0307 li
167.362 85.0307 li
cp
1 /0 /CSD get_res sepcs
.584229 sep
f
167.362 85.2433 mo
175.865 85.2433 li
175.865 85.0313 li
175.653 85.0313 li
175.653 93.5323 li
175.865 93.5323 li
175.865 93.3203 li
167.362 93.3203 li
167.362 93.5323 li
167.575 93.5323 li
167.575 85.0313 li
167.362 85.0313 li
167.362 85.2433 li
cp
167.15 85.0313 mo
167.15 93.5323 li
167.362 93.7453 li
175.865 93.7453 li
176.078 93.5323 li
176.078 85.0313 li
175.865 84.8183 li
167.362 84.8183 li
167.15 85.0313 li
1 /0 /CSD get_res sepcs
1 sep
f
228.899 66.5552 mo
237.401 66.5552 li
237.401 58.0537 li
228.899 58.0537 li
cp
1 /0 /CSD get_res sepcs
.760742 sep
f
228.899 58.2663 mo
237.402 58.2663 li
237.402 58.0533 li
237.189 58.0533 li
237.189 66.5552 li
237.402 66.5552 li
237.402 66.3423 li
228.899 66.3423 li
228.899 66.5552 li
229.112 66.5552 li
229.112 58.0533 li
228.899 58.0533 li
228.899 58.2663 li
cp
228.687 58.0533 mo
228.687 66.5552 li
228.899 66.7673 li
237.402 66.7673 li
237.614 66.5552 li
237.614 58.0533 li
237.402 57.8413 li
228.899 57.8413 li
228.687 58.0533 li
1 /0 /CSD get_res sepcs
1 sep
f
149.841 59.5573 mo
158.343 59.5573 li
158.343 51.0557 li
149.841 51.0557 li
cp
1 /0 /CSD get_res sepcs
.619629 sep
f
149.841 51.2683 mo
158.344 51.2683 li
158.344 51.0552 li
158.132 51.0552 li
158.132 59.5573 li
158.344 59.5573 li
158.344 59.3443 li
149.841 59.3443 li
149.841 59.5573 li
150.054 59.5573 li
150.054 51.0552 li
149.841 51.0552 li
149.841 51.2683 li
cp
149.629 51.0552 mo
149.629 59.5573 li
149.841 59.7693 li
158.344 59.7693 li
158.557 59.5573 li
158.557 51.0552 li
158.344 50.8433 li
149.841 50.8433 li
149.629 51.0552 li
1 /0 /CSD get_res sepcs
1 sep
f
147.696 112.298 mo
156.198 112.298 li
156.198 103.797 li
147.696 103.797 li
cp
1 /0 /CSD get_res sepcs
.627441 sep
f
147.696 104.009 mo
156.198 104.009 li
156.198 103.797 li
155.986 103.797 li
155.986 112.298 li
156.198 112.298 li
156.198 112.086 li
147.696 112.086 li
147.696 112.298 li
147.909 112.298 li
147.909 103.797 li
147.696 103.797 li
147.696 104.009 li
cp
147.484 103.797 mo
147.484 112.298 li
147.696 112.511 li
156.198 112.511 li
156.411 112.298 li
156.411 103.797 li
156.198 103.584 li
147.696 103.584 li
147.484 103.797 li
1 /0 /CSD get_res sepcs
1 sep
f
188.317 82.0052 mo
196.819 82.0052 li
196.819 73.5037 li
188.317 73.5037 li
cp
1 /0 /CSD get_res sepcs
.905762 sep
f
188.317 73.7163 mo
196.819 73.7163 li
196.819 73.5032 li
196.607 73.5032 li
196.607 82.0052 li
196.819 82.0052 li
196.819 81.7923 li
188.317 81.7923 li
188.317 82.0052 li
188.53 82.0052 li
188.53 73.5032 li
188.317 73.5032 li
188.317 73.7163 li
cp
188.104 73.5032 mo
188.104 82.0052 li
188.317 82.2173 li
196.819 82.2173 li
197.032 82.0052 li
197.032 73.5032 li
196.819 73.2913 li
188.317 73.2913 li
188.104 73.5032 li
1 /0 /CSD get_res sepcs
1 sep
f
179.425 70.4733 mo
187.927 70.4733 li
187.927 61.9717 li
179.425 61.9717 li
cp
1 /0 /CSD get_res sepcs
.964691 sep
f
179.425 62.1843 mo
187.927 62.1843 li
187.927 61.9713 li
187.714 61.9713 li
187.714 70.4733 li
187.927 70.4733 li
187.927 70.2603 li
179.425 70.2603 li
179.425 70.4733 li
179.637 70.4733 li
179.637 61.9713 li
179.425 61.9713 li
179.425 62.1843 li
cp
179.212 61.9713 mo
179.212 70.4733 li
179.425 70.6853 li
187.927 70.6853 li
188.14 70.4733 li
188.14 61.9713 li
187.927 61.7583 li
179.425 61.7583 li
179.212 61.9713 li
1 /0 /CSD get_res sepcs
1 sep
f
grestore
.868213 lw
0 lc
2 lj
10 ml
[3.47285 3.47285 ] 0 dsh
true sadj
149.137 10.4593 mo
149.137 10.5173 li
149.107 10.6323 li
149.078 10.8643 li
149.05 11.2112 li
148.963 11.7032 li
148.876 12.3403 li
148.789 13.1213 li
148.673 14.0763 li
148.529 15.1473 li
148.355 16.3633 li
148.182 17.6653 li
148.008 19.0253 li
147.805 20.4433 li
147.632 21.9193 li
147.429 23.3663 li
147.255 24.8423 li
147.053 26.2603 li
146.879 27.6783 li
146.705 29.0093 li
146.532 30.3413 li
146.358 31.5853 li
146.214 32.8013 li
146.069 33.9883 li
145.924 35.1163 li
145.779 36.1873 li
145.635 37.2293 li
145.519 38.2703 li
145.403 39.2543 li
145.259 40.2383 li
145.143 41.2223 li
145.027 42.1773 li
144.911 43.1323 li
144.795 44.1163 li
144.68 45.0723 li
144.564 46.0563 li
144.448 47.0393 li
144.332 48.0523 li
144.188 49.0652 li
144.072 50.1072 li
143.956 51.1493 li
143.841 52.2203 li
143.696 53.3203 li
143.58 54.4193 li
143.435 55.5483 li
143.319 56.6773 li
143.175 57.8343 li
143.03 58.9922 li
142.885 60.1503 li
142.769 61.3362 li
142.625 62.4943 li
142.48 63.6802 li
142.364 64.8383 li
142.22 65.9953 li
142.075 67.1533 li
141.93 68.3113 li
141.814 69.4393 li
141.67 70.5393 li
141.554 71.6393 li
141.409 72.7103 li
141.294 73.7523 li
141.178 74.7933 li
141.062 75.8063 li
140.918 76.8193 li
140.802 77.7743 li
140.686 78.7583 li
140.57 79.7133 li
140.454 80.6393 li
140.339 81.6233 li
140.194 82.6072 li
140.078 83.6203 li
139.962 84.6043 li
139.818 85.6172 li
139.702 86.6013 li
139.557 87.6143 li
139.412 88.6563 li
139.268 89.6983 li
139.123 90.7393 li
138.978 91.7813 li
138.834 92.8523 li
138.689 93.9233 li
138.544 94.9943 li
138.4 96.0652 li
138.226 97.1353 li
138.081 98.2063 li
137.908 99.2483 li
137.763 100.319 li
137.618 101.361 li
137.444 102.373 li
137.3 103.415 li
137.126 104.399 li
136.982 105.383 li
136.837 106.367 li
136.663 107.322 li
136.518 108.277 li
136.374 109.204 li
136.2 110.13 li
136.055 111.027 li
135.911 111.924 li
135.766 112.85 li
135.593 113.747 li
135.448 114.644 li
135.274 115.57 li
135.1 116.497 li
134.927 117.452 li
134.753 118.436 li
134.55 119.448 li
134.377 120.519 li
134.145 121.619 li
133.943 122.777 li
133.711 123.992 li
133.48 125.265 li
133.219 126.597 li
132.93 127.986 li
132.669 129.433 li
132.38 130.909 li
132.091 132.414 li
131.772 133.948 li
131.483 135.452 li
131.193 136.929 li
130.933 138.347 li
130.673 139.678 li
130.412 140.865 li
130.209 141.935 li
130.036 142.861 li
129.891 143.585 li
129.775 144.164 li
129.689 144.569 li
129.631 144.829 li
129.602 144.974 li
129.602 145.032 li
/1 
[/DeviceCMYK] /CSA add_res
0 .993988 1 0 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HIBBAA+CMR9 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HIBBAA+CMR9 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 34 /quotedblright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 50 /two put
dup 51 /three put
dup 58 /colon put
dup 65 /A put
dup 70 /F put
dup 71 /G put
dup 73 /I put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 91 /bracketleft put
dup 92 /quotedblleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
def
/FontBBox {-39 -250 1036 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 448 666 677] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [74] def
/StemSnapH [25 31] def
/StemSnapV [74 90] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
41 dict dup begin
/quotedblright <1C60D8A8C9B08A95D419B460E029C419FA00F98B4567840F
C90B41F30C1E22570AB218BAAD2F40A64A98F7A77AC469DA6AD38F8158C247B3
FEA3597A2DCB3279F10F150FADDB13727EC92B4DCD6AA84B0DA24BD814DA78DF
708466864567A4575A69653229521D6CD1C227FF7572093C71D2DEAF254D2203
681AABBF251F98FC77ABBD5DBF20BAC9DBCEE05EC517919F7BF69BD73D5E89E4
226A4EE6E2F88E72> |-
/comma <1C60D8A8C9B08A9573EBC19D97898EED5F271860A7EC2CC8B043D15E
3407FF67DBFA3F12A81BF80727DEBB928A308E7D08A7D18782ACB9E21FB7DEAB
C6235C5DF68203473BDA4E6DE7711A004C> |-
/hyphen <1C60D8A8C9B08A9599C1D3CEECCC74D0CFD8C2AC97412B76BD43268
B81DC0F2D8E3FDD90> |-
/period <1C60D8A8C9B08A9573EBC19D9789FEFF11AAE636F5DF237793441F9
0B8B6C20714435F1AA647964795FBF0F32F7B194B> |-
/two <1C60D8A8C9B08A95D419B460E029B75278823D81A9DDF8E57D155D07AC
B5E236ED964EB456C40B69F87AEFA2984AD1C1273FA0478B2E72CD16AFDD8B13
4C3BD6C81185843B44F0BE41D594BBC2E0E2A8793723260A6AC17F8AAB6EDFF4
9DA1C0372ABC58412151DFF7087B6EA2E8616B08760FE2A700AA39F812613789
D5FC62F291F7705E8C502147B5C3DA42C812> |-
/three <1C60D8A8C9B08A95D419B460E02949711E6566054DE4C2BD1ACCB563
E8E0F6D95B4177E3FFA0DD81315020D7430F72F8D15BC3E3430F3DE063672BEB
59968CFFACAAE80CAF4DA60EBA5BA81BB95B075198944EADDF89DD584018BFE7
CFE1666D7E6E24856BE3CB0B601FD89BD0B7394264AE10DF713567C3B66AED8D
053D3176C02061D8C15B1A32D3285A5420BB6F073FD05CD0AB4B319F4AA4B518
4CBAF90D95F5C4E8324D3A9A39C03BF46BF15AB528C580> |-
/colon <1C60D8A8C9B08A9573EBC19D9789FEFF11AAF2B924317ADFC87B6579
339D038A1DA9E085C07F3A440944DE782E100E82BD4189DC794E4FF197E3BE3D
1812F31483DAC1654626A46DC8E848BBFBCB> |-
/A <1C60D8A8C9B08A9463E6AC5868A3852620547E377E3F7CD40225FD8FA798
20535B234530C91E97EDA8A48BBEA7F34137B4BA488479419B6461CBB0E4A660
35450049F998E0109AF668E29CDD3AF8961727330F015F772B46877353AD0ACD
BBB7DA6DCE1F12037B5A2D88EDDD9EC4543ACEE9B343B81B47CB4E47B44B7B66
15CE2AAF73F721FC1C8F9F5D52650AFA61E1DCA099D67D45224206E1> |-
/F <1C60D8A8C9B08A94482D221C8CD419AA89E183B31681B92836204DF4D555
17EB429CA9ECBED47985DA88AF678141683E18BD7A6CB930BDEB71707BAC6423
A749A22D2836FF97C610D9ABE491CA9C10948EBEB0A6BAC60777EF132509F9D4
22E309ADD479C47A8582FC1431817A475E95FFB6ED9FFC467EE76781965AF797
3270333078AFB0> |-
/G <1C60D8A8C9B08A94757772EC50DEA67D4B8BC1507544BF2EBB60DD48DA99
846D078B870505C6EA14C1380E8875DCA4B0C0C67BDB6C71D4F1E225176D2FD7
1F015657890432BCD90F5C9D03C47178FC525D5D220660901A5796F1E3FC2D7C
7EA9CD304AF112FD3354D22F912C80CEBF111300BFB04D6FF496C89AB58E031B
5FB9A405909D3CE6D3FE7B4E15555CBF423B29E6EDBD5D7E7CC47235B2E2FCE0
5EF6622FDE3A6D6C472CCC00A4F5C331> |-
/I <1C60D8A8C9B08A958C7C2E0F8AF1106E839EA0C544C043378969898F1DF5
CA5FEB5F8C5316A6B731FACE0FDB34AD20AA95601086C79319E10F1D14294D2F
F4684FD890815DEC4DE0CBBAC512136AF558B57D31B7803AA3EA761A6003B32D
6B3C243830> |-
/R <1C60D8A8C9B08A9469BCEB3B0A20DF9C6A0BB1BD80DFEA8B59BA29E496EC
5AFE816C095B93D5960C253BA341B302853D37231C61E3A94ECAA74E86EA8A9E
36DEFC8E39906A1BFD1629B8C0F4E4224910BA76DE9859630CA1E156CF60BC7B
1DA9DE837911E12930A2DFB53672129C7A6E0D762483A6163053FF976DAE3A98
8084027C04C8756EA5DD0C3FEF5FB703BFF40A0FE466A0926BE32A5896366628
349482A4146AC240E94B34932A5CDE1DE26FB54A6E58B0F96067A3CFA3A75F12
3D0FAABAFF82A4F8352720DBF019EAD9E1C90636D0D06ED1B655AFCA2A52D517
227D40D7FB19D087EA8DA6B8474A22CB92790D832C23> |-
/S <1C60D8A8C9B08A95C3FA670F19FF09575DAD7A874B51107A251F7BAE4FC4
276851FE9A7580CB72547976BF8294FF1C86889570B6D698227A9FFC6E287927
09DF795D5C4B7944B2BC3672DADC19E5F034CC4F104A7493F40E4496BD0E5044
657DAE34148E1966F795CA9FE4FB5AC78C91F3D4BA1125ECBC6FFE0AFB3F1193
24B12912829A7D5732DA7579061321FBAA391F3621204B468198B33E8A72634C
87D6B374C929EB3E0DAD1902F187EC9B7FB29EEA559F05747F47CA23440168F4
AE64096BC1151869F027C08BDB029FA3> |-
/T <1C60D8A8C9B08A946F695AA48BAE3E6ACFF2251D4F22A314D1178A00451B
FE52BD0B76C804FBBFB5E3D00D0622B6B0CA39C463C8A7333BF6A83B40B715E4
9DC552B46E820445751230126D793162594172C106F7D94A020C4EF577F5C9E1
ADF4D81964AEC2F688D35C46BCFE6C0ACCD7220BA353FB785C4A2EE450781AE0
2C31A7> |-
/bracketleft <1C60D8A8C9B08A9573EBC19D97898E36D924A0DCD6EACB9167
61600C6794C43F5E5B9B5BCC2D0FFF929533E773A1F601B8CE> |-
/quotedblleft <1C60D8A8C9B08A95D419B460E029C4187BFFC8FD8200F7A9B
899D3EF4D3BC51D56A796B51BE1E4A4F14ED618CA68E7A69FBF5E186C6ED457F
2CE16DF0392D3E045A5E5DCEB3BD14D50D76E39C1488442D2BF170A82DCA6CB4
7533AC31546247E816D39F9F2C40EC133E658EC3E1161643102A65BBCEBE8FC4
B5CC29B6FE45151D7DCE51326CC9548D93610E23A869BA0C04C7246B76976974
58CB9511C6FBE6AEA4D> |-
/bracketright <1C60D8A8C9B08A9573EBC19D97898E36D924A0DCD6EACB90B
4DC0DA57F7F5C6D9E85C3A1C90BF4DB05CD4A918EE7E4B82F95> |-
/a <1C60D8A8C9B08A95D419B460E029BC351A97D720AECA16B582308B1831F1
D149F764DE06BCAD95146E5089F42CC4883474C90F911068A2F4501899B66F9D
264EA3B277B07EDDBCFF7830C7E970EDBBB2371AB694DB2BE19BCCAD602DA6B8
B723E39B407F50B70AF04A928DF95248A8347112D3067E63B3A8B146D65E6074
339E723D6B978818DEFD4B83692A8AD91F5C81D77793DB0221E86A0D37464934
1696658F22C2A0288CB737310E> |-
/b <1C60D8A8C9B08A95C3FA670F19FFFC4B40ADBFA40584F3C2577A25FF49C4
D27F67CACE5F67694C55A7E0498729E627E6D5F227D965E87263F5B58F845D45
1996785BC2FCDCBC905A54A48AB2C6D07E126AEB7DC6DCFE9F9F469DE9BF315C
4BEAC49689FD07CD10B482A423B4E2101B3459633F1D4FD5459124FDFCCFEBE9
915DFA00C8661E042C81EAC85BB48C6A4AC05CAD2A> |-
/c <1C60D8A8C9B08A95AE6F279A21AEC1E64268973EEF5DE86F9590CFC9C5A5
7ED64F6EBB8FE3E5024EB195EE3381641C029EE5E8D6F66217B8071BAB80FD86
146017D606C0EAB368C756E3BC9E27A44F4E0B011D72EB0A16326EB754F831FB
548A418C9E9F2897D2A4DB49968B988381E7AA4D651C6CB29996> |-
/d <1C60D8A8C9B08A95C3FA670F19FFFC4B40ADBFA40584F3C25721D2CD65CA
815B0D07E25AE75B7E45933DCFEBE6F3ED9E9E41EFDC7EE2570F665945E1A2D5
6B379602D6C11B60CC3E8565BF5E7AEA8C399FC89FF7420239FD5B1D46731692
FA0BD5CCAF011190301CBBC8D7C481679FD017B0E66EFECE39180AB3A17996FA
F28E2C9C18C956814828FA652C6542129279DDA52B00114321B830F2> |-
/e <1C60D8A8C9B08A95AE94719F92A217774C2648AA6B92C425BFCA099BBBBD
AE8D77A4FAFD6EA63F18BD777A9CC6DA6FAADD30867C393179C08CDBCE580AA0
7F43C97A0CB0AF611C7B2280BFCB3F0255292735B0F2BA25EB94F1165AF4F00A
7AE7D05EB8356E8969279D9AE29F170D7980A6C6DC5CE1644BC30F69ED> |-
/f <1C60D8A8C9B08A95665E4A77401F2685EB54B0E0376268AAEF92033AABCC
A8914F8C8A029298120FBA3FD3FBFCD34C81B038EBBAFAFC80C24BA031420AAF
C72B9734CAE8AA21708C86B1D38A7E196277DB6E9751DE3B697E7C775C8926E3
1195B7A3FB631C48674CE17D13EA26D797012326E03DD4A845E9E64017095641
D257E5C76E81> |-
/g <1C60D8A8C9B08A95D419B460E029C70DDAAC9A8D8F85C6D05BB019436856
41A352F9842AA07B5842DB9FF3AD591D4A37EF989F61814B6DD688EA0A6E8586
3721984CAA81A816A8324076E9F1288FE7C8FB0A5637A5E78C82C3C39F3B3949
24DA9E32112DE7175AC00191FE009E83E1B28FA7A95D3343B63CA217EC1FA7BA
C7C4C8E48691DED4197CEEB479DA7BA64143534DC21F4F6D205B7764631D03ED
2AC13C80A67EEF825BFB33FB39F5B452685B38D9E95EA933A6DA09BCB823E248
57F63C2C6FBD10A598F73F70332D49AF65634FEE22B20DD382F35F30DC6F5D75
3885347E6399DA41E3A17C5F6AB78E90A48AD6F32A036C6D269C> |-
/h <1C60D8A8C9B08A95C3FA670F19FFF74DD8133C38B1071652C680C5142328
0070833095FACCDE467ABBBE3055283C4430D579D4EDC382C7245FF51FB77E1C
C26B40922243AABD63080D1D78E308B32CC210A94933272048B2D917BF77B825
C9E33AE258394FF894352292FF50CE17401D122051520187DE4B09A14A1C4DC9
EE978C00042374E7152C64679792D6396E3BA5DDA7CE90625E39ACE1> |-
/i <1C60D8A8C9B08A9573EBC19D9789FEA2129A8FB26C967F6906C40F4F6B14
9CD8FFD0B61C250AEEEB310DA333AFC9B15A0CC6C81BF28C62172BFD4CFF901C
FB6966240F8CC94C0894F20442F9621608BEC10A81889AF38B6C1B0A9C27969F
013747EACD2BAAB73B2A> |-
/k <1C60D8A8C9B08A95CF7E277A5C2622D18E4A0B44ED80E1E105B54D927061
4172A6290852325C6E1E398D033B757419FDDF47F4533F9A7F22DC2984675EB6
D0F834812C504937CD157C262D81DE11A0778F06F66E835BC1B3E9AAD2125EA8
8F170F2CB53042F65703415C29F6F16745437904E4BE5D3FBDF896FE5D719F72
49BF9EB10B9C5A6A01449CF5A9CA6DF00D1DC60D84B6D393D0BB092BA81A5821
FF91FFAEEB19DB894D796F761D1446> |-
/l <1C60D8A8C9B08A9573EBC19D9789FEA2129B5A50AC2C13D65F681395ECF4
322326CCA6DE73603E0D868BA4360C5AE5A4DF5E02CAA9D48798CB25A39657B2
360BEEF65A13B229DD03C934> |-
/m <1C60D8A8C9B08A94009736013DEBA24488C4E22F08C9A483696F7C57CD4A
0B767AE751763B723CAD109A872BE9490355D4F2D269079B38956D42BDD96FD8
A88FEDFC846E1CEA277E92E863711EA6A05F56CA69E185634C47E5A6E8E17E03
42F25474B5939EEC6D121CFB0F39F28935CA2ABA44FEA635EF82937A96F358C2
53F5E8C13C1FFD75218BF72BF58396E9D5E395072D9951C4F6634A39F0F2F751
72D71BBA8C9D2B79D5641A1DB103A64A7F638247AE19162B35E77574D7CCD456
18272A829137D06046AB1E0362D155651F89AB98E4A944> |-
/n <1C60D8A8C9B08A95C3FA670F19FFF74DD8133C38B109D769360499B3E221
348E47A5848987B10B5D375D67BABC314F7C7AA64A2787BA4CA5EEDC1C214FF7
41B350CAFC3A41F9E7212F689C8693E4921021B9D023A12DC2BCBFA7BB5061A9
42FB87ECC72857D188102B9A7A7EDD7930F04316564D7ED78EECA0BABD6EC61D
B0C81A8037C5CC4F24E29DC344638B18F1DCFF6972A790> |-
/o <1C60D8A8C9B08A95D419B460E029BC36E8EECCDC4FBC3EEEC0193E9CDDEF
800B6893AA4ED619A89915066EA9B777D49700E4B141156EBA071D8203AC8719
FDCC858DC4353134804022C6C9D97AD96775FBFDE3B06C905C7A780BBC94C527
2D93FFC2F35AD8293AB299913E123A6C686334FE9CACBADD31CEC1695A4D28> |-
/p <1C60D8A8C9B08A95C3FA670F19FF87C17F8EF39E8CF673DFD228A3B51747
CEEB32AEAF1A537B701276FC7F39B916EE4EB1D81AF9753B80934FE302DFBEF2
4494143F53C34E0A7C309D0CE9CDF64B15872D848C3AFA7FE7C448D655EF212A
380591C1C305202A83135C5A98F8B3105EEFF63E6E734230A0550D5CFC53009B
C208367570C639949F080E4F88E569BA422B88365165383E88> |-
/r <1C60D8A8C9B709C457BF6620EF18C8C8B68B2489C4862D7511687E039F96
E26CE0044627E1383EB46C9C6829F23515CAD32B8E2CEFD131AB6F954603D7D2
A2562299F41F0BFB2699AF4C8F6B3A5444FF7CD5FC2DAB158FA9C80D28587DE5
77083D5023413512CD3A7F7752762E2EF6C338185B> |-
/s <1C60D8A8C9B08A9582DD1E322E7C11862C41BF711E2414F39157AB867608
077F59E635F9C5B5A691B5B425825BEFF87546312B1A783A32B0C721D9015E6B
B383B83427CD1859CC31D5796476293D3BA5829F879AFB01ACED75E29547EBAB
A536E6878ACBC19261DFAC1DF51D00ACC8E8D3603DD29FF09808DC031713BEF8
394A931F7476418EB145C19847C556DC4676AD85E64DA9BBC01B1C263DD2F6F8
36424F496EC4EE00001D0C80C68F1054C96255DF8348DE291D41B1450D05D4DF
FAF76DFF39870EE83EC9> |-
/t <1C60D8A8C9B08A9580C822583BC30BF3C9052CDFE1E1E317DBC76D13C317
B36C44A6EDA8B7AED928CDE9AB723C750666120D5BB57EAEBBB7357B28BD05AF
B7B8131F02996E3A4A80F953FAAB261B969088B40E7775888AF4B25667EA4E> |-
/u <1C60D8A8C9B08A95C3FA670F19FFFC4B40ADAEFE548534FF5063088EEF16
FC16636B92E9FBD8BEADC0F376C08AA8A8709583FE4B704ECE2C5E74787C317F
A0A93BFE85970107875CAD8FDD6901903C1F0B54CBBE339A3514B54B2E9C14FF
3285E889B0E222072AB960459C1C23DFE0B3> |-
/v <1C60D8A8C9B08A95CF7E277A5C26298076DDA5F3EBF7C0958B69E2797ADB
2D6EABDAEE8460CA3BA3C1607FBE729B09B2DC1101FCBA2896726E66650E72D6
996C8C84A0DAA4B5B07457D74C49C4D3174083B094D2ADF6FECCFDE02DB37730
619F2383BB1B61F71B08F4DA30722AF3467D3C35A56047DE5EC4DDEFD549AF7D
5D5EFD1FDDE6> |-
/w <1C60D8A8C9B08A946F695AA48BAE35DEEB8CC93926BC82305CE2D2A7DE78
94B4FE4EECD3B9F861EE257F8F1CEBABA9864C53839ACBBFFFD2DDFA2E663AD3
CD2361B1B735201129C32B76EA0AFA5A0DE3E97CD415D7AD6D55D9A61A51AC8A
8C6760FA743307851B95804E8CB930690D123A5EB15A68D8DAC319B3C2F0E4DC
6B109AF08FAAB3F03799F8432144E3A935165A7E7FB8191C43B09125B2C085E5
AA16E194DFD69C3B07588B0269ECDD4005E95CA3619B405BBD5B8FB5335FAEB9
29478AB2602C4E820107B658BC8449126487E23BBA56> |-
/x <1C60D8A8C9B08A95CF7E277A5C2622D18E4A0AB4A0443B22C4499811AFF4
821DB9EA3311843AD32FA78FE7FC41F42292E75A9498F556C808B463D0D5591C
877B11BE4C73E48498D001D8C6FF8E1ABC167B1B7448EA5EAC86F78EFFF1D595
B34CB25DC68EF1752EF6662318058BC5927A487EEF9B912D0DB9CA55FBAA6609
52F690CE63BF6F1DA71967D017500A556AFCFC09ADBF587BB7A3708A625BCA8B
AB4F0CF491FFEE25524F99DE337A50B70271AAB920ECB103ECA239E017116577
66069139C48626D4B0E2602BB2D0DE88ABAB1A88A0B9331493983CF70AF1D137
812CDA> |-
/y <1C60D8A8C9B08A95CF7E277A5C26524E453276D4045DA011AB109927F843
C0242FB8092A8C21FF0AB1552E311AA79AE59FAEE0D11988B0B80C9DE0714D2E
F36D932C83D2673F1D35D7FC7A36BA973085233017C93438A021E23965B63965
3E34EF8C19975FA9DD14A7754C72BC02A6F87219424C80E640D68831C0AAABF1
AC6391A3E21374ADDF058786A3E947069DB423217D750E704B2466EC42755969
E217003D9AEED5D32BBE68D54FEC> |-
/.notdef <1C60D8A8C9B08A9599C1D3CEECCC8D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/NCPDHH+CMR9 /HIBBAA+CMR9 findfont ct_VMDictPut
/NCPDHH+CMR9*1 
[34{/.notdef}rp /quotedblright 9{/.notdef}rp /comma /hyphen /period 3{/.notdef}rp /two 
/three 6{/.notdef}rp /colon 6{/.notdef}rp /A 4{/.notdef}rp /F /G 
/.notdef /I 8{/.notdef}rp /R /S /T 6{/.notdef}rp /bracketleft 
/quotedblleft /bracketright 3{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /.notdef /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w /x /y 134{/.notdef}rp]
NCPDHH+CMR9 nf
NCPDHH+CMR9*1 [8.96638 0 0 -8.96638 0 0 ]msf
3.27275 168.567 mo
(FIG.2:Applicationofoureigenvector-basedmethodtothe)
[6.00163 3.3602 7.19577 5.99582 4.56112 7.55558 6.96291 5.16017 5.16016 2.51566 2.51566 4.08199 
4.56112 3.60275 2.51566 4.56111 8.64026 4.56111 6.35957 4.56111 5.16017 7.07996 4.07849 2.51566 
4.56113 4.07849 4.92032 4.6763 4.07851 4.08197 3.60274 4.56111 3.59993 3.12373 5.16017 4.5611 
3.59648 4.07849 8.76019 7.67581 4.07851 3.60275 5.16016 4.80106 8.52008 3.60275 8.16125 3.60278 
5.16016 0 ]xsh
3.27275 179.008 mo
(\\karateclub"networkofRef.[23].Shapesofverticesindi-)
[4.56112 4.43622 4.56112 3.59994 4.56113 3.60275 8.03867 4.08196 2.51566 5.16016 5.16017 8.40105 
5.16016 4.0785 3.36275 6.35774 4.56111 3.59995 8.75616 4.5611 6.71973 6.83575 4.07849 2.75963 
6.47583 2.51566 4.56111 4.68137 2.51566 9.11551 5.16017 5.16016 4.56113 5.40024 4.07851 7.43637 
4.56113 6.71973 4.6763 4.07851 3.59993 3.60275 2.51566 4.08197 4.07849 7.5564 2.51566 5.16019 
5.16016 2.51563 0 ]xsh
3.27275 189.448 mo
(catethemembershipofthecorrespondingindividualsinthe)
[4.08197 4.56112 3.60275 7.43859 3.60275 5.16017 7.31858 7.67578 4.07851 7.43579 5.40016 4.07851 
3.59994 3.59644 5.16017 2.51566 8.52025 4.56111 6.11972 3.60275 5.16016 7.43851 4.08197 4.56111 
3.59995 3.59995 4.07848 3.59645 5.4001 4.56111 5.16017 5.16019 2.51566 5.16014 7.92123 2.51566 
5.16017 5.16016 2.51566 4.91624 2.51566 5.16014 5.16019 4.56113 2.51566 6.95663 2.51563 8.52002 
3.60278 5.16016 0 ]xsh
3.27275 200.008 mo
(twoknownfactionsofthenetworkwhilethedottedlineindi-)
[3.36291 6.35775 7.44097 4.91622 5.16016 4.32113 6.5976 8.04001 2.75964 4.56113 4.08198 3.60275 
2.51566 4.56112 5.16016 6.59644 4.56113 5.75964 3.60275 5.16016 6.95842 5.16017 4.07849 3.36276 
6.35773 4.56113 3.59993 7.67607 6.59758 5.16019 2.51566 2.51566 7.07849 3.60277 5.16017 6.95842 
5.16017 4.56111 3.60275 3.60277 4.07851 7.92007 2.51566 2.51566 5.16016 7.07852 2.51566 5.16016 
5.16016 2.51569 0 ]xsh
3.27275 210.448 mo
(catesthesplitfoundbythealgorithm,whichmatchesthefac)
[4.08197 4.56112 3.60275 4.07851 6.1163 3.60275 5.16017 6.59866 3.59645 5.16017 2.51566 2.51567 
6.12267 2.75964 4.56112 5.16016 5.16018 7.56017 4.92009 7.31613 3.60275 5.16016 6.47836 4.56111 
2.51567 4.56111 4.56111 3.59995 2.51566 3.60274 5.16017 7.6758 5.27548 6.59761 5.16017 2.51566 
3.84187 7.68024 7.67581 4.56111 3.60277 3.84204 5.16019 4.07846 6.11661 3.60278 5.16016 6.47833 
2.75967 4.56113 0 ]xsh
245.193 210.448 mo
(-)sh
3.27274 220.888 mo
(tionsexactly.Theshadesoftheverticesindicatethestren)
[3.60275 2.51566 4.56112 5.16016 6.23654 4.0785 4.91622 4.56111 4.08197 3.60275 2.51566 4.19638 
6.47574 6.5976 5.16016 6.71859 3.59644 5.16017 4.56111 5.16017 4.07851 6.23645 4.56111 5.3998 
3.60275 5.16016 6.59865 4.6763 4.07851 3.59995 3.60272 2.51567 4.08199 4.07846 6.23648 2.51566 
5.16017 5.16016 2.51566 4.08197 4.56113 3.60277 6.71841 3.60277 5.16017 6.59863 3.59647 3.60278 
3.59991 4.07849 0 ]xsh
234.994 220.888 mo
(gth)
[4.56113 3.60275 0 ]xsh
3.27274 231.328 mo
(oftheirmembership,asmeasuredbythevalueofthecorre-)
[4.56112 6.35957 3.60275 5.16017 4.0785 2.51566 6.95985 7.6758 4.0785 7.43579 5.40017 4.0785 
3.59994 3.59644 5.16016 2.51566 5.16017 6.11551 4.56111 7.19662 7.67578 4.07851 4.56111 3.59645 
5.16017 3.59993 4.07851 8.64017 4.92009 8.27629 3.60277 5.16017 7.43849 4.43605 4.56113 2.51566 
5.16016 7.5585 4.56113 6.35959 3.60275 5.16019 7.43848 4.08197 4.5611 3.59991 3.59991 4.07852 
0 ]xsh
3.27274 241.767 mo
(spondingelementoftheeigenvector.)
[3.59645 5.40017 4.56112 5.16018 5.16016 2.51566 5.16017 7.68096 4.07851 2.51566 4.07848 7.6758 
4.07849 4.92033 6.72266 4.56111 5.8795 3.60274 5.16017 7.07851 4.07849 2.51566 4.56113 4.07851 
4.9203 4.6763 4.07851 4.08197 3.60275 4.56111 3.59995 0 ]xsh
%ADOBeginSubsetFont: DMSAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
NCPDHG+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/fi <1C60D8A8C9B08A95C58E49244289D52DBFA6654D4AB3AC250E722460DC0
119768B44448789DCE428D4B2686C9F8385BCDBA347ED18E5F8268BB459FBE6D
A582F0AC156A72C43EF61DCDC141B2ABF4134B679E977460AEDBF3A60B5A8D73
C83FC43588A14B23741E85F6A11BCFE9BB989CF004E031BA85CF8919936A7CC3
2851BCF15ECE282B9835B48BD31C631A09A28FEE1D4E836442C263C4136AA681
0F1D9D7F4914F2439D688B73E7E7440361FDFA0D6D48AC5F6D04F232189E118B
694EB4D333AF5307053422C90A957BC9AE12504F7FEF7C0E6> |-
/quotedblright <1C60D8A8C9B7A73DB6A586101AFC0BF178782BB237688374
70E0907A1945F095B30A45FFC68E12E9790383455FA55D95CD33DFB2DC630B04
EBD552C571E6E7284EC246D1E1385E5022F1FFA3D2FA7491DBBF5045A3931A0C
30E9EA4528804489547F4D11ED067281A2C66FAF2DB8AE6ACB6627056EDE385E
F1F13516924B5D63EDB291C6CF39647863CDAEDF91C3CCD44DA1D00E9A2C773C
03> |-
/parenleft <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8BB61D8ED
90A20EE239C62172B553BFF416342D6CD99C95C515CA225C40039DBAF08CE4F0
55B08F39C15D29C99EF3EDD066CCCEF8932365A3BB1620FA5F0BCE8AF21A5BDE
C0FFD55FA45F247FC811007CB408F0DCDD3AE01E3246> |-
/parenright <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8A207F03
DEA8F466C0D4F860EDF515D421F89285FC2D8EC76F5E903EDE1B5CFFAEC5DEA9
22C7FC4A51953A99A5FB1F96793348D816F60492670058F4DEA6D328AB20FBAD
B3C1B57A79D8CCD13A3C6D068BAD5F09F347ED0C895> |-
/comma <1C60D8A8C9B08A9570810981675918D0BCF1CD202F5F15202B7A7698
DF02C61BB3071F67A562DD96D0521F578EC9F57BF5A71BF023ACCD67B8727CFD
38538E62ACB3D55D0B01252803DA68060E5342CFD41A7D> |-
/hyphen <1C60D8A8C9B08A959E2F69652E8B76AC2AC5B4F1FA8662A86AEED57
846929C2FBC07360B> |-
/period <1C60D8A8C9B08A9570810981675968F2C907C696DFE9BE69433F613
9DF6C45B8165ACC43B6E0B309859F778ABCF0> |-
/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834F8BC61B6EB92C1
2484BD76628737DA40CF9DA1C97CCDAFB1D1B732C642F74A7C41B7D3AC6DAF8D
1E760692B6EBD2417EF1893A4AA0B1CF049D4C54D830CEC073A9153D451FAD42
892B0930AEE4FE18588336BFDAD60D8A4F4CFFED76F103FB9BBD8A33EFBA3F18
232B88D88FE54E17260FA3E2CC29DEC0CB72B88DC816FF5> |-
/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C203AFC890ABD6F58341B006CF1
BDD8FED3A7238E01F751FEAC75885229C293891E5636AD630D9C884528B6FEF0
0728A740ED77D054B4743ECA5E3947520FEF6B23D548765D11> |-
/two <1C60D8A8C9B7A73DC50B0411757B441481CCF7EF812EEB9B3F6A08293A
A33E44598842821CBFE74832C3A2FC51890F3A66AFDE8EA8269173784AF985B0
8CD4044AADA37EBF8296E8DBBCEABE3042A3995F6A3A8DE32D90D624CEDF4C1B
CFEECD943884DD6052923FAC92315AE2977DECA1B6F479ADBDA41B10FDF2F38D
2B74CBF99D8D6FF4> |-
/three <1C60D8A8C9B7A73D3B2B97DEB4C7BDB68E0D63865C8BF294429AD1BA
AE59A25299F9306A9E28AA5C0C0AF9F97F56096DB0FD0EC440ACCE834B0BA539
2FD94D026768A961AA5D1A88FAE30F2B2033E77AFAB55B0B9C8092CD226DD9EF
EEAAF5CD5AE79D6DDEC4C37DC43DE3B85DD2A2EC4DC0C9F349D5E8F9F615782E
DC8C53805553FD3C0007C1818BF3D99AB659A079ED36132BBDC613CA63D7A0FE
429706DBC6BA998CE56A89C002758EF37F90A390F83B3DFE49D312FA66FDF2F1
6212D1503559B35FC2DB8BD5A49535> |-
/seven <1C60D8A8C9B7A73D3B2C65B72E3853584348C1AA0EC611B673546899
CAC2F5881F734271F745E6BED9150871364812C182076C7FE649F3BB3D5FD146
09E37BA29EC4E0DD0D9315F7FA96EE3C3E071336C6F3889037BBC9D4C9A05041
1D6417B8A488787A8C755BFD89BE81986B96036872806293> |-
/nine <1C60D8A8C9B7A73D3B2B97B3700AD7AED0795D43DB5ABA64A35CE8EC8
55A5CBF20AE28D441242F899F7C2493AF719033D6B385FC121C95EE56A8AC87E
982F921115084DE39E9BA3D7A44F69554488D091CCA5CE48FA54B9DEDF323B60
58F2C417BA9D8B1544EFE093FFB579140C54032384DB55AB4741347233EB3F08
89C3AE9CB54BFC5722CB20FE6EB0FE3ABCFEDABDC9E7A6133126A6F51B867889
0B35A22591676E962B03C898FE88F279F8C6D3B01F6391B6E2BA953568B49F4B
099> |-
/colon <1C60D8A8C9B08A9570810981675968F2C9119AD767573D3896DCDEF9
DA5F5F8912E04C94872E9ED59B26AA7979866D70736E39162F6D45AC4E5BC3A4
24B2E5A438DB713C33C0D2FE26717D> |-
/equal <1C60D8A8C9B08A946182837629008D945C50B3BD77B79680F3B07BDA
6301D2521ADF665EADEA779B8650AC6CDB556621631497A3BE00C67036F6EB06
05A36A2C0EE306396247E4A79F8EFAE500D78B59605F041F11> |-
/A <1C60D8A8C9B6E3FA234780E51B74F22595A687FBF09EF454D03FB6CE0741
835DFEA276F2BD9DA1E567C1E2AA272C9AF9AA6DE082183B6B06B110AD19A95E
B7E4DF541495BB98EE61CCB080A42D64DF1FC55075E90898D74F5BD66A3B7E79
6EB7D1A2531A03B3A15C447C7878675F786C2958D8D170FECAAEB79653062A89
C24C3F187B500D1CE71547CC2DD4654566FBE73FC2C8B09F> |-
/E <1C60D8A8C9B08A94478E8525F69A019D95FE72DA8C36F7444DAD19BB0061
E770906A150A4BD03370CA833313DABBFFA08F4F6923D6F2E1F291EF72FEE46D
4AD7965ABBD3FCC184CD136E84737FC4A8AE438DC8BB607FBEAF57BDF3513854
059D47B5D868D1DEC892419879AC6E70E4A380A91D5579DF201C92ADBF310894
399ED63228DC2B6A8229> |-
/F <1C60D8A8C9B08A95E211B68BD74B7CA2EA30EA4FC2444F1F126966AA7729
7BA7EB9B6F06068DCAA13C02B3588F5A46379A5072E7E2DBF343C097B55CA4D5
88C6753F362DD28478A1BC56804A66D1A6D1CB247FEE04B2647D343D14D14B66
B993C73F534C4128A2626BB2404D5D4FD30D29B727A906D4DCB574AC37C31D5E
5DAFB5704A4D0DA0711E1E> |-
/I <1C60D8A8C9B08A9591900960B3FA4612DFF926AB21A530E1912F33677612
AC06B324D812E42049FF4946BE5E0FFA24FA0C62F2839FF2110EEC7EE0A42476
46E6F699D4C8BECE1825B3A661611E4D55F40F2E64FACB836D4D0C9780F60650
FBF10E0D42> |-
/M <1C60D8A8C9B08A94284B5EFFFA832408F063995C68AF9F6C00E3E870C312
931E0B60FD6BA55DD706D9BAC1CDC4ABA061AE96D501262822550D2CE4A4A00F
6BD783C7102AF89E0EF96D5EE2ACE1FE1F52AF7541EC9D3A0E4C6534E1F6AB39
5548EA6C044439A83E2FEB7EDD83B7568D1F5B2617A2398301102CB3E00F37B0
ADA59D1B42243231CABCF7C376428EDD02AA8DED74A29E9D26B1EF5601D72EC7
E72FFDECD0A088325B7F4EAE4DB260E1F591819112> |-
/S <1C60D8A8C9B08A95C58E492442892BD9E7F4F57919B0701E6E25EA5D422F
9C397DF42B2B4BCA66E1E632A933346AC08B32A319078CBB9C8790BD0797A0C8
D7037D9990944D6E89A8A0F0AAA1FB21BB3A6E177F143C1945D15647FEE591CE
37C775F523E736A97F5B4B355025F52910E1BB67A45650FE60FBD7EAB8B55253
C03F7277A289FD5E636694B522459FBC5D4691B78605010D03A98DF70394DEA9
E1FE4901D57E4AD3188F2DF845C7CF9C9FC6E1FF3F6717E9888DD3E1C3037C47
A1E4D646D9D8762C30C0651F2B38B9E2374B673FC694E64AECD8FF20E9FAF1> |-
/T <1C60D8A8C9B08A9454CA4C75C5C97DCE7AB32777FAAECD12647866E7CB3F
CCDC541E37F2225E520DEDE695980D4012AD5B972BDABC7E7E5410E71AC63692
4E778B3131B6C4D1E76F8C4592AC311A2107F53DC1850538C9E487E6D5DBDFE8
027D7126BA9ED8B24E7379B57E474ACD298BF6B3700CC970D80111DD98EFC872
C24D0DA3C75DDDFD177C6D15> |-
/U <1C60D8A8C9B6E3FADD42AB2F9476BCEA084D1DF05959BFBD4842DBC964DC
B6D0983EB799CC8E9224C92BB6727696E1A89D45CE93DEE00384B973684479A0
B993B2D9C6C0A2AB61FE4FA10EC4C1C1052FAEB5DEFBF43031503D55B8FDF985
110C8D46F3C8553B8DC21E71453D00BFC15C0ADE3E30761C704531B8CEFBA6C0
768198D5D439F4284E7EA4> |-
/Z <1C60D8A8C9B08A95F2616DBAAE74C39E74039D89F8285764C0E694BE05A8
2A4ACB4F483A629D400C83FB463B693C37E3BE12EFB275476E29AEFBA4FB12E9
52F7049ADCF7E60B0D32C8A41DA56A11E7BDEB5D9D7F5A953AEF9D86068D891C
6A34D9D49C6FDEFBDD> |-
/bracketleft <1C60D8A8C9B08A95708109816759180BF1DB309B19B6ED9132
1AEA14D2F111E25129A9F55A9BBE788FBBDFF0F6C2244EC994> |-
/quotedblleft <1C60D8A8C9B7A73DB6A4ADEB3BA4EDC9F571D3C053FFD4AD8
FBA6865DB43394DF92D6C86A6181E2569D5A9E72F557137ADF8BE91A54CAF411
7D02DBD741E9C897C13C568253649838671DA193045802525C0E953D17009DCF
FCF564E1D3B2BE1B68F4281362F4DCDF43C34D6A601604368AD87FDF16638B22
2082D3831BE11151FC5DC0C7407919A726682211BD2D88B353728C69F1C16EE7
0> |-
/bracketright <1C60D8A8C9B08A95708109816759180BF1DB309B19B6ED900
1F8A271BD99A5836DA462259FB45E4CA899E39083E4FD8D8818> |-
/a <1C60D8A8C9B7A73DCB03313BCF7BA903D75A87DEC6EB34306A2C875A7B9D
6F03FA56EC184A666A965328412CD76CCEF3CAD69BC525A6A87F1F2D19F5D1B7
FD73AE7371FEED4E7F3CC2802C465D966135A2EE9CF8A0BF2840255B111E8037
10168818EEA9C2DFE9C99A20ABC767161183EAE437218D2E1239DA58B1500E1F
7F2D27496F0873D02EC47EEDEB84F4B0D78003FE0EDD73F083F9C52A46ED942D
3466EB983C6AA2296E8F2602B3A2BC810F850571C10A31EC74CF8C0EACAB287D
E5031078E0A963D32061> |-
/b <1C60D8A8C9B08A95C58E49244289DE68BEB072CD774760717B1AC03D4196
E4D3FDC2B7E7CE84526DCA2E8737C2FA5E45EF4219739ADAE55257C147981B47
E921680CBF8EC71E1F39B7177EB2E11928E4F7C286E610AEFAFA1EBC4607A54E
191D1F196A7965F72C64BEA568BA3862ADBA5A889497A5F91BACBB8AB6FD1923
FCBEA1299763C2CAC59190F5A77C070754F1BF7D4BA6A90B4DA4179E36EEBD00
44B1B65B335E618DE0786016CE171039BE4D49> |-
/c <1C60D8A8C9B08A95B1F07368C45D8D2AF4BC563DEDE799FE18B66F38FD9D
86FB33EF8157737910C2A21CF1859082F165505E98A2D559D2B21F8D988656D0
8136253C2962AD8B7BF2A4CE3B3D77FFEE3AC8C805C2D68655124FEAC62FFFA4
B2E84874A6B6FEF5E31C416CAF5B3B1B491C61B5BE3DD5423D78BF> |-
/d <1C60D8A8C9B08A95C58E49244289DE7CE169DCED605C5EBE88ED6BEB622E
1A913DB049559F328B1BA5B98D05029A7182E5C2EFF0D51CE9CC613951CA5843
BF921E7D499BAE077EDD17C241AB99693FE8BA73955D7F7DDA776929DA28007D
3A7B49D2D8CFF9811F7B7FCA42B593084C5A9FCD428CDA272D23822309D5F54A
9A96DE753B3903C99ECF817F629505E0CD844C8EA2BBD36AF3BB9BB95019C9E3
F1984ACBF44584725C8D7D603DEDE90A38E33CD93C> |-
/e <1C60D8A8C9B08A95B1F07368C45D8D2AF4BC97E4CB216B20786BB8409E5C
B08921F2042A459BE0DE80ADD86BD8D3FC85885973F3B8E71B750A7BBBCB2EC2
7654BABC4A421F19CAF38DA67236E15B4E8454D787305B09443F6B2507420195
7C1B86920E2C7CED0E614A34A438ED72C4B057D323DD16C0BE898DF1> |-
/f <1C60D8A8C9B08A956BA15F0F7534FD16D435BF285713D1FC2F47197CAA01
5B3C5AFE7501D363DF0FB89829DAC5D1912FC89943C49D28C03497E2EA8019DD
6DCE2906F7906311DC1AB2F70AE5D2CE9ADF3B46C5D6C3EF240CB58AED447B3B
F9E280545327427877E3A846C4989F60BC26D328630237D9E0C8BCEB0572A3A3
3A753A46503C5600B2D3> |-
/g <1C60D8A8C9B7A73DB58EA28807584EB19BC6EA1448A12312E623B90358A1
6C40D52FF50AB2BCF83396829D3E501BD0EAB8595D9693E632ABAF05A4D1FBD5
E9FB32E59BDDF670BD3805B1A8647E1D2641030D018FCD259301AC116F3DEE87
AA68CECE526FB7B8BC0206EAEFB580DA05969530F8D40CD15579447988D4CF07
5C24F15E32C0A9AC369D08351B0D49CAFF731E593F6C55EE74B16DE9D9A4B199
3D1CF0FF1D3A57A52A0C64F106D414FF112A5DA34DEE3AB850B6A4492C25D3F0
9EFC86EFE140D828B1F4BAE5664F14014926ED1A5AFBCC814A3428F143CF5FB2
88702BF23054721A3BAA8027EF0D34A7A361A40A12717277178C5820C35A1131
71DEF9DBB455B7A9D7BB98406120BD93C5B4D04664B09F3E37553C20D6> |-
/h <1C60D8A8C9B08A95C58E49244289D52DBFA666019C293718E3E7399937F9
0F1A0F2A1155777F5E01169AA0132707A9262D30488EFE9C2FCEB4BF171B6AFD
5F16C4C42902BDD0545234C303327A9B4335220656812449A087C08C1640E016
F013F6CCDD3EC75EF7F502D7916CEC9FE8489950FAFAED57D06A770FE255EFE7
3141547D62FD2EB21835242083E6DA1ACE70A1B09A1C6D7472470640> |-
/i <1C60D8A8C9B08A9570810981675968AD25F24D2B3EAE33A4AEDADBE9B65D
A53E9F2E54B16133284CA9914BED3880C793207FBDC7926300AD07E6E54407B5
1EA082FB5EE3816A6A23A8296A947037E49B372BD5DFBDAE3E0626953F75EA84
BE757683B949F1DE2291C5796E30589D0B63B15E0D5680411C> |-
/k <1C60D8A8C9B08A95D222871B45C8170346D4B18ED19B2E2E03D20F864B5D
C5BD82CE186E8865448F19B50359E04C51718F8BDF55D412398F4EF83C05419A
DE886E1536E26F7FC0E53312F110D79646DAD9F1D10B32AFE3698557277E72D5
7B4C7DAD8FF58DCEB52B83B453E4BE2D48D6882B0AECFDF4A8BCF747376E22D9
81F8E1C7CD6E92891501D7EE1AA17A160448D2B40E0899A7693FEF353371FE21
8D3D2DA9622BE1E9110437FDF2C62C6B642301FAF5AD> |-
/l <1C60D8A8C9B08A9570810981675968AD25F317189905083B97CD6CD1B880
05B79B666989E13C0F8D0889AD0162C7E87274D188EBBD1A911FDD0B6E360AA1
C515725198B9106B157680FC> |-
/m <1C60D8A8C9B08A940B724A74A01E176AC76C178E539FDA15CBEFB3251A61
C8116B9FE351FF1BC83539595D23AE382CF3B7BD76D62DC94F39B27B55D161C2
888F1D0802E5CF73898C0ACDCA15FB7A28AA1DFAA4097D26E5F1ED6CA3CF5043
5DDF248924E60D22E0F7E352F621676508849260B5671A3BC8A3B68A0E5A236B
21A2D545F7F03555DF313A266CEFB0FAC4D988447E218579B005BC3818325D6B
E4238BE79A219C693AEEC947AC4494C76A2FABFB89C7C87C3BF2D966FC535B3B
3741AD984B1F14E65DD80CEDA6556E93E5BCBD474DAE67124A7D680871344313
5E77D5F39550C52591C734> |-
/n <1C60D8A8C9B08A95C58E49244289D52DBFA666019C277832971AECD3A2BE
2BEC7B54FB6495FB92576707685DC74ABB91BBDAE34883FF9A67F98976AA9644
4991998E75E7C0DD660302AA32F4A594CB8943AF8C8A7A1816EDCC145706F59C
4AC6594ADA8C70D4581324ACE95FAF27E8310531A9135111CD73F07271177AD9
19E481C50EA9A49AF6DC17AAB4F64FF2FA69B930EE3125F90FF45940A8B79400
77DE52AFBD694294FC> |-
/o <1C60D8A8C9B7A73DCEB07E09D16841D605E4F67059E6B258F546B80703E4
CDAF20027B900118209D5372F965F2045D50C02A29110A048C891DEBA3210CDF
C5CDE2309C0CDE0E4855E9F6D8954C4C68826A14AD2E4C6227A036D85D304D6A
96FEAA92DEC3CD1B9F4AD57B5F1EBAB070FE911461A7D5B958F5> |-
/p <1C60D8A8C9B08A95C58E49244289A5856A87A514BACC963067C66BAB239D
CDCE9F4261100AB3FC27C442F38251F748BDC4FE1B33D3674C3AC458B8D90659
4A7C097B284E300785EF89EC935364238F6F85814959B59FC602E1C9218990A1
EAA89E9DD6BE62E2638614527B32DD37536058624D71AD22200066FC58B85A2F
23FE75D65D0D566D42537DE7A54F403AC773A788746DA39DA5E08141350763E8
90C3D5FA2E03893A0A2E244C> |-
/q <1C60D8A8C9B08A95D222871B45C8677AD60861C3F92152D679EC046FD508
04EE7440261F7F760EFE5BDA37735333B634AEF0E39D128EC81BD50CEED93A00
645B5D6515E247CEC7B0C61191F67893C528A900762C59FAEA845D61ACA5F7E7
B106031460E4734AA4EE85618EEC80B1ED1E754561578DABED479BE37358B263
04EF9BF65844BFE482C31643A7466E43F6E32A0E02E6EBB6652EB71BB9780CA6
2F7BC7305363> |-
/r <1C60D8A8C9B08A9584DDCA65F36574E4C0AD887280FF9B909C6A899987DB
293D7852BEFA4C39930336FB095720C0B7F3DAB63BAAA1B8DDCC043FA283F018
8CCB14B3659C329CFE1B109E221BED92090F6BB29820D4EE71C04A829063DE78
A3825B55E95A657233DC92BEDB8A985D8343619E09C6311B13BC89263D4BF360
2386AD699E1FB63E157604D8B7620B> |-
/s <1C60D8A8C9B08A9586D4F7B21AA9B0967A13D9D7A42FE340F518B826828C
B1C2BB6756CD4C9284475BF78FAB574767246E1F9CBC21AACF1F3C97D1790131
F28F8DFADB3AAE0AA727045B30CDDB07BDF05EDA5C24C0AFE386D470551D7E8E
D902488F32C5E29D2F3E7F01605EE454D8B7A57FD0F16F8D3A10D6235D828477
DAAA15E6231D70C2BB9D9C0718FB249BC89490F9614317D9D2089D530687FFE9
B32E2EABFBD5A30223E1691D4FE59FFF3C416D75396DC2C2F68135236C16492B
80BA292D01981169C65CE545147B052951BDA4BD86> |-
/t <1C60D8A8C9B08A958B2129D6E9766AD6B3247B9CBDFB0724765D43ED23A7
B2BC7B24077C209594776C48799589E3DF7269407A6893D4C106057122D99E3F
649ACAFBE1812EEAA6C4DCDDD716BEB7694626BFFCAE715C15EF0FD8CE9F6FE4
E96B03> |-
/u <1C60D8A8C9B08A95C58E49244289DE7CE169C00DDE88F62291340DE711A0
FF1D26EB52FCF3EA61C6DE0F9A060ADBE1A24F6D7B6535515F73FEC960C83DC4
3F9D89FDFA0F5296079D78C110DE4E236B69827950DE2B2EF435FFF73BD0B1B7
E3440DDB136FD7C4F9278F088A54E358560D42350EB0CBC6A728CDFD> |-
/v <1C60D8A8C9B08A95D222871B45C81C126204E8A3F3EFC2EBF937B1E5F2B8
737EDCCFF78DB8693FA0E7B559CFAC0A233112105FC1A8807ADD3013D4AE86C4
38318F1223CADD606642DF7E9A8EE9BE743E975DA759D856D52F7E927FE33606
3979ED38AB2E1EA4CB4F371A1EB04E6C5B864C9DB5271435AB2DE7D9DE15A6B1
D9E3FD555F015DADE467> |-
/w <1C60D8A8C9B08A9454CA4C75C5C9761F27DFD501BA4813FE991E533E1CD1
E174DB2ECA59D495EC56B0C1FD43D089BD170DD220487C38F20C192FAA7E2E88
3AD5437BC552CE37BD6C6BBA40409BE02939A8B895FF98709899D61A578F68A8
22D6CFB7A000AD2B69212700685F8E729740E6656D3B8D43A0C52B18628B0EFF
5F05D1944E33A86827C6670A3438CE653DA430AB3E54D22481FDFA780C4812C2
F3255AA0E07A5FC796A8653D62150A6CD8B7FE4B68F43CAA66CB6512EB54E359
E67F4D5FAA2BB87B8812835557ADA47955DD5F> |-
/x <1C60D8A8C9B08A95D222871B45C8170346D4B3692E8D5307651DE3271DD6
AF0FFCDE284DD9CDD3B987BD9A4951E635C7A5CDCF53A699D8D2BA39BF571FED
C61B4760FA01C102B3CF6C44B24A57107DFFEFB711E00B7E6B8A7F332F9AC2C5
3243312E3CD55C94054BCA0B5D37362E138F5DD97019783B5271FD96258D5354
389532FB5D3FC50CB007DF880768FCF0AAEC6D6F5D8AB1559D6270DF0761EAD0
57A9F39E9A718AA16D8D8ECA90D61565C41A9B86CA057EC652FEE1927FFE969C
A046D06A10E75C83320EEEAB290370B870EF0E26D64C8EE9F9FD2B5549> |-
/y <1C60D8A8C9B08A95D222871B45C8674D920EF37C9F679699CE0B0FB82274
530CA6994E4FADB5C701717EBB278510CEF9D9EF1CB9FAAD7A4852BC3264781D
C6E288589EC6BAAB146DF34989FBC4BF92E31D5C616C1050CCC8D58166B328D1
E315EF5F39AF721DC6173775DFB26E6B6D40709A2BB053DECCFFF00649FC51FF
5F341744BBA1E71297E598A51054A43B9F951D7105485742D0A3BB595676EC69
1F5215F9D0DE2FC2C87BF5CCF8146FF6F88E> |-
/z <1C60D8A8C9B08A95B1F07368C45D864DF4474A20871FC664B8852059094E
95B1AD892B88EC35B7805C7F08622DA0E6CE40252085D0FCEAC9B69DEE7AC3FB
4801FCBDCE2F88570AA73B253F1D5D5B25E723A6A6E28A8B6198E25FE08D9384
A6F44E1422CD02B5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NCPDHG+CMR10 /Encoding get
dup 12 /fi put
dup 34 /quotedblright put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 55 /seven put
dup 57 /nine put
dup 58 /colon put
dup 61 /equal put
dup 65 /A put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 77 /M put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /quotedblleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
pop
%ADOEndSubsetFont
/NCPDHG+CMR10*1 
[12{/.notdef}rp /fi 21{/.notdef}rp /quotedblright 5{/.notdef}rp /parenleft /parenright 2{/.notdef}rp 
/comma /hyphen /period /.notdef /zero /one /two /three 
/four 2{/.notdef}rp /seven /.notdef /nine /colon 2{/.notdef}rp /equal 
3{/.notdef}rp /A 3{/.notdef}rp /E /F 2{/.notdef}rp /I 3{/.notdef}rp 
/M 5{/.notdef}rp /S /T /U 4{/.notdef}rp /Z /bracketleft 
/quotedblleft /bracketright 3{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /.notdef /k /l /m 
/n /o /p /q /r /s /t /u 
/v /w /x /y /z 133{/.notdef}rp]
NCPDHG+CMR10 nf
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
3.27274 275.728 mo
(groups,buttoplacethemonacontinuousscaleof\\how)
[5.04 3.96333 5.04 5.52444 5.52444 3.95557 5.88214 5.52444 5.52443 7.08113 3.84121 8.27992 
5.52443 2.76222 5.03999 4.43562 7.55553 3.8412 5.52444 4.43561 11.6365 5.03999 8.64452 8.28008 
4.43562 5.03999 5.28459 3.84119 2.76221 5.28452 5.52443 5.04001 5.52443 7.07573 3.95557 4.43561 
5.03998 2.76224 7.55573 5.03998 6.24451 5.04001 5.52444 4.80014 0 ]xsh
3.27274 287.128 mo
(much"theybelongtoonegrouportheother.)
[8.03646 5.52443 4.19553 5.52444 8.28 3.84121 5.52443 4.43561 8.64206 5.7646 4.43561 2.76221 
5.04 5.52444 8.27985 3.84119 8.27992 5.03999 5.52444 7.79576 5.03999 3.96335 5.03999 5.52443 
8.64444 5.03999 7.20317 3.84119 5.52446 7.79576 5.03998 3.84123 5.52441 4.43561 3.96335 0 
]xsh
13.2329 298.648 mo
(AsanexampleofthisalgorithmweshowinFig.2the)
[7.43999 7.0755 5.04001 8.64451 4.43561 5.28221 5.04001 8.27663 5.52443 2.76221 7.43562 5.03999 
6.12459 3.8412 5.52443 2.76221 7.1955 5.04001 2.76221 5.04001 5.03998 3.96335 2.76221 3.84122 
5.52441 11.2766 6.95798 7.43559 3.95557 5.52443 4.80008 10.1978 2.76222 8.76434 6.48224 2.76218 
5.04001 5.76221 8.15976 3.84119 5.52444 0 ]xsh
3.27274 310.048 mo
(resultofitsapplicationtoafamousnetworkfromtheso-)
[3.96333 4.43561 3.95558 5.52444 2.76221 6.60105 5.04001 5.88435 2.76222 3.8412 6.83542 5.03999 
5.52444 5.52443 2.76223 2.76221 4.43562 5.03998 3.8412 2.76222 5.03999 8.16451 3.84122 7.92014 
7.8 3.00444 5.03999 8.27661 5.03999 5.52443 6.71559 5.52443 4.43562 3.60133 6.95798 5.03998 
3.96335 7.92215 3.00441 3.96336 5.03999 11.0364 3.84119 5.52448 7.31567 3.95557 5.03998 0 
]xsh
3.27274 321.567 mo
(cialscienceliterature,whichhasbecomesomethingofa)
[4.43561 2.76221 5.04 6.12238 3.95557 4.43561 2.76221 4.43562 5.52443 4.43561 7.91568 2.76222 
2.76221 3.84121 4.43561 3.96333 5.03999 3.8412 5.52444 3.96332 4.43562 6.1223 7.19781 5.52444 
2.76221 4.19569 8.88451 5.52443 5.04001 7.31566 5.76459 4.43559 4.43562 5.03998 8.27661 7.91553 
3.95558 5.03998 8.27661 4.43559 3.84122 5.52441 2.76221 5.52441 8.40015 5.04001 6.48434 0 
]xsh
3.27274 332.967 mo
(standardtestforcommunitydetectionalgorithms.The)
[3.95557 3.84121 5.04 5.52444 5.52444 5.04 3.96333 9.12444 3.84121 4.43561 3.95557 7.68111 
3.00444 5.04 7.68325 4.43561 5.04001 8.27661 8.03662 5.52443 5.52443 2.76222 3.6012 8.88229 
5.52443 4.43561 3.8412 4.43562 4.43559 3.8412 2.76221 5.03999 9.36452 5.03998 2.76222 5.03998 
5.04002 3.96332 2.76221 3.84119 5.52441 8.27661 3.9556 8.28226 7.19781 5.52441 0 ]xsh
3.27274 344.367 mo
(networkisthe\\karateclub"networkofZachary[23],)
[5.52444 4.4356 3.60136 6.95798 5.04001 3.96333 9.96236 2.76222 8.87541 3.84121 5.52443 9.35553 
5.04 4.68213 5.03999 3.96335 5.03999 3.8412 9.1156 4.43562 2.76221 5.52443 5.52444 9.84007 
5.52443 4.43561 3.60136 6.95796 5.03999 3.96335 9.96239 5.03998 7.92459 6.11884 5.04001 4.19574 
5.52441 5.04004 3.96332 9.84235 2.76123 5.03998 4.91974 2.76224 0 ]xsh
3.27274 355.888 mo
(whichshowsthepatternoffriendshipsbetweenthemem-)
[7.19782 5.52444 2.76221 4.19569 8.04428 3.95558 5.52443 4.80009 7.19782 6.35574 3.84121 5.52443 
7.07545 5.52443 5.03999 3.84122 3.8412 4.43559 3.96335 8.04449 5.04001 5.5246 3.00443 3.96335 
2.76221 4.43561 5.52443 5.52444 3.95557 5.52443 2.76219 5.52444 6.47542 5.76459 4.43561 3.60104 
6.95798 4.43559 4.43561 8.04436 3.84119 5.52444 6.95551 8.27661 4.43561 8.27661 0 ]xsh
3.27274 367.288 mo
(bersofakarateclubataUSuniversityinthe1970s.)
[5.76459 4.43561 3.96333 8.5155 5.04 7.56443 9.60001 4.6823 5.03999 3.96333 5.04 3.84119 
8.87577 4.43561 2.76222 5.52441 10.2044 5.03999 8.40103 9.60001 7.44 10.0844 5.52443 5.52443 
2.76221 5.04207 4.43559 3.96335 3.95558 2.76218 3.60114 9.72215 2.76222 10.2046 3.84117 5.52448 
8.99573 5.03998 5.04004 5.03998 5.04004 3.95551 0 ]xsh
3.27274 378.808 mo
(Thisexampleisofparticularinterestbecause,shortly)
[7.19782 5.52444 2.76221 8.6355 4.43562 5.28221 5.03999 8.27663 5.52443 2.76222 9.11546 2.76221 
8.75549 5.04001 7.68436 5.52443 5.03999 3.96335 3.84119 2.76222 4.43561 5.52443 2.76221 5.04001 
8.52335 2.76221 5.28429 3.8412 4.43559 3.96333 4.43562 3.95554 8.52138 5.76459 4.43559 4.43562 
5.03998 5.52443 3.95558 4.43561 7.80206 3.95557 5.52441 5.03998 3.96338 3.84119 2.76221 0 
]xsh
3.27274 390.208 mo
(aftertheobservationandconstructionofthenetwork,)
[5.04 3.00443 3.84121 4.43561 8.52317 3.8412 5.52443 9.11569 5.04 5.52444 3.95557 4.43562 
3.96333 4.68222 5.03999 3.84122 2.76221 5.03999 9.96429 5.03999 5.52444 10.0843 4.43562 5.03998 
5.52444 3.95557 3.8412 3.96333 5.52444 4.43559 3.84119 2.76222 5.03998 10.0843 5.03999 7.56442 
3.84119 5.52446 9.11566 5.52441 4.43561 3.60138 6.95795 5.03998 3.96338 5.2822 0 ]xsh
3.27274 401.728 mo
(theclubinquestionsplitintwoasaresultofaninter-)
[3.84121 5.52443 8.27545 4.43561 2.76222 5.52443 9.2446 2.76221 9.36436 5.28222 5.52443 4.43561 
3.95557 3.8412 2.76222 5.03999 9.24451 3.95557 5.52444 2.76222 2.76221 7.68127 2.76221 9.24445 
3.6012 6.95798 8.76015 5.03999 7.67549 8.76015 3.96335 4.43559 3.95558 5.52441 2.76219 7.56122 
5.03998 6.72458 5.03998 9.24451 2.76224 5.28427 3.84119 4.43561 3.96332 0 ]xsh
3.27274 413.128 mo
(naldispute.Applyingoureigenvector-basedalgorithmto)
[5.52444 5.04 5.16214 5.52444 2.76221 3.95557 5.52444 5.52444 3.84119 4.43561 6.84222 7.43999 
5.52443 5.52444 2.76222 5.28221 2.76221 5.52444 7.43983 5.03999 5.52444 6.24335 4.43561 2.76221 
5.04001 4.43559 5.28459 5.04205 4.43562 4.43561 3.8412 5.04001 3.96332 3.35663 5.52443 5.03998 
3.95558 4.43559 7.56444 5.03998 2.76222 5.03999 5.04001 3.96332 2.76224 3.84119 5.52441 10.5565 
3.84119 0 ]xsh
3.27274 424.647 mo
(thenetwork,we\014ndthedivisionindicatedbythedotted)
[3.84121 5.52443 7.31569 5.52444 4.4356 3.60136 6.95798 5.04001 3.96333 5.28221 5.64215 6.95798 
7.19561 5.52443 5.52444 8.52443 3.8412 5.52444 7.31567 5.52444 2.76222 5.28221 2.76221 3.95557 
2.76224 5.03999 8.40451 2.76222 5.52443 5.52443 2.76221 4.43559 5.03999 3.84122 4.43559 8.40436 
5.28453 8.16237 3.84117 5.52448 7.31567 5.52441 5.04004 3.84119 3.84119 4.43561 0 ]xsh
3.27274 436.047 mo
(lineinthe\014gure,whichcoincidesexactlywiththeknown)
[2.76221 2.76222 5.52443 7.07553 2.76221 8.16436 3.84121 5.52443 7.19577 5.52443 5.03999 5.52444 
3.96335 4.43559 5.40231 7.19781 5.52444 2.76221 4.19568 8.16461 4.43561 5.03999 2.76222 5.52441 
4.43562 2.76221 5.52443 4.43562 6.47557 4.43562 5.28221 5.04001 4.43559 3.84119 2.76222 7.80223 
7.19781 2.76222 3.84119 8.2845 3.8412 5.52448 7.07544 5.2822 5.52444 4.79999 7.19781 0 
]xsh
3.27274 447.567 mo
(divisionoftheclubinreallife.)
[5.52444 2.76221 5.28221 2.76222 3.95557 2.76221 5.04001 8.76428 5.04001 6.36443 3.8412 5.52444 
7.79577 4.43561 2.76221 5.52444 8.88445 2.76221 8.76436 3.96333 4.43561 5.04001 6.00206 2.76222 
2.76221 3.00443 4.43561 0 ]xsh
13.2329 458.967 mo
(TheverticesinFig.2areshadedaccordingtotheval-)
[7.19782 5.52444 7.55569 5.04206 4.43561 3.96333 3.8412 2.76221 4.43561 4.4356 7.07574 2.76221 
8.64445 6.48221 2.76224 5.03998 5.88199 8.16014 5.03999 3.96335 7.55576 3.95558 5.52443 5.04001 
5.52443 4.43559 8.52443 5.03999 4.43562 4.43559 5.04002 3.9633 5.52443 2.76222 5.52441 8.03999 
3.84117 8.16003 3.84119 5.52448 7.67542 4.68231 5.03998 2.76221 0 ]xsh
3.27274 470.487 mo
(uesoftheelementsintheleadingeigenvectorofthemod-)
[5.52444 4.4356 6.47542 5.04001 5.64451 3.84121 5.52443 7.07545 4.43561 2.76221 4.43561 8.27662 
4.43561 5.28429 3.84121 6.59541 2.76222 8.04443 3.8412 5.52443 7.07545 2.76221 4.43562 5.03999 
5.52443 2.76221 5.52444 7.56 4.43561 2.76221 5.03999 4.43562 5.28459 5.04205 4.43559 4.43562 
3.84119 5.04001 6.36327 5.03998 5.6445 3.84119 5.52448 7.07544 8.27661 5.28015 5.52441 0 
]xsh
3.27274 481.887 mo
(ularitymatrix,andthesevaluesseemalsotoaccordwell)
[5.52444 2.76221 5.04001 3.96333 2.76221 3.60104 8.28221 8.27663 5.03999 3.84121 3.96333 2.76221 
5.28223 5.88206 5.04 5.52443 8.64445 3.8412 5.52443 4.43561 3.95557 7.43561 4.68231 5.03998 
2.76222 5.52443 4.43562 7.07541 3.95558 4.43561 4.43559 11.3965 5.03998 2.76222 3.95558 7.92007 
3.84119 8.16 5.03999 4.43561 4.43558 5.04004 3.96332 8.52441 6.95798 4.43561 2.76221 0 
]xsh
3.27274 493.408 mo
(withknownsocialstructurewithintheclub.Inpartic-)
[7.19782 2.76222 3.84121 9.4845 5.28222 5.52444 4.8 7.19783 9.36459 3.95557 5.27984 4.43562 
2.76221 5.04 6.48213 3.95558 3.8412 3.96333 5.52443 4.43561 3.84122 5.52443 3.96333 8.27554 
7.19781 2.76221 3.84122 5.52443 2.76221 9.48459 3.84119 5.52446 8.39577 4.43559 2.76222 5.52441 
5.52443 9.00204 3.59885 9.36459 5.52441 5.04001 3.96332 3.84122 2.76221 4.43558 0 ]xsh
3.27274 504.807 mo
(ular,thethreeverticeswiththeheaviestweights,either)
[5.52444 2.76221 5.04001 3.96333 6.24214 3.8412 5.52444 8.0356 3.84121 5.52443 3.96333 4.43562 
7.91568 5.04206 4.4356 3.96335 3.8412 2.76221 4.43562 4.43558 7.31561 7.19781 2.76221 3.84122 
9.12436 3.8412 5.52443 8.03561 5.52443 4.43562 4.80014 5.28223 2.76218 4.43561 3.95555 7.32137 
6.95798 4.43559 2.76222 5.03998 5.28436 3.84119 3.95557 6.24207 4.43558 2.76224 3.84119 5.52444 
4.43561 0 ]xsh
3.27274 516.327 mo
(positiveornegative\(blackandwhiteverticesinthe\014g-)
[5.76459 5.04 3.95557 2.76221 3.8412 2.76222 5.04221 7.91553 5.04 7.32348 5.52443 4.43561 
5.04 5.04 3.84119 2.76224 5.04228 7.79561 3.84122 5.52441 2.76221 5.04001 4.19577 8.76237 
5.03999 5.52443 9.00459 7.19783 5.52443 2.76221 3.8412 7.91545 5.04205 4.43559 3.96335 3.84119 
2.76222 4.43559 4.43561 7.31557 2.76221 9.12451 3.84119 5.52444 7.91571 5.52441 5.04004 0 
]xsh
3.27274 527.727 mo
(ure\),correspondtotheknownringleadersofthetwofac-)
[5.52444 3.96333 4.43561 3.8412 5.76221 4.43561 5.04 3.96333 3.96333 4.43561 3.95557 5.7646 
5.03999 5.52444 8.16436 3.8412 7.79985 3.8412 5.52443 7.43561 5.28223 5.52443 4.8 7.19781 
8.28452 3.96333 2.76222 5.52443 5.03999 2.76221 4.43562 5.03999 5.52441 4.43562 3.9633 6.59543 
5.03998 5.88437 3.84119 5.52448 7.31567 3.6012 6.95798 7.79999 3.00443 5.03998 4.43561 0 
]xsh
3.27274 539.247 mo
(tions.)
[3.84121 2.76221 5.04 5.52444 3.95557 0 ]xsh
%ADOBeginSubsetFont: QJJAAA+CMBX9 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QJJAAA+CMBX9 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 68 /D put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
def
/FontBBox {0 -201 959 700} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-12 -0 686 698 444 453 656 676] def
/OtherBlues [-201 -194] def
/BlueScale 0.04379 def
/StdHW [49] def
/StdVW [117] def
/StemSnapH [40 49] def
/StemSnapV [117 145] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
19 dict dup begin
/D <1C60D8A8C9B08A942CB42A414BCF86DA183F4ED8A8B10CC13164BDC52955
D6590791CA016590D9F53ACD3E4EE6E2D156C40FD4B21A317BC958C345954ECF
24ECCE3527DD3FC7BE60D05F4093E4D07A217B020C64F9D83E729B8E90A3493E
BF86D60FCC9F67515A7F8E> |-
/a <1C60D8A8C9B08A95FC54E1C48047F2362181CB542D2F1674127C4F4C9F7D
1717C10CB7168AC7978C4308060BAA30F50573C35A919CB30E7227D3796479AD
176BB8B7FEC788EA553F36F15301E6AAF2BE77029D06C13B9B359811DF27FFA6
C5944ED560DCE4BF76A4D69452F33E217F01FB82A1A9C25A6D971ED9D5B2EC51
FD692DF7E02BAC21EE5ACA74903F5139FF2348627FC7965466C31B> |-
/c <1C60D8A8C9B08A95D14AE181C28DB9FD70BFD1FE9D3C0BCA8C20DEE6C744
0BE7DFA215F7478DFF85D1A537DDD3115051BD387B2EA88327840F842A0379DB
67C73B631A23E7A02945CB1445D58D6DF11F59AE8B95AA7600C14A1AC41A969B
411F42F13C6106D4C588E9D0F7DBC268DC71FAB59CBF893274063BF99E82AB1D
190415E01070CD66> |-
/d <1C60D8A8C9B08A944E3530956F6368EC7C2A389E49F1A22C99021324E30F
46CC2E41850B4FD3EE1B2D9F8D1AFA92FDC0F5CD864BD8A75F9C76F2CFBAC9F8
12C57A332B05A582FEB55D4ADCFD091C2E21DC632D1B392E29F03F7B46EA4351
BB5AFEAC9AC6103D338A41B31C02A0B97AE80CC85FC961DA02CB9986EC0428FC
59E44BE8DB229173D36C> |-
/e <1C60D8A8C9B08A95C8E18CF8D999519B73BF20480F893073DADC6532C273
FCF8B2BC68B1CEA4DC2243B456412ED6AD926E6FA483A9369231CF5D87E62A41
973253537172C1ED93DE5DB5FA690072E85EC623D7D1A33DFE06B2329F47AA52
48B29D32D6B4AEC80AC1D843AFD7BF45BE315B0416EC2996C49264647B31857B
22> |-
/g <1C60D8A8C9B08A95FB066076D5BF6540FB349E601F6889867401A8338E03
5CD1D7D55AAD658BD07ADD0920C300008C9ECECCEB0424D3970E602891DCE5C3
D2AD26478C3BC2219B3E59606C63D3FBAE9EEA90D950441B0A31E20E8FB6EF52
946F6A458B929F4446CF3594B1FA74BD01EF569D8FEA0757084A0B87E7A94528
B2BCE7547EEEEC22F1B2EBA51748CC33787C90AE3577E2DA71B01D26E7585271
29FE538A5073E29727C22438B365F7C12D1201A9956028BBA4E9B7D6E42E5DED
6F4BB9776749E4382B367D46D3BEEF722A3646FABF72600D8657ED7CAA7896B7
01F6F573F4F744F061B49F15725B73A2B9> |-
/h <1C60D8A8C9B08A944E3530956F63667F65F6F0CB90C1F53B8168191E057B
8836609AE40B305AD3D6CCB139AE91DADB419E9E70AD528CC427D019F96F7B48
3EC2567FF79AA1A310FCDAB3C3050F7C7CA0EB4CF4CACEF51D80BAD8F99EA240
B6DDC43CE1616B84E61EA9F9F036780B0072A36766CAF7DBC5D7BE9AB68C950A
B820E694FB1928> |-
/i <1C60D8A8C9B08A95104D8565ABCACFC8C2C729CFD92A27BC2F1B92176437
CEE8E8DFF0716AF0B25E2A77CC3F77866D20FF71A07B7C6374BB91294FD42178
188E1D87C82F4F607A14A2FC593A9B84E2960D67A22DFFACE77364D6704639AA
DC03380E6C> |-
/k <1C60D8A8C9B08A95EF9E0D6E61BB925279365AA4A60E661834E195A470DF
0C9DA82B8AD9E081E3BB394E127447C44C754282780C7EEDB49362B4CF883399
B9C1BA4899DE66267906343C8F3A83864C6E7AA0AEC2571F6793BA52F83F870C
805C1234DF138FFE0B999E28A15D81ACF73967292C1D992BA04BBDAB1C22565D
CBDE1DBDF901FE2926AB2F83115C6ABA2D113CAF80369A9088F1CF5E6BA95263
590BD9ABC56171A431F9B1> |-
/m <1C60D8A8C9B08A94CF32AC5275A0EBFEA32A529770158F444C178BB5A03D
3750DA3BFAF640FCCF8A9224335890CCF864927A4AC6B1429C830C764153DAD3
DCFBB20B04EE08102EF462A55D20630FD157F4BE85D5EE3604FFBFC5C9AA8D95
3AC54B1C11B165ECE5973456E3F45581A7AA708E2458AD215489B01A13C98548
0BF2AC5CE8E8E3B5FEAE3F41BA3CAA75DA060D8CE6F4984A60FBB3FEED0616F9
E1EBFAACBB5AD14A5B3AC653B8CB4E275141A9A4FD29F20D432CEF29F8DBA6> |-
/n <1C60D8A8C9B08A944E3530956F63667F65F6F0CB90CF241D98757FB74592
7CD21746D73EB0C0060975EA2D3FA2524BDC1F88EF31EC0B9AF15F84FE8FBDF8
6C1AF0B7478B49739CC8B77E636D673A1E3525EFA9D9990CC104CD82826A26A4
FC0F288FE95A9EE8C86BCB77252EF3939C4D133D802CBD6474FC85EDBD26F934
E4818F747B> |-
/o <1C60D8A8C9B08A95FB066076D5BF1BC41796C453739D98FFB4C1AB976428
A1972249FCEDBC1AFE5E9C82C65E169804E650F73014308EED7F8570C73A1EB1
991BB22DEBB3D72F95CDA589DC72DAD2CADD29A9256913F4C8C796A953345313
8832> |-
/r <1C60D8A8C9B08A95A2FF476AFB2B94CF694D01FCFD88F8AA0B4B04A8D80A
6C9492517D2F6110D97CA1BFCD07F0423B24079137968E005808273624FAF105
A8190E3FD54016F3C0139308D3B67218767005D250F9474FB745AE4D15F95725
309666830E3CB5B036D003F2E61F27DDD8242568E9D1> |-
/s <1C60D8A8C9B08A95AA94DB1547F61FF062D7C58B3E99DC0FC8E89A640108
E369457707F801573B3BA68D26BC93B984BBEACAD585BCBF08038112925FEA37
AD62E17C471B188ECF019D4F63DE524E66CA139448EC9724891490020117E94E
D12A19950FC53B0D1EE31F24037C819A4BF23C6FCADA2D0DA3F7969B2287C6CC
A5F816C64E89AE7188320B8BEF01A848615A63402C57023254EC7EF3B16F1715
842B58141F5E98E77BD7EF27A055916B7484A2> |-
/t <1C60D8A8C9B08A95AF0DB396ABDAB6E7718F096890542846D9370A6800BC
A31EA4D85B82AA6619DD362123AB4DD42383B1715C8A83313D6EE5622B416ACF
6AFFDD40803F648A552DA7438ED7362611857E2C58EB21D431D1B8BF0BA6C7E4> |-
/u <1C60D8A8C9B08A944E3530956F6368EC7C2A0B208B62F7EC8ACCC90D6316
5A92A88B27DFF79C5534BDA95898E5E3984BD09438BAFA73333289656B27A25A
B429C7A6D6C3402448623B1BB2FF86A6FAC83BD51855F094D74EDAFE76A094EC
5619FA1605C7C329AB35> |-
/v <1C60D8A8C9B08A95EF9E0D6E61BB9FC94544C2F254889F0C6DD2D977D0DC
74AEBDF2F545616E55B658E6088698D078C01836F1DF316B54580E2E866BD7D3
823EEFCEADC351BB6769CA38BA11C10D68100F33B5EC7861D152F79FDD23E5BC
8C650837635C48B7DDFB93D12FBAD28916D544F226D72EC1> |-
/w <1C60D8A8C9B08A940351D9F6F8B537510F280C704EA1E380450949DF396B
C2E199A12516DE6BD38FE1ECA51FAA5DDEA83A8B9CDE987E2ABEE0CE4E7DED9A
73BFF6521DEB5FC8A5BBFB4E6DE65DC2FC035931534EECC36E44616BE4A5560B
C67AB0725904D6ED2D64234BE857E194516397FC7C7CEE4112FC7ACD5A72EF7E
7FF97DFC2FE9C9A7298EBFB0910FE2C3A4C0E9D140FE2FFBB9C7F2D59FFADCF6
38CC296CB135F0924EF4A25411A1D5F8B08ADAF0> |-
/.notdef <1C60D8A8C9B08A9586D4F7B21AA93E> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/NCPDHI+CMBX9 /QJJAAA+CMBX9 findfont ct_VMDictPut
/NCPDHI+CMBX9*1 
[68{/.notdef}rp /D 28{/.notdef}rp /a /.notdef /c /d /e 
/.notdef /g /h /i /.notdef /k /.notdef /m 
/n /o 2{/.notdef}rp /r /s /t /u /v 
/w 136{/.notdef}rp]
NCPDHI+CMBX9 nf
NCPDHI+CMBX9*1 [8.96638 0 0 -8.96638 0 0 ]msf
6.03289 572.847 mo
(Dividingnetworksintomorethantwocommunities)
[8.16335 3.00269 5.64424 3.00269 5.87645 3.00269 5.87645 8.64304 5.87645 4.92028 3.83833 7.44328 
5.28302 4.31909 5.64424 7.68213 3.00269 5.63628 4.07849 8.76288 8.8791 5.28302 4.31908 8.52029 
4.07848 5.87645 5.158 9.47644 3.83835 7.44327 8.76321 4.68074 5.28305 8.8791 8.63919 5.87643 
5.87643 3.00266 4.07852 3.00266 4.92029 0 ]xsh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
13.2329 598.527 mo
(Intheprecedingsectionwehavegivenasimplematrix-)
[3.59884 7.92436 3.8412 5.52443 6.95553 5.52444 3.96332 4.4356 4.43561 4.43562 5.52443 2.76221 
5.52444 7.31993 3.95557 4.43561 4.43561 3.8412 2.76222 5.04001 7.92444 6.95798 6.83545 5.52443 
4.79993 5.04205 6.71553 5.03999 2.76221 5.04207 4.43559 7.80429 7.43985 3.95558 2.76218 8.27661 
5.52441 2.76224 6.83551 8.27661 5.03998 3.84122 3.96332 2.76221 5.28223 0 ]xsh
3.27274 609.927 mo
(basedmethodfor\014ndingagooddivisionofanetwork)
[5.52444 5.04 3.95558 4.4356 9.72452 8.27662 4.43561 3.8412 5.52443 5.28016 9.96459 3.00443 
5.04 8.16335 5.52441 5.52444 5.52444 2.76221 5.52444 9.35999 9.23984 5.04001 5.27991 5.28008 
9.72437 5.52443 2.76221 5.28223 2.76219 3.95558 2.76218 5.04002 9.84435 5.03998 7.20428 9.36014 
5.52441 4.43564 3.60135 6.95795 5.03998 3.96338 0 ]xsh
3.27274 621.447 mo
(intotwoparts.Manynetworks,however,containmore)
[2.76221 5.28428 3.84121 8.99984 3.6012 6.95798 8.88008 5.52444 5.04 3.96333 3.8412 3.95557 
9.12207 9.12342 5.03999 5.28429 9.12213 5.52444 4.43561 3.60136 6.95798 5.03999 3.96333 5.28221 
3.9556 6.72237 5.52443 4.79993 6.95798 4.43559 5.0423 4.43559 3.96335 6.72214 4.43559 5.04002 
5.28458 3.84119 5.04001 2.76221 9.36444 8.27661 5.03998 3.96332 0 ]xsh
3.27274 632.847 mo
(thantwocommunities,sowewouldliketoextendour)
[3.84121 5.52443 5.04 9.84428 3.6012 6.95798 9.23985 4.43561 5.04001 8.27661 8.03661 5.52444 
5.52444 2.76221 3.8412 2.76222 4.43561 3.95557 7.32214 3.95557 9.23999 6.95798 8.75577 6.95798 
5.03999 5.52444 2.76219 9.72427 2.76222 2.76219 5.04237 8.63544 3.84119 9.36002 4.43559 5.2822 
3.84125 4.43561 5.52441 9.8446 5.03998 5.52444 0 ]xsh
3.27274 644.367 mo
(methodto\014ndgooddivisionsofnetworksintolarger)
[8.27662 4.43561 3.8412 5.52444 5.28016 10.5646 3.84121 9.96 5.52443 5.52444 10.5644 5.04 
5.27992 5.28008 10.4443 5.52443 2.76222 5.28223 2.76221 3.95557 2.76224 5.03998 5.52444 8.75574 
5.03999 8.04451 5.52443 4.43562 3.60133 6.95798 5.03998 3.96335 5.28221 8.6355 2.76222 5.28429 
3.84119 9.95999 2.76224 5.03998 3.96335 5.03998 4.43558 0 ]xsh
3.27274 655.767 mo
(numbersofparts.Thestandardapproachtothisprob-)
[5.28452 5.52444 8.03677 5.7646 4.43561 3.96333 7.67566 5.04001 6.72459 5.52444 5.03999 3.96333 
3.84121 3.95557 8.28221 7.19783 5.52443 8.27562 3.95557 3.8412 5.04001 5.52443 5.52443 5.03999 
3.96333 9.12445 5.03999 5.52444 5.52443 3.96332 5.04001 5.03999 4.19553 9.00444 3.84119 8.76001 
3.84119 5.52444 2.76221 7.67554 5.52444 3.96335 5.03998 5.52441 0 ]xsh
3.27274 667.287 mo
(lem,andtheoneadoptedhere,isrepeateddivisioninto)
[2.76221 4.43561 8.27662 6.36206 5.04001 5.52443 9.00459 3.8412 5.52443 7.9157 5.03999 5.52443 
7.9157 5.03999 5.52443 5.04001 5.52443 3.8412 4.43561 8.88452 5.52443 4.43561 3.96333 4.43562 
6.24222 2.76221 7.43558 3.96335 4.43559 5.76459 4.43561 5.04001 3.84119 4.43562 9.00458 5.52443 
2.76222 5.28221 2.76218 3.9556 2.76218 5.04001 9.00452 2.76221 5.2843 3.84119 0 ]xsh
3.27274 678.687 mo
(two:weusethealgorithmoftheprevioussection\014rst)
[3.6012 6.95798 5.04001 9.00206 6.95798 8.63544 5.52444 3.95557 8.63553 3.8412 5.52443 8.6356 
5.04001 2.76221 5.04001 5.03998 3.96335 2.76221 3.84122 5.52441 12.4765 5.04001 7.20427 3.8412 
5.52443 8.75554 5.52443 3.96335 4.43559 5.28221 2.76219 5.04001 5.52443 8.03572 3.95558 4.43559 
4.43558 3.84125 2.76218 5.04001 9.72443 5.52441 3.96338 3.95554 0 ]xsh
266.313 19.1671 mo
(todividethenetworkintotwoparts,thendividethose)
[3.84119 8.87994 5.52441 2.76221 5.28223 2.76221 5.52441 8.39548 3.84119 5.52444 8.51569 5.52441 
4.43564 3.60135 6.95798 5.03998 3.96335 9.0022 2.76227 5.28424 3.84122 8.99985 3.60126 6.95795 
8.88013 5.52441 5.04001 3.96335 3.84122 3.95557 6.72205 3.84122 5.52444 4.43558 9.6044 5.52444 
2.76215 5.28223 2.76227 5.52435 8.39545 3.84125 5.52441 5.04004 3.95557 0 ]xsh
266.313 30.5671 mo
(parts,andsoforth.)
[5.52444 5.04001 3.96332 3.84122 3.95554 6.00214 5.03998 5.52448 8.76434 3.95557 8.27985 3.00439 
5.04001 3.96335 3.84119 5.52444 0 ]xsh
276.273 42.0874 mo
(Indoingthisitiscrucialtonotethatitisnotcorrect,)
[3.59882 8.64429 5.52444 5.04001 2.76218 5.52444 8.04001 3.84119 5.52444 2.76221 7.1955 2.76221 
6.96109 2.76224 7.07541 4.43558 3.96335 5.52441 4.43561 2.76224 5.04001 5.76224 3.84122 8.16003 
5.52441 5.04004 3.84119 7.55573 3.84125 5.52441 5.04004 6.96136 2.76224 7.08105 2.76224 7.07541 
5.52444 5.03998 6.96118 4.43555 5.04004 3.96338 3.96332 4.43561 4.43555 3.84125 0 ]xsh
266.313 53.4874 mo
(after\014rstdividinganetworkintwo,tosimplydeletethe)
[5.03998 3.00443 3.84122 4.43561 6.84351 5.52441 3.96335 3.95557 6.72134 5.52444 2.76221 5.28223 
2.76221 5.52441 2.76224 5.52441 8.04001 7.91989 5.52444 4.43558 3.60138 6.95795 5.04004 3.96332 
8.04208 2.76224 8.52435 3.60126 6.95795 5.04004 5.6423 3.84122 7.9202 3.9556 2.76221 8.27661 
5.52441 2.76218 8.28226 5.52441 4.43561 2.76221 4.43561 3.84119 7.43561 3.84119 5.52448 0 
]xsh
266.313 65.0073 mo
(edgesfallingbetweenthetwopartsandthenapplythe)
[4.43561 5.52444 5.03998 4.43561 7.67551 3.00443 5.03998 2.76221 2.76224 2.76218 5.52444 8.87991 
5.76459 4.43561 3.60104 6.95798 4.43558 4.43564 9.36429 3.84119 5.52444 8.39572 3.60123 6.95798 
8.8801 5.52444 5.03998 3.96338 3.84119 7.67542 5.04001 5.52444 9.36432 3.84119 5.52444 4.43558 
9.4845 5.03998 5.52441 5.52441 2.76221 9.12244 3.84119 5.52441 0 ]xsh
266.313 76.4073 mo
(algorithmagaintoeachsubgraph.Thisisbecausethe)
[5.03998 2.76224 5.03998 5.04001 3.96332 2.76221 3.84119 5.52444 12.2366 5.04001 5.04001 5.03998 
2.76221 9.48462 3.84119 9.12015 4.43561 5.04001 4.19568 9.4845 3.95557 5.52435 5.52444 5.04001 
3.96335 5.04001 5.52441 5.52441 9.48239 7.19781 5.52441 2.76218 8.03552 2.76224 8.03555 5.76459 
4.43555 4.43561 5.04004 5.52441 3.95557 8.5155 3.84125 5.52441 0 ]xsh
266.313 87.9272 mo
(degreesappearinginthede\014nition,Eq.\(1\),ofthemod-)
[5.52444 4.43561 5.03998 3.96335 4.43561 4.43561 7.07547 5.04001 5.52444 5.76434 4.43561 5.04001 
3.96332 2.76221 5.52444 8.28 2.76221 8.88428 3.84122 5.52444 7.79572 5.52444 4.43558 5.52438 
5.52444 2.76221 3.84125 2.76221 5.04004 5.52441 6.12207 6.84439 5.28226 6.00214 3.84186 5.03998 
3.84125 6.12241 5.04001 6.36444 3.84125 5.52441 7.79572 8.27655 5.28027 5.52441 0 ]xsh
266.313 99.3273 mo
(ularitywillchangeifedgesaredeleted,andanysubse-)
[5.52444 2.76221 5.03998 3.96335 2.76221 3.60104 9.24207 7.19781 2.76221 2.76218 6.84238 4.19562 
5.52444 5.03998 5.52444 5.04001 8.2756 2.76221 7.20456 4.43558 5.52444 5.04001 4.43558 7.91571 
5.04004 3.96332 8.27567 5.52444 4.43555 2.76227 4.43555 3.84125 4.43555 5.52441 7.08209 5.03998 
5.52444 9.60458 5.03998 5.28436 9.24207 3.95557 5.52441 5.52441 3.95557 4.43561 0 ]xsh
266.313 110.847 mo
(quentmaximizationofmodularitywouldthusmaximize)
[5.28223 5.52441 4.43561 5.28436 7.2012 8.27661 5.03998 5.28223 2.76221 8.27661 2.76221 4.43558 
5.04004 3.84119 2.76221 5.03998 8.76453 5.04001 6.36444 8.27658 5.28021 5.52441 5.52438 2.76224 
5.04001 3.96335 2.76224 3.60135 8.64209 6.95795 5.04004 5.52441 2.76224 8.76447 3.84122 5.28436 
5.52441 7.43573 8.27655 5.0401 5.28217 2.76227 8.27661 2.76221 4.43555 0 ]xsh
266.313 122.247 mo
(thewrongquantity.Instead,thecorrectapproachisto)
[3.84119 5.52448 8.27542 7.19781 3.96335 5.03998 5.52444 8.64017 5.2822 5.52444 5.03998 5.28436 
3.84119 2.76224 3.6012 4.44205 8.64206 3.59885 5.52441 3.95554 3.84125 4.43558 5.04001 5.52444 
6.60211 3.84125 5.52441 8.27542 4.43558 5.04001 3.96335 3.96335 4.43558 4.43558 7.44119 5.03998 
5.52444 5.52438 3.96338 5.03998 5.0401 4.19543 9.12439 2.76221 7.67542 3.84119 0 ]xsh
266.313 133.767 mo
(de\014neforeachsubgraph)
[5.52444 4.43561 5.52444 5.52441 9.23544 3.00443 5.04001 8.6434 4.43561 5.04001 4.19568 10.2044 
3.95557 5.52441 5.52444 5.04001 3.96332 5.04001 5.52444 0 ]xsh
%ADOBeginSubsetFont: NKWBAA+CMMI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /NKWBAA+CMMI10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 59 /comma put
dup 65 /A put
dup 66 /B put
dup 103 /g put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 110 /n put
def
/FontBBox {-13 -250 848 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 442 453 466] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [72] def
/StemSnapH [25 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/comma <1C60D8A8C9B08A9570810981675918D0BCF1CD202F5F15202B7A6E1C
EF0947ED02AAA4C366CA78E08C39B6DD0700901548AC0500952501F57D43D699
1493A7332E9D6FB3B92D3B17F7AFEDFB43B1F0997B51EC481BBA2E83EB27> |-
/A <1C60D8A8C9B6E3FA234780E51FBD3BBFBEBC2631360DD7C25F33C30680CC
1A882C17B78DB471C55CC438374CF0500DE96583629259E66A380070E3947410
1D134A332FAD86FBF1C6C0FC85637A88280EE452A44957D6DFE9CAC4CC8C0B1E
0D8A44AD94DC0563BBBB61087D33FB01EF2295A71D594DF19B55EB59A712E2AE
76106A5A9AB8634ADA5A36204C6E39215D9DFB7BF5A23AB41B732EB6243EADEF
9003C540C56ECAAD84590980E261A5EBD6060F1EF15FD5> |-
/B <1C60D8A8C9B08A9501202E827E44E15703BF2156EA950A2ADAFBD36779B2
7CE893D1BAD0A08D92F92C8BE079DE99AAC269612E41697FB73907AB9FF7E9B6
27CAD70AFBCDA4276BE809D8A22FB0B246D9CBBE520C5E1838D3F3B5E1565169
6ECFE504F7F8AF33A180924E55B4F9505429DA714D5F73E667F72570C4AE6AA3
08B772C68EB9FCCD7F222EAF2F793CECE195A5349FAE816741EC8A817791E000
44330B78DDE71496473CFC692F3FA9C15826C56446AC05BF5D8EF77062C7DC79
66AD> |-
/g <1C60D8A8C9B08A95A6DE999DB9EE126183411D23545DB0F41A5AE63B1F9D
650F81F804D0114F97E90C226B06162D13B5BA48D1452150896E3599168509E6
F84987016E4C1FA411ABA3E32F9BBFD3404586C68DA4AB52AABF9FD99984ABD5
F657F52084C1D7218DEE38893A33F847F2B90A6230E25F37224024FE70A6DBAB
54D954D6B0B8FFEFAEC98439B3135B44552FEAB37F053C7EC4FF539623F397A7
EFFCD2FBB2656D9B45002EF1B5C978CD88E88500EE190B1E7E273739A3DC8B5E
27> |-
/i <1C60D8A8C9B08A959A731E0C497E4A92ECA7E1F9E8F27B95417557B68F87
3C7421EB2FEEE517FC7439284378BBF3ADDCB73BA44A09F971EA54D0742BA8E6
E7D163B9F048777BA2BAC0DF08FFCA0A02E69EB8CCA5A05D76188823DFDB0F10
2FD5B2004BF0359C21E04A38EA6E3BF721237E98B66F7D3C7171EB484B24CF2E
F1E8FAFEF505A11765C6DCFE3B2F13B0C3B87D0934CEFFB60BB3C84DA0FACC1B
8F5C53F864542A29453ECC16B47856C772CF90> |-
/j <1C60D8A8C9B08A950C76232745137370CC37B4264F020772F2F2F1ECDA65
46B2E6CD4DC7E11B04ACB0F1709A27C864C2050915B1C78C9D9F1372E7E18467
5035E2B1AD9FE4B81AB2774F0121A379334005BE91074C1AE3B227DE2BC16905
379839AC3FA122EA4FE1B80C267AF080FBB6782606231B40523CE1919A9FAEC9
761319123B24992393FE6D8E8B8B8147D7069279731DEDB9D6538332F614E04A
128204858B44CF82> |-
/k <1C60D8A8C9B08A950870E36747CCD2F069BAB4078E293FC46118DBB0FF50
21FD267E305A93E3B9EEC42C57CCDC98E9085508A0279B5E924DC8D8249FB392
C042269C59395DE18C56A360550D8C0ED9C3AFC2FDA4AE58AD909C542F1D56B1
61C5179601DBF5C94444DD0B9F055BE088FB6B642BE14831A86C5BEEF0E256B3
9D4AC46C4ED9DF4A354293CDCB8A1813369714C569D8175330F277A54A760D07
A53A3C00B10B1764A5E232EA1C68F5C304B41316F75BD759DC633B0BA29C870B
363D372EA12A78A4D533B5A688CD4860D786992FBDB0833174D4125943DE5B62
FF7B77A96423BE665CBFC96F04F996C6434785D817FA8F95D8BFEC21E11687C7
716A7F64FE23864587A3> |-
/n <1C60D8A8C9B08A95F6672DA0769C65052F6FD555EA9904981F5C5011D740
0A5082B35BECB587DFD6DA7F0BCE52C1D53643C9E5AE1EE7B3F76FF1421B27ED
DE10BCF56E3F98B875933C40A0EC29291E4FA9CC100C10654480D1C5949D7B3B
834EB7CA145C0AD116D2C53ADB026026333E417BD5F646F1A1550FAA50540606
93ABC51D8FFA7F7CF5FBD69164919B519F5CB3072B10F398518E5CC1B3B04E05
3B4794BC00534E2F40A979D7BE44E289EF0DC9F2A34D86ADD625206A1D58B4DA
8C2F407798FFD1DBD3E91F50E0A8469210388B32F7CE9E57D8CB65A5304A2570> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/NCPDHJ+CMMI10 /NKWBAA+CMMI10 findfont ct_VMDictPut
/NCPDHJ+CMMI10*1 
[59{/.notdef}rp /comma 5{/.notdef}rp /A /B 36{/.notdef}rp /g /.notdef 
/i /j /k 2{/.notdef}rp /n 145{/.notdef}rp]
NCPDHJ+CMMI10 nf
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
381.753 133.767 mo
(g)sh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
391.713 133.767 mo
(anew)
[9.71994 5.52444 4.43555 0 ]xsh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
423.393 133.767 mo
(n)sh
%ADOBeginSubsetFont: HJCBAA+CMMI7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HJCBAA+CMMI7 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 103 /g put
dup 105 /i put
dup 106 /j put
def
/FontBBox {0 -204 790 676} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0 683 703 431 441 451 463] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [32] def
/StdVW [81] def
/StemSnapH [32 36] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/g <1C60D8A8C9B08A95C539F3FB01E5C1946858FFE8B77F54608B77FE8A0DB9
ADF15A855C6A5EC44C7810AFF00DC69F34EA315CC1118F46F8D15DA0AFFC4370
C5E5A55017F3F3DBB23278FDFF6FA697F497021ED9F121172E6CD21BD9053E95
AF3FEDA383ED5A4A56AF019A3949044B29EF7A3612594A2E714BA2C73950EF75
1254F8BDD0E21892DF21770C631A9B18CE2001662BCE9306601478F9C26F4518
5F9EF865D474A3297A11866A53F7EF0C2D711144DF132069E6B207E090DB8CDD
BB02E93EB3> |-
/i <1C60D8A8C9B08A95815A5B227B870FFFF4C4C0B4F8778048834443BFCAD6
B993EDD195DC06703CEA0DE031068A057848E5B5DED1133A0A8079C5E208E9DE
E4B78459A9167CC6EE455BFB1096DC5790B66EB4889F8492E36379969C9A84E3
508BBE89B995851364166046AE348187165B183267917A2B944E4D5A171FE0A1
71814BE20051DD45E2BA864A9940A362E73075986328AA3660DC7C3B40F26477
32F933A170C61C13A84CF06AE8B2A1FC77DDE376> |-
/j <1C60D8A8C9B08A95A459ED963FAC90DCB8AB19427A2E40264805DB4EDBB0
2766E4B34CA7BAD7FF617D8417ED8A6BC153BA1967F1D42765023A7119DD1DDC
AA11377154A7B1BAFA2DCC082A2A1C19723210E8849DBE1BC9C1CEBAF2FCB286
C5C9C9DB8B4193FF060AE6597E7B810C70EEAAB327A532B6D2D05139A3BF532A
BC68B871E1474F59A1F5D79B984E40898D4B8E24132D075846122C1C9EF2ABA9
7B08BFCE9BD5F6341F9504> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/NCPDHK+CMMI7 /HJCBAA+CMMI7 findfont ct_VMDictPut
/NCPDHK+CMMI7*1 
[103{/.notdef}rp /g /.notdef /i /j 149{/.notdef}rp]
NCPDHK+CMMI7 nf
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
429.393 135.207 mo
(g)sh
%ADOBeginSubsetFont: UGXAAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /UGXAAA+CMSY10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 2 /multiply put
dup 32 /minus put
def
/FontBBox {0 -137 942 666} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705] def
/OtherBlues [-124 -119] def
/BlueScale 0.04379 def
/StdHW [40] def
/StdVW [85] def
/StemSnapH [40 55] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/multiply <1C60D8A8C9B08A94618283762900EE64BD6D804E5137A8EB9344B
59E1777DCDE100BEA84A8EBDC2709935C169F4A7A9CD3403BF650925EE8E6286
920546753D7746E1472BAF774A387F5D33BE79C4CA36EDCA5E934D739DECCEEA
F1A4CF24E9252BA491A91F06F55F85FE8C1A2A6BF2CE9B435F5669E4413462F4
7FE7F1E0F0F3BDF0C4B136454999D8E0A8F4448CAAA> |-
/minus <1C60D8A8C9B08A946182837629008DF7702985522C1BEB432204C2EF
9CAB07AB654895DD8804EF7ED97DE3E2616CBB2FB21BE3D9> |-
/.notdef <1C60D8A8C9C4A637> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/NCPDHL+CMSY10 /UGXAAA+CMSY10 findfont ct_VMDictPut
/NCPDHL+CMSY10*1 
[2{/.notdef}rp /multiply 29{/.notdef}rp /minus 223{/.notdef}rp]
NCPDHL+CMSY10 nf
NCPDHL+CMSY10*1 [9.96264 0 0 -9.96264 0 0 ]msf
437.193 133.767 mo
(\002)sh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
448.113 133.767 mo
(n)sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
454.113 135.207 mo
(g)sh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
463.473 133.767 mo
(modularity)
[8.27661 5.28015 5.52448 5.52435 2.76227 5.03998 3.96338 2.76221 3.60138 0 ]xsh
266.313 146.487 mo
(matrix)
[8.27661 5.03998 3.84122 3.96332 2.76224 0 ]xsh
%ADOBeginSubsetFont: MZQAAA+CMBX10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /MZQAAA+CMBX10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 66 /B put
def
/FontBBox {0 -6 753 686} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 -0 686 697 444 453 655 676] def
/OtherBlues [-201 -194] def
/BlueScale 0.04379 def
/StdHW [47] def
/StdVW [114] def
/StemSnapH [40 47] def
/StemSnapV [114 142] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/B <1C60D8A8C9B08A9471BAD5272C9E7E6EB07D09B6B4988F230D202CB35C48
DF80240AB4529B1AD946E2519B3F9BB5DE8DFCA1C81968784B411F7F16F7E1A9
D8E23C04B83CDE68B586734B1F94A3466EC1CD3AD9606A145B6E208D62266F6F
77CF9E2F8FCCDEBE8957AE0C3D1ACAF4AE72661F45819CF3AFE19DEB1CE109EE
5DDA47D72C1769435E3117BA430742B378E571CF6D430277EF52A2176F32FB99
7FC600907168A2946C4C> |-
/.notdef <1C60D8A8C9B08A95899606B6B060A7> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/NCPDHM+CMBX10 /MZQAAA+CMBX10 findfont ct_VMDictPut
/NCPDHM+CMBX10*1 
[66{/.notdef}rp /B 189{/.notdef}rp]
NCPDHM+CMBX10 nf
NCPDHM+CMBX10*1 [9.96264 0 0 -9.96264 0 0 ]msf
299.553 146.487 mo
(B)sh
%ADOBeginSubsetFont: ELRBAA+CMR7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ELRBAA+CMR7 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
def
/FontBBox {0 -249 806 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0 683 703 431 446 664 674] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [36] def
/StdVW [79] def
/StemSnapH [28 36] def
/StemSnapV [79 95] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/parenleft <1C60D8A8C9B08A95B2584918684C86527E2C6442CB179E9D661F
4A1CBCA6698D85B020C98FFFAD2B17D028940BB5B17025C777D4ECC756533B0D
1240B77A38F4415A4F8BA8DA0789675C263597F78660AEB94482330247663B34
39318AAB18019D4975> |-
/parenright <1C60D8A8C9B08A95B2584918684C86527E2C6442CB179E00DFF
89D860720FB0CC5414018D37B2539156172A86A68243FD9172025FEA9A319D8B
FF59A14F19B74A19BDF4410330D69EEB30AB4208ED4594B27ECDD52C634F4756
698B60E46C84C15AE5842EAE067> |-
/.notdef <1C60D8A8C9B08A958AA685092D4752> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/NCPDHN+CMR7 /ELRBAA+CMR7 findfont ct_VMDictPut
/NCPDHN+CMR7*1 
[40{/.notdef}rp /parenleft /parenright 214{/.notdef}rp]
NCPDHN+CMR7 nf
NCPDHN+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
307.713 142.767 mo
(\()sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
310.833 142.767 mo
(g)sh
NCPDHN+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
314.913 142.767 mo
(\))sh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
318.513 146.487 mo
(,where)
[7.20221 7.19781 5.52441 4.43564 3.96332 0 ]xsh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
355.353 146.487 mo
(n)sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
361.353 147.927 mo
(g)sh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
370.113 146.487 mo
(isthenumberofverticesinthe)
[2.76224 8.03555 3.84122 5.52444 8.63556 5.28448 5.52444 8.03674 5.76456 4.43558 8.0434 5.04004 
7.20428 5.04205 4.43558 3.96335 3.84119 2.76227 4.43555 4.43561 7.91559 2.76221 9.72449 3.84125 
5.52441 0 ]xsh
266.313 157.887 mo
(subgraph.Thecorrectde\014nitionoftheelementofthis)
[3.95557 5.52444 5.52441 5.04001 3.96332 5.04001 5.52441 5.52448 9.12219 7.19781 5.52441 8.51547 
4.43561 5.03998 3.96335 3.96335 4.43558 4.43558 7.6814 5.52444 4.43558 5.52438 5.52444 2.76221 
3.84125 2.76221 5.04004 9.6044 5.04001 7.08435 3.84125 5.52441 8.51563 4.43558 2.76224 4.43558 
8.27664 4.43555 5.28424 7.80127 5.03998 7.08435 3.84125 5.52441 2.76227 0 ]xsh
266.313 169.287 mo
(matrixforvertices)
[8.27661 5.03998 3.84122 3.96332 2.76224 8.52222 3.00439 5.04001 7.20319 5.04205 4.43561 3.96335 
3.84119 2.76221 4.43561 4.43561 0 ]xsh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
349.952 169.287 mo
(i;j)
[3.48492 4.44211 0 ]xsh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
365.912 169.287 mo
(is)
[2.76224 0 ]xsh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
304.233 197.007 mo
(B)sh
NCPDHN+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
312.273 191.847 mo
(\()sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
315.393 191.847 mo
(g)sh
NCPDHN+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
319.473 191.847 mo
(\))sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
311.793 199.767 mo
(ij)
[2.75882 0 ]xsh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
325.953 197.007 mo
(=)sh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
336.393 197.007 mo
(A)sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
343.833 198.447 mo
(ij)
[2.75882 0 ]xsh
NCPDHL+CMSY10*1 [9.96264 0 0 -9.96264 0 0 ]msf
353.073 197.007 mo
( )sh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
364.233 190.287 mo
(k)sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
369.393 191.727 mo
(i)sh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
372.753 190.287 mo
(k)sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
377.913 191.727 mo
(j)sh
364.221 194.259 mo
382.221 194.259 li
382.221 194.739 li
364.221 194.739 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 50.7272 152.836 ]ct
[18 0 0 -.48 313.493 -41.423 ]ct
<<
/T 1
/W 1 
/H 1 
/M[1 0 0 -1 0 1 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~!!~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
1 /0 /CSD get_res sepcs
1 sep
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
366.393 203.847 mo
(2)sh
%ADOBeginSubsetFont: NKWBAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
NCPDHJ+CMMI10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/delta <1C60D8A8C9B08A95B1F07368C45D7269781E781CCC13C0A133FD1D91
48BDBCCA985454A9A4C1243EEEA9E5059E9C84EFE78736AC0C01C8AFC8B3EF45
3E41058731ACAC8E3708AA29CA2B619335778119E005699EE08BEA49AC1BE1D3
281E71BC6C706329231DC803F144C14F5BE2957831AF8CC11D4A4DF44D0F0424
5457CCDC1865BEF34AB2A83193F2326C6CF9A1D48CDF39436CBCB41824895BC0
58> |-
/d <1C60D8A8C9B08A95D740727C62713697D30C3FBB1309A72AC391CE066783
9F0FE3FD0966FB6F4ADADF3AFE0CE50123887DC76A063C2E0D8DF344AF38FAE7
D5C210D675754CCF3647B8800F77E33872F92BEC6FB1E8C85AADBB2A128B312C
56040896D6F545335B55B5C7685D78822B67486171AD084A7675C940356CF760
E6CBB3471E19791BA775FBA3E78DA651CF5FFBF102B70B60095988E3E9DEAB39
3B1981FD997652D0270E9F0673A6AF8747421B89789A57A042519303C8F6D473
B209EC1227A5C06B6C1F36> |-
/m <1C60D8A8C9B5907D10A606D745C9CB74E6BB88A0F3A9F0F60CD6AC0753DE
1078F4F9FDB6B815479F3F8E4C08C2277611060995697296243822F846B126CF
0E160F17A0E696866DFA49F673C2038348891CD860B798A64B6F339EC4B7938B
9F182758997F93186ED2A69E90C42D235CAEAD24AFE8D3159FE4BDCB9A95F7A6
964FE85BE9DDA9325438A11CA49C33606AD33A830562DD53ED45DE4A62B66C09
33B6FE7F6B47A7C113AADEEF11A01A5C1CC16CFFE2C8EAB69621925C42074ADA
6BF325E6CDE3FE32F5D6A69C1EB9EA111B3D764C5E464BF7625737F84DDEA451
40C83740D55258CFB228E594F623ACEED9AC4F7B3F0076D20A02E203AE9B646E
090C3B62DA99478592990F7E9C81B063FC67500BF0E28D6241E6CFC149DF1365
4BBD56189F141507F6D44034E6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NCPDHJ+CMMI10 /Encoding get
dup 14 /delta put
dup 100 /d put
dup 109 /m put
pop
%ADOEndSubsetFont
/NCPDHJ+CMMI10*1 
[14{/.notdef}rp /delta 44{/.notdef}rp /comma 5{/.notdef}rp /A /B 33{/.notdef}rp 
/d 2{/.notdef}rp /g /.notdef /i /j /k /.notdef 
/m /n 145{/.notdef}rp]
NCPDHJ+CMMI10 nf
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
371.433 203.847 mo
(m)sh
NCPDHL+CMSY10*1 [9.96264 0 0 -9.96264 0 0 ]msf
385.593 197.007 mo
( )sh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
395.553 197.007 mo
(\016)sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
399.993 198.447 mo
(ij)
[2.75879 0 ]xsh
%ADOBeginSubsetFont: OHGCAA+CMEX10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /OHGCAA+CMEX10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 20 /bracketleftbigg put
def
/FontBBox {0 -2359 1387 40} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0] def
/OtherBlues [-1159 -1139] def
/BlueScale 0.04796 def
/StdHW [47] def
/StdVW [47] def
/StemSnapH [40 47] def
/StemSnapV [40 47] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/bracketleftbigg <1C60D8A8C9B08A95D222871B45C8630DD1B90834D73FA7
BB1A1CBAC6E68FC845989FE6117D2F55B4E1CEC6A82EC6201B5D3DE2A11CB33A
DA4D177B0D> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/NCPDHO+CMEX10 /OHGCAA+CMEX10 findfont ct_VMDictPut
/NCPDHO+CMEX10*1 
[20{/.notdef}rp /bracketleftbigg 235{/.notdef}rp]
NCPDHO+CMEX10 nf
NCPDHO+CMEX10*1 [9.96264 0 0 -9.96264 0 0 ]msf
406.953 182.967 mo
(\024)sh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
412.233 197.007 mo
(k)sh
NCPDHN+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
417.753 191.847 mo
(\()sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
420.873 191.847 mo
(g)sh
NCPDHN+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
424.953 191.847 mo
(\))sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
417.393 199.767 mo
(i)sh
NCPDHL+CMSY10*1 [9.96264 0 0 -9.96264 0 0 ]msf
430.833 197.007 mo
( )sh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
440.793 197.007 mo
(k)sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
445.953 198.447 mo
(i)sh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
452.433 190.287 mo
(d)sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
457.593 191.727 mo
(g)sh
450.501 194.259 mo
464.301 194.259 li
464.301 194.739 li
450.501 194.739 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 50.7272 152.836 ]ct
[13.8 0 0 -.48 399.773 -41.423 ]ct
<<
/T 1
/W 1 
/H 1 
/M[1 0 0 -1 0 1 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~!!~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: DMSAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
NCPDHG+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/ffi <1C60D8A8C9B08A940B724A74A01E176AC76C145B62F05D5C5FD89EB47F
86631830CC6E8C80B4B56BB635A4F1AA3CCD1E4922A51A83FACCD208B1535502
A23F0B326D6A474CDB903844E2516C94548B1F0C91230AEA40463BA4CF1592D0
394AF3353E6B176276F12214E722AC3B6C0684868931D4C74916782DD30543C3
69A1F798F4A932D726947B33D2D3FEA198C0A3456B44BBD22E4EF9D14513E8A6
80F07E4C7D1696B276F54BDBB3B879F25EC656AB456B5053E5448C5D5DD50F08
44C6A8B69155A42F3851294E43DE87D4958C004433161CAE778DA6F09B00CF01
16D9FA01BB66A410456B4F982690A8B38371D38B4EC83C4A86F62F2C32BDCC0C
2EC5FB256402D25B334D695774D6C8691FE063C723D44E7BB094667792CE74AC
4B130D764B4DA1520DDA00B726750F282DC45E3390A5DF> |-
/semicolon <1C60D8A8C9B08A9570810981675918D0BCF1CD202F5F8524F1CF
461D4270459E44DB560BC854C3F48DFD92347C27A6AAF0E2B1A04AFE4F800D13
876BE3AB39120D802A029BED93876E94453805EC57B6B4A8208C5EC7FFEACE4E
963FB3213948F11D6C0E8EF4316E683CC36E3AA04CA9322B> |-
/N <1C60D8A8C9B6E3FA234780EB1A04772A480C0BA74E47A01736C3330B79F9
4973DD24567A876D5331B1C1E5BDF74D24451B47112EB46B9EF65275AA4A1B84
3B86074DE54D20B17279B8B61F620808991404B9C81BB570221FC9ADD03DB794
BF42287F0E41BBE081B607E124D3995DAA3B69C88F88634917B7C5B3ECB04ABA
359AB76EF6C57846C442789B4408741761D97ABFED4F6595> |-
/W <1C60D8A8C9B08A94DF93CFE877B47057C7AA7A39F5E120783EC688EC89C1
8D88E4CFACCAF32BE3FB943A3FA817A1C0529930AB0065CCAE1705346D415CAF
6F3BE8B28DBD2FE903E61186A32EDF38B838858E46745C2B7FA48B8E6E0D0986
BD7A8BA149207F3F0EA77A4EFE06A7122E8FC6C2B04A0B03DD31C256ACF417D3
9DB720EA63717B8AF030369F0ACE1BFC1BDA8084F86023424DB31D0A5F8EC215
16A92BBE98292BD36BE0960649A591F01066473D657A65D807C4E00EF2369AF8
93D97C00CCFC22CA894227F9117CFE788197C57F5A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NCPDHG+CMR10 /Encoding get
dup 14 /ffi put
dup 59 /semicolon put
dup 78 /N put
dup 87 /W put
pop
%ADOEndSubsetFont
/NCPDHG+CMR10*1 
[12{/.notdef}rp /fi /.notdef /ffi 19{/.notdef}rp /quotedblright 5{/.notdef}rp /parenleft 
/parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one 
/two /three /four 2{/.notdef}rp /seven /.notdef /nine /colon 
/semicolon /.notdef /equal 3{/.notdef}rp /A 3{/.notdef}rp /E /F 
2{/.notdef}rp /I 3{/.notdef}rp /M /N 4{/.notdef}rp /S /T 
/U /.notdef /W 2{/.notdef}rp /Z /bracketleft /quotedblleft /bracketright 
3{/.notdef}rp /a /b /c /d /e /f /g 
/h /i /.notdef /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z 133{/.notdef}rp]
NCPDHG+CMR10 nf
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
450.513 203.847 mo
(2)sh
%ADOBeginSubsetFont: NKWBAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
NCPDHJ+CMMI10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/beta <1C60D8A8C9B08A95C076A746329A5C2588E0FEA1EAE16B60440661274
07CEDA030F5C5E06298D6EEB2B0A7E3B3C6D62FE9B4CD6BE39F6D00EAA95CABF
2B2E02514B7E9CA50CD185726A20A188B901210373CE298805563B990104227F
D5EFA851A95F468E3D490799BB25C609650577FB7FF966865F8C42BF2428BC18
7CD9B75A38AF2947E611A0595A7AC0F4E9FDEC23AE8ABC87941B97CEE3A26DEE
6853D683E5C00587154EC31592CEB83BE70D55CF183E5DF3F8B76FD495A437E3
1D169D1B4AE0FC3CF042F387A44D4A2449056227146666BE7DC7DACB353B85A8
C2FAECA30E38D45561AACCFD2653403739FF383B898> |-
/Q <1C60D8A8C9B08A947AB7D3ED59501221308E57E33CAC3A52A22F39008EAB
9E27249EF22C483EDADFC54FA3D0F25A360625FFD3C8D34193D50A1EEF254A38
B6869128D0F8C6A2D68541A1B2FA2AAEE86588D5693079E9289932DE41D9DB82
F396CFABF648D2D871BE84B85E79015F543EDB72A0AEEBD29AB9B3021F4D1326
FD5BEE982FD6225E0AC41051F7F2FAEA6DACEF4EDEA8FC3AE4B0A16D268017F3
1355E0A7F18C07F2A7FEF32EE696BCD22AFACA96ADF8A306CA404C4C97912D2F
60A5F01EC942D13D82B5B629913749432485FBB2A8A3DF6E3959B78E1AC0534C
C960C79442A886> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NCPDHJ+CMMI10 /Encoding get
dup 12 /beta put
dup 81 /Q put
pop
%ADOEndSubsetFont
/NCPDHJ+CMMI10*1 
[12{/.notdef}rp /beta /.notdef /delta 44{/.notdef}rp /comma 5{/.notdef}rp /A 
/B 14{/.notdef}rp /Q 18{/.notdef}rp /d 2{/.notdef}rp /g /.notdef 
/i /j /k /.notdef /m /n 145{/.notdef}rp]
NCPDHJ+CMMI10 nf
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
455.553 203.847 mo
(m)sh
%ADOBeginSubsetFont: OHGCAA+CMEX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
NCPDHO+CMEX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/bracketrightbigg <1C60D8A8C9B08A95D222871B45C8630DD1B90834D73FA
7BB1AE0416F9E63121DDE6BD82D536A1ED9767E983991501E1C48CB55634D4F0
6E99924FD7F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NCPDHO+CMEX10 /Encoding get
dup 21 /bracketrightbigg put
pop
%ADOEndSubsetFont
/NCPDHO+CMEX10*1 
[20{/.notdef}rp /bracketleftbigg /bracketrightbigg 234{/.notdef}rp]
NCPDHO+CMEX10 nf
NCPDHO+CMEX10*1 [9.96264 0 0 -9.96264 0 0 ]msf
465.393 182.967 mo
(\025)sh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
470.673 197.007 mo
(;)sh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
498.633 197.007 mo
(\(4\))
[3.84119 5.04004 0 ]xsh
266.313 228.207 mo
(where)
[7.19781 5.52441 4.43564 3.96332 0 ]xsh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
294.273 228.207 mo
(k)sh
NCPDHN+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
299.793 223.047 mo
(\()sh
%ADOBeginSubsetFont: HJCBAA+CMMI7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
NCPDHK+CMMI7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/T <1C60D8A8C9B08A944965601E451B7C58EAE6C1F8CDF1ADF34B3CDC185B50
C9B702AA923A2A253D9EC55A17F299EA4E5D1B3F82FF3D11FD7DDE2EDAD761B1
19DEC4A921B52BA4A022033D5D7ABA0D5876005D40D0B89DB2C45F3D9B4D7EC5
708352F86AD9FA46D7CA3DE5C5A2FC6203159E3BFDD7909292D6620BFFA4E8F0
9CADB7E2AAC7F49A9AC6DBB6127AE6383A0841219EFB1BAF56F481AD9078485B
900AEA37473CEF581586B5DD412A67A72F6D0D238EB7AC8100969BE6EB24055F
2870F1D45C4043BE774D74CDDABB08F8E7E87B802D5D108277C7794E4700D18F
B321> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NCPDHK+CMMI7 /Encoding get
dup 84 /T put
pop
%ADOEndSubsetFont
/NCPDHK+CMMI7*1 
[84{/.notdef}rp /T 18{/.notdef}rp /g /.notdef /i /j 149{/.notdef}rp]
NCPDHK+CMMI7 nf
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
302.913 223.047 mo
(g)sh
NCPDHN+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
306.993 223.047 mo
(\))sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
299.433 230.967 mo
(i)sh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
313.233 228.207 mo
(isthedegreeofvertex)
[2.76221 6.4754 3.84119 5.52448 6.95551 5.52444 4.43561 5.03998 3.96335 4.43558 6.83542 5.04004 
5.52457 5.04208 4.43555 3.96335 3.84122 4.43558 0 ]xsh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
408.993 228.207 mo
(i)sh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
414.993 228.207 mo
(withinsubgraph)
[7.19781 2.76224 3.84122 5.52441 2.76221 8.16428 3.95557 5.52438 5.52444 5.03998 3.96338 5.03998 
5.52448 0 ]xsh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
487.713 228.207 mo
(g)sh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
495.273 228.207 mo
(and)
[5.04004 5.52441 0 ]xsh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
266.313 239.607 mo
(d)sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
271.473 241.047 mo
(g)sh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
278.434 239.607 mo
(isthesumofthe\(total\)degrees)
[2.76221 6.23557 3.84119 5.52448 6.71567 3.95557 5.52444 10.6768 5.03998 5.28436 3.84119 5.52448 
6.71567 3.84119 3.84122 5.04001 3.84122 5.04001 2.76224 6.24121 5.52444 4.43558 5.04001 3.96335 
4.43558 4.43558 0 ]xsh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
414.634 239.607 mo
(k)sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
419.793 241.047 mo
(i)sh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
425.433 239.607 mo
(oftheverticesinthe)
[5.04001 5.28436 3.84122 5.52444 6.71564 5.04205 4.43555 3.96338 3.84119 2.76227 4.43555 4.43561 
6.1156 2.76221 7.9245 3.84119 5.52441 0 ]xsh
266.313 252.327 mo
(subgraph.Thenthesubgraphmodularity)
[3.95557 5.52444 5.52441 5.04001 3.96332 5.04001 5.52441 5.52448 7.08234 7.19781 5.52444 4.43561 
8.88428 3.84119 5.52444 7.79578 3.95557 5.52438 5.52444 5.04001 3.96335 5.03998 5.52444 8.76431 
8.27661 5.28018 5.52444 5.52438 2.76224 5.04001 3.96335 2.76227 3.60138 0 ]xsh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
451.233 252.327 mo
(Q)sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
459.153 253.767 mo
(g)sh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
466.473 252.327 mo
(=)sh
%ADOBeginSubsetFont: MZQAAA+CMBX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
NCPDHM+CMBX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/s <1C60D8A8C9B08A95AD02A60F56C9F20045DD480B06A02EE70DA0161AE8B6
CCADB7B811C8C4C6B3BA616AB3A0F1786DDAEA0A735FBB7FDC60DE25731C55F7
15C309995C9E50057A129D6BE1BA1874B5947C490157FFB70D4531AEC6FD31AC
BB81A0AEBBB115E29EBA5BAB5526F95B457672892E8F3BBFD2528A620F1D4FF4
51BA6D73E180279956A252BA25A642C0575706989E23F3651E112365A21699BC
D47799CBD3E17811910A1B5B186572218A0FAB55667392A6040739C53D742D3D
740FEE418C3EED6FB55A0B618AC42A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NCPDHM+CMBX10 /Encoding get
dup 115 /s put
pop
%ADOEndSubsetFont
/NCPDHM+CMBX10*1 
[66{/.notdef}rp /B 48{/.notdef}rp /s 140{/.notdef}rp]
NCPDHM+CMBX10 nf
NCPDHM+CMBX10*1 [9.96264 0 0 -9.96264 0 0 ]msf
477.033 252.327 mo
(s)sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
481.593 248.727 mo
(T)sh
NCPDHM+CMBX10*1 [9.96264 0 0 -9.96264 0 0 ]msf
487.833 252.327 mo
(B)sh
NCPDHN+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
495.993 248.727 mo
(\()sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
499.113 248.727 mo
(g)sh
NCPDHN+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
503.193 248.727 mo
(\))sh
NCPDHM+CMBX10*1 [9.96264 0 0 -9.96264 0 0 ]msf
506.793 252.327 mo
(s)sh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
266.313 263.847 mo
(correctlygivestheadditionalcontributiontothetotal)
[4.43561 5.04001 3.96332 3.96335 4.43558 4.43564 3.84119 2.76221 9.60229 5.03998 2.76224 5.04205 
4.43558 8.39545 3.84119 5.52444 8.99576 5.03998 5.52444 5.52438 2.76224 3.84122 2.76224 5.04001 
5.52441 5.04004 7.20209 4.43555 5.04004 5.28455 3.84125 3.96332 2.76224 5.52438 5.52441 3.84125 
2.76224 5.04001 10.0844 3.84125 9.47992 3.84125 5.52441 8.99573 3.84125 5.03998 3.84125 5.04004 
0 ]xsh
266.313 275.247 mo
(modularitymadebythedivisionofthissubgraph.In)
[8.27661 5.28015 5.52441 5.52444 2.76221 5.04001 3.96332 2.76221 3.60138 9.72214 8.27661 5.03998 
5.52444 8.99545 5.28452 9.72214 3.84122 5.52441 9.11566 5.52441 2.76221 5.28226 2.76224 3.95551 
2.76227 5.03998 9.96429 5.04001 7.56442 3.84125 5.52441 2.76224 8.51538 3.9556 5.52435 5.52441 
5.04004 3.96338 5.03998 5.52448 5.52435 10.8023 3.59888 0 ]xsh
266.313 286.767 mo
(particular,notethatifthesubgraphisundivided,)
[5.52444 5.04001 3.96332 3.84122 2.76218 4.43561 5.52444 2.76221 5.04001 3.96332 6.12238 5.52441 
5.04001 3.84122 7.91553 3.84119 5.52444 5.04001 7.32111 2.76224 6.48428 3.84119 5.52444 8.03555 
3.95557 5.52441 5.52441 5.04001 3.96335 5.04001 5.52444 8.76431 2.76224 7.43555 5.52441 5.52441 
5.52441 2.76221 5.28223 2.76227 5.52435 4.43561 5.52441 0 ]xsh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
488.673 286.767 mo
(Q)sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
496.593 288.207 mo
(g)sh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
504.634 286.767 mo
(is)
[2.76227 0 ]xsh
266.314 298.167 mo
(correctlyzero.Notealsothatforacompletenetwork)
[4.43561 5.04001 3.96332 3.96335 4.43558 4.43564 3.84119 2.76221 9.72223 4.43558 4.43564 3.96332 
5.04001 10.9222 7.44 5.03998 3.84122 8.99551 5.04001 2.76224 3.95557 9.60019 3.84122 5.52441 
5.04004 8.40121 3.00443 5.04001 8.5235 9.60001 4.43558 5.04001 8.27664 5.52438 2.76224 4.43558 
3.84125 9.11542 5.52441 4.43561 3.60132 6.95801 5.04004 3.96332 0 ]xsh
266.314 309.687 mo
(Eq.\(4\)reducestothepreviousde\014nitionforthemodu-)
[6.84442 5.28223 6.12204 3.84119 5.04001 7.44104 3.96332 4.43561 5.52444 5.52441 4.43564 4.43558 
7.31543 3.84119 8.64008 3.84122 5.52444 7.91565 5.52444 3.96329 4.43561 5.2822 2.76227 5.03998 
5.52444 7.3154 5.52441 4.43561 5.52435 5.52441 2.76227 3.84122 2.76224 5.04004 9.12433 3.00439 
5.04004 7.44342 3.84119 5.52448 7.91565 8.27655 5.28021 5.52441 5.52441 0 ]xsh
266.314 323.487 mo
(laritymatrix,Eq.\(2\),since)
[2.76221 5.04001 3.96332 2.76221 3.60114 9.0022 8.27664 5.03998 3.84122 3.96332 2.76221 5.2822 
6.72229 6.84442 5.28223 6.48221 3.84122 5.03998 3.84122 6.84232 3.95557 2.76224 5.52438 4.43558 
0 ]xsh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
392.434 323.487 mo
(k)sh
NCPDHN+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
397.953 318.327 mo
(\()sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
401.073 318.327 mo
(g)sh
NCPDHN+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
405.153 318.327 mo
(\))sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
397.593 326.247 mo
(i)sh
%ADOBeginSubsetFont: UGXAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
NCPDHL+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/arrowright <1C60D8A8C9B5EE3129034F81B0973ADB6C0EA75D868228300EB
0DEDB6E2E49FB270D5FAC36E7BCE05074F264ADDEB09D5CF1405DCC0877AFF6E
3BD284D644035E676F4264A27AF789628DA789812A47E739051CBE60B7135FF7
DF83688C25C27EF4DE51444CFE6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NCPDHL+CMSY10 /Encoding get
dup 33 /arrowright put
pop
%ADOEndSubsetFont
/NCPDHL+CMSY10*1 
[2{/.notdef}rp /multiply 29{/.notdef}rp /minus /arrowright 222{/.notdef}rp]
NCPDHL+CMSY10 nf
NCPDHL+CMSY10*1 [9.96264 0 0 -9.96264 0 0 ]msf
412.473 323.487 mo
(!)sh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
426.034 323.487 mo
(k)sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
431.193 324.927 mo
(i)sh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
438.393 323.487 mo
(and)
[5.04001 5.52444 0 ]xsh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
458.313 323.487 mo
(d)sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
463.473 324.927 mo
(g)sh
NCPDHL+CMSY10*1 [9.96264 0 0 -9.96264 0 0 ]msf
471.873 323.487 mo
(!)sh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
485.434 323.487 mo
(2)sh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
490.473 323.487 mo
(m)sh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
503.073 323.487 mo
(in)
[2.76227 0 ]xsh
266.313 335.007 mo
(thatcase.)
[3.84119 5.52448 5.03998 7.2012 4.43558 5.04001 3.95557 4.43561 0 ]xsh
276.274 346.407 mo
(Inrepeatedlysubdividingournetwork,animportant)
[3.59882 9.48453 3.96335 4.43558 5.76462 4.43558 5.04001 3.84122 4.43561 5.52444 2.76218 9.24231 
3.95557 5.52441 5.76428 5.52444 2.76218 5.28226 2.76224 5.52438 2.76224 5.52444 8.99991 5.04001 
5.52444 7.9234 5.52441 4.43558 3.60138 6.95798 5.04001 3.96335 5.2822 6.72226 5.04001 9.48434 
2.76221 8.27661 5.7644 5.04004 3.96338 3.84119 5.04004 5.28455 0 ]xsh
266.313 357.927 mo
(questionweneedtoaddressisatwhatpointtohaltthe)
[5.28223 5.52441 4.43561 3.95557 3.84119 2.76224 5.03998 8.76443 6.95798 7.79559 5.52444 4.43561 
4.43561 8.76459 3.84119 8.39987 5.04001 5.52441 5.52438 3.96335 4.43558 3.95557 7.19543 2.76224 
7.19568 5.04004 7.20108 7.19781 5.52444 5.03998 7.08109 5.76456 5.04004 2.76224 5.28448 7.2012 
3.84125 8.3999 5.52441 5.03998 2.76227 7.20111 3.84125 5.52441 0 ]xsh
266.313 369.327 mo
(subdivisionprocess.Anicefeatureofourmethodisthat)
[3.95557 5.52444 5.76428 5.52441 2.76221 5.28223 2.76221 3.95557 2.76218 5.04001 8.28461 5.52444 
3.96332 5.28015 4.43561 4.43561 3.95557 3.95557 6.96237 10.2 5.52444 2.76218 4.43564 7.3154 
3.00446 4.43555 5.04004 3.84125 5.52438 3.96335 7.19556 5.04004 5.88434 5.04004 5.52441 6.60349 
8.27658 4.43561 3.84125 5.52435 5.28021 8.40442 2.76227 6.83557 3.84119 5.52441 5.04004 0 
]xsh
266.313 380.847 mo
(itprovidesaclearanswertothisquestion:ifthereexists)
[2.76221 6.84119 5.52444 3.96335 4.80008 5.2822 2.76221 5.52444 4.43561 6.71548 7.91992 4.43558 
2.76224 4.43558 5.04001 6.84326 5.03998 5.52448 3.95557 6.95786 4.43558 6.72351 3.84122 8.04001 
3.84122 5.52444 2.76221 6.95554 5.2822 5.52444 4.43558 3.95557 3.84125 2.76221 5.04004 5.52441 
6.96213 2.76224 6.00439 3.84125 5.52441 4.43561 3.96332 7.43561 4.43555 5.28223 2.76221 3.95557 
3.84125 0 ]xsh
266.313 392.247 mo
(nodivisionofasubgraphthatwillincreasethemodular-)
[5.52444 7.91983 5.52441 2.76224 5.2822 2.76221 3.95557 2.76221 5.04001 8.40451 5.03998 5.88437 
7.91989 3.9556 5.52444 5.52441 5.03998 3.96335 5.04001 5.52444 8.40454 3.84122 5.52444 5.04001 
6.72113 7.19781 2.76227 2.76224 5.76218 2.76224 5.52438 4.43561 3.96332 4.43561 5.04001 3.9556 
7.1955 3.84122 5.52438 7.43561 8.27661 5.28021 5.52441 5.52435 2.76227 5.04004 3.96332 0 
]xsh
266.313 403.767 mo
(ityofthenetwork,orequivalentlythatgivesapositive)
[2.76221 3.60135 9.12216 5.03998 6.96442 3.84119 5.52448 8.39575 5.52441 4.43564 3.60135 6.95798 
5.03998 3.96335 5.28223 6.60229 5.03998 7.80319 4.43558 5.28223 5.52441 2.76221 4.68231 5.04001 
2.76224 4.43558 5.28433 3.84122 2.76224 9.12213 3.84125 5.52441 5.04004 7.80121 5.03998 2.76227 
5.04205 4.43555 7.67554 9 5.76459 5.03998 3.95563 2.76221 3.84125 2.76221 5.04224 0 
]xsh
266.313 415.167 mo
(valuefor)
[4.68228 5.04001 2.76221 5.52441 7.19556 3.00443 5.03998 0 ]xsh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
306.274 415.167 mo
(Q)sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
314.194 416.607 mo
(g)sh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
318.754 415.167 mo
(,thenthereisnothingtobegainedbydivid-)
[5.64206 3.84119 5.52444 4.43561 8.40442 3.84119 5.52448 4.43558 3.96332 7.19574 2.76224 6.83557 
5.52441 5.04001 3.84122 5.52444 2.76218 5.52444 7.80002 3.84122 7.79987 5.76459 7.31549 5.04001 
5.04001 2.76224 5.52444 4.43555 8.16461 5.28448 8.04205 5.52441 2.76221 5.28223 2.76221 5.52441 
0 ]xsh
266.314 426.687 mo
(ingthesubgraphanditshouldbeleftalone;itisindi-)
[2.76221 5.52444 9.00006 3.84119 5.52448 8.39575 3.95557 5.52444 5.52441 5.04001 3.96335 5.03998 
5.52441 9.36438 5.03998 5.52448 9.48422 2.76224 7.80139 3.95557 5.52438 5.04007 5.52435 2.76227 
9.4845 5.76453 8.3956 2.76224 4.43558 3.00443 7.92114 5.04004 2.76221 5.04004 5.52441 4.43561 
6.96234 2.76227 7.80139 2.76221 7.91565 2.76221 5.52441 5.52441 2.76227 0 ]xsh
266.314 438.087 mo
(visibleinthesenseoftheprevioussection.Thishappens)
[5.28223 2.76218 3.9556 2.76221 5.52441 2.76221 7.19547 2.76221 8.40457 3.84119 5.52448 7.43558 
3.9556 4.43558 5.52444 3.95557 7.19568 5.03998 5.76447 3.84119 5.52444 7.43558 5.52441 3.96332 
4.43561 5.2822 2.76224 5.04004 5.52441 6.59546 3.95557 4.43558 4.43558 3.84122 2.76224 5.04004 
5.52441 6.9624 7.19781 5.52441 2.76221 6.83545 5.52441 5.04004 5.52441 5.76428 4.43555 5.52441 
0 ]xsh
266.314 449.607 mo
(whentherearenopositiveeigenvaluestothematrix)
[7.19781 5.52441 4.43564 7.80457 3.84122 5.52444 4.43558 3.96335 6.8356 5.03998 3.96338 6.59558 
5.52444 7.31985 5.76459 5.03998 3.95557 2.76224 3.84122 2.76224 5.04221 6.71552 4.43558 2.76224 
5.04001 4.43558 5.28461 4.68225 5.04004 2.76221 5.52444 4.43558 6.23557 3.84122 7.32019 3.84125 
5.52441 6.83557 8.27661 5.04004 3.84119 3.96338 2.76221 0 ]xsh
NCPDHM+CMBX10*1 [9.96264 0 0 -9.96264 0 0 ]msf
489.634 449.607 mo
(B)sh
NCPDHN+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
497.793 445.886 mo
(\()sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
500.913 445.886 mo
(g)sh
NCPDHN+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
504.993 445.886 mo
(\))sh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
508.593 449.607 mo
(,)sh
266.313 461.007 mo
(andthusourleadingeigenvalueprovidesasimplecheck)
[5.03998 5.52448 9.00458 3.84119 5.28436 5.52444 7.55563 5.03998 5.52448 7.44333 2.76221 4.43561 
5.03998 5.52444 2.76218 5.52444 8.39987 4.43555 2.76227 5.03998 4.43561 5.28458 4.68228 5.04001 
2.76224 5.52441 7.91541 5.52448 3.96326 4.80011 5.28223 2.76221 5.52444 4.43558 7.31549 8.51993 
3.9556 2.76221 8.27661 5.52441 2.76221 8.03552 4.19556 5.52441 4.43561 4.19574 0 ]xsh
266.313 472.407 mo
(fortheterminationofthesubdivisionprocess:ifthelead-)
[3.00443 5.03998 6.24344 3.84119 5.52444 6.8356 3.84119 4.43564 3.96332 8.27661 2.76221 5.52444 
5.03998 3.84122 2.76221 5.03998 7.80453 5.03998 5.4043 3.84122 5.52441 6.83557 3.95557 5.52438 
5.76428 5.52444 2.76221 5.28223 2.76224 3.95554 2.76221 5.04004 7.8045 5.52441 3.96332 5.28021 
4.43555 4.43561 3.95557 3.95557 6.60223 2.76227 5.40454 3.84125 5.52441 6.83557 2.76227 4.43555 
5.04004 5.52441 0 ]xsh
266.313 483.927 mo
(ingeigenvalueiszero,whichisthesmallestvalueitcan)
[2.76221 5.52444 8.51999 4.43558 2.76224 5.03998 4.43564 5.28458 4.68228 5.03998 2.76224 5.52441 
7.91547 2.76221 7.43558 4.43558 4.43564 3.96332 5.04001 6.24216 7.19781 5.52444 2.76218 4.19571 
9.12433 2.76224 7.43555 3.84122 5.52444 8.03558 3.95557 8.27655 5.04004 2.76224 2.76224 4.43558 
3.9556 7.32117 4.68225 5.04004 2.76227 5.52441 8.03571 2.76221 7.44128 4.43555 5.04004 0 
]xsh
266.313 495.327 mo
(take,thenthesubgraphisindivisible.)
[3.84119 5.04001 5.04214 4.43558 6.00208 3.84119 5.52448 4.43558 8.88452 3.84119 5.52444 7.79578 
3.95557 5.52444 5.52441 5.04001 3.96332 5.04001 5.52444 8.64441 2.76221 7.31564 2.76224 5.52438 
5.52444 2.76224 5.2822 2.76224 3.95557 2.76224 5.52438 2.76224 4.43558 0 ]xsh
276.273 506.846 mo
(Note,however,thatwhiletheabsenceofpositiveeigen-)
[7.44 5.04001 3.84119 4.43564 5.28201 5.52444 4.79993 6.95795 4.43561 5.0423 4.43561 3.96335 
4.92212 3.84122 5.52444 5.03998 6.24106 7.19781 5.52444 2.76218 2.76227 6.71573 3.84122 5.52444 
6.83557 5.04001 5.52441 3.95557 4.43561 5.52435 4.43564 6.59549 5.04001 5.28436 5.76456 5.04004 
3.95557 2.76227 3.84119 2.76227 5.04218 6.71552 4.43555 2.76227 5.04004 4.43555 5.52441 0 
]xsh
266.313 518.246 mo
(valuesisasu\016cientconditionforindivisibility,itisnot)
[4.68228 5.04001 2.76221 5.52444 4.43561 7.43555 2.76224 7.55545 8.63986 3.95557 5.52444 8.27661 
4.43561 2.76221 4.43558 5.28452 7.44104 4.43561 5.03998 5.52444 5.52444 2.76218 3.84128 2.76218 
5.04007 9.12421 3.00446 5.03998 7.44342 2.76227 5.52435 5.52444 2.76224 5.28223 2.76221 3.9556 
2.76224 5.52438 2.76224 2.76224 2.76218 3.6012 4.44202 6.4823 2.76227 7.44122 2.76221 7.55548 
5.52448 5.03998 0 ]xsh
266.313 529.766 mo
(anecessaryone.Inparticular,ifthereareonlysmall)
[9.48007 5.52444 4.43561 4.43561 4.43558 3.9556 3.95557 5.03998 3.96335 9.60239 5.03998 5.52444 
4.43561 10.6823 3.59882 10.0845 5.52444 5.04001 3.96335 3.84122 2.76224 4.43558 5.52438 2.76224 
5.04001 3.96335 7.32239 2.76224 7.68427 3.84122 5.52441 4.43558 3.96335 8.87543 5.04004 3.96332 
8.75574 5.04004 5.52441 2.76221 9.84241 3.95557 8.27661 5.03998 2.76227 0 ]xsh
266.313 541.166 mo
(positiveeigenvaluesandlargenegativeones,thetermsin)
[5.76459 5.03998 3.9556 2.76221 3.84119 2.76221 5.04221 7.07571 4.43558 2.76224 5.03998 4.43561 
5.28461 4.68228 5.03998 2.76224 5.52441 4.43561 6.59573 5.03998 5.52444 8.16431 2.76224 5.04001 
3.96335 5.04001 7.07565 5.52444 4.43555 5.04004 5.03998 3.84125 2.76221 5.0423 6.95575 5.04004 
5.52441 4.43558 3.9556 5.52228 3.84125 5.52441 7.19568 3.84125 4.43561 3.96332 8.27667 6.71533 
2.76227 0 ]xsh
266.313 552.686 mo
(Eq.\(3\)fornegative)
[6.84442 5.28223 5.04236 3.84119 5.04001 6.12109 3.00443 5.04001 6.24341 5.52444 4.43561 5.03998 
5.04001 3.84122 2.76218 5.0423 0 ]xsh
NCPDHJ+CMMI10*1 [9.96264 0 0 -9.96264 0 0 ]msf
351.154 552.686 mo
(\014)sh
NCPDHK+CMMI7*1 [6.97385 0 0 -6.97385 0 0 ]msf
356.793 554.126 mo
(i)sh
NCPDHG+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
362.434 552.686 mo
(mayoutweighthoseforpositive.It)
[8.27658 4.80014 7.56235 5.04001 5.52444 3.60138 6.95795 4.43558 2.76224 5.04001 7.68436 3.84122 
5.52441 5.04004 3.95557 6.71564 3.00443 5.04001 6.24341 5.76459 5.03998 3.95557 2.76227 3.84119 
2.76227 5.04224 4.43555 6.84229 3.59888 0 ]xsh
266.313 564.086 mo
(isstraightforwardtoguardagainstthispossibility,how-)
[2.76221 7.31564 3.95557 3.84119 3.96335 5.03998 2.76224 5.03998 5.28452 3.84119 3.00443 5.04001 
3.96332 6.95782 5.03998 3.96338 8.52441 3.84119 8.39984 5.04004 5.52441 5.04001 3.96335 8.76431 
5.04001 5.04001 5.04007 2.76221 5.52441 3.95557 7.08105 3.84122 5.52444 2.76221 7.43573 5.76459 
5.03998 3.9556 3.9556 2.76221 5.52441 2.76221 2.76227 2.76221 3.60114 4.44208 6.12219 5.52441 
4.79993 7.19775 0 ]xsh
266.313 575.606 mo
(ever:wesimplycalculatethemodularitycontributionfor)
[4.43561 5.0423 4.43561 3.96332 6.60223 6.95795 6.95578 3.95557 2.76218 8.27661 5.52444 2.76221 
7.80231 4.43558 5.04004 2.76218 4.43561 5.52444 2.76224 5.04001 3.84122 6.9556 3.84119 5.52444 
7.07541 8.27661 5.28021 5.52441 5.52438 2.76224 5.04001 3.96335 2.76224 3.60138 7.68228 4.43561 
5.04001 5.28458 3.84125 3.96332 2.76227 5.52435 5.52441 3.84125 2.76227 5.04004 8.04443 3.00446 
5.03998 0 ]xsh
266.313 587.006 mo
(eachproposedsplitdirectlyandcon\014rmthatitisgreater)
[4.43561 5.04001 4.19568 8.04428 5.52441 3.96335 5.04001 5.7645 5.03998 3.9556 4.43558 8.16446 
3.95557 5.52441 2.76221 2.76221 6.48129 5.52444 2.76218 3.96335 4.43558 4.43564 3.84119 2.76227 
7.92203 5.04001 5.52441 8.28424 4.43558 5.04001 5.52444 5.52444 3.96326 10.7967 3.84122 5.52441 
5.04004 6.6012 2.76227 6.60138 2.76221 6.59576 5.03998 3.96338 4.43555 5.04004 3.84125 4.43555 
0 ]xsh
266.313 598.526 mo
(thanzero.)
[3.84119 5.52448 5.03998 8.76459 4.43561 4.43561 3.96332 5.04001 0 ]xsh
276.273 609.926 mo
(Thusouralgorithmisasfollows.Weconstructthe)
[7.19781 5.28452 5.52441 8.51541 5.04001 5.52444 8.52341 5.03998 2.76221 5.03998 5.04004 3.96332 
2.76221 3.84119 5.52444 12.7167 2.76227 8.63556 5.03998 8.39545 3.00439 5.04004 2.76224 2.76224 
4.80017 7.19781 3.95557 11.0422 9.36237 9.11551 4.43558 5.04004 5.52441 3.95557 3.84119 3.96338 
5.52441 4.43561 8.40112 3.84125 5.52441 0 ]xsh
266.313 621.446 mo
(modularitymatrixforournetworkand\014nditsleading)
[8.27661 5.28015 5.52441 5.52444 2.76221 5.04001 3.96332 2.76221 3.60138 9.24207 8.27661 5.03998 
3.84122 3.96332 2.76221 9.36206 3.00443 5.04001 8.04343 5.04001 5.52444 7.92337 5.52444 4.43558 
3.60135 6.95798 5.04001 3.96335 9.24203 5.04004 5.52441 9.60455 5.52444 5.52438 9.60425 2.76227 
3.84119 8.15576 2.76221 4.43555 5.04004 5.52441 2.76227 5.52435 0 ]xsh
266.313 632.846 mo
(\(mostpositive\)eigenvalueandeigenvector.Wedivide)
[3.84119 8.27661 5.04001 3.95557 8.40112 5.76459 5.04001 3.95557 2.76221 3.84119 2.76224 5.04221 
4.43558 8.40106 4.43558 2.76224 5.03998 4.43564 5.28458 4.68228 5.04001 2.76224 5.52444 8.87555 
5.04001 5.52441 10.0843 4.43558 2.76224 5.04001 4.43558 5.28461 5.04202 4.43561 4.43555 3.84128 
5.04001 3.96338 10.6822 9.36243 8.99554 5.52441 2.76221 5.28223 2.76227 5.52435 0 ]xsh
266.313 644.366 mo
(thenetworkintotwopartsaccordingtothesignsofthe)
[3.84119 5.52448 7.91565 5.52444 4.43561 3.60135 6.95798 5.03998 3.96335 8.64206 2.76224 5.28424 
3.84119 8.39987 3.6012 6.95798 8.39999 5.52444 5.03998 3.96335 3.84122 7.43555 5.04004 4.43555 
4.43564 5.04001 3.96335 5.52438 2.76224 5.52444 8.27997 3.84125 8.39987 3.84122 5.52441 8.03558 
3.95557 2.76221 5.04004 5.52441 7.31555 5.04004 6.48438 3.84119 5.52441 0 ]xsh
266.313 655.766 mo
(elementsofthisvector,andthenrepeatforeachofthe)
[4.43561 2.76221 4.43561 8.27661 4.43561 5.28427 3.84119 7.79544 5.03998 6.72458 3.84119 5.52444 
2.76221 7.79547 5.04208 4.43558 4.43564 3.84119 5.04001 3.96335 6.60214 5.04001 5.52441 9.36432 
3.84122 5.52444 4.43558 9.36456 3.96335 4.43558 5.76459 4.43555 5.04004 7.6814 3.00439 5.04004 
7.68329 4.43555 5.04004 4.19568 9.24426 5.03998 6.84454 3.84119 5.52441 0 ]xsh
266.313 667.286 mo
(parts.Ifatanystagewe\014ndthattheproposedsplit)
[5.52444 5.04001 3.96332 3.84122 3.95554 10.6822 3.59882 7.56461 5.03998 8.40103 5.04001 5.28436 
9.72214 3.95557 3.84119 5.04001 5.03998 8.87579 6.95795 8.87567 5.52441 5.52441 10.0843 3.84122 
5.52441 5.04004 8.40121 3.84122 5.52441 8.99573 5.52441 3.96332 5.04004 5.76453 5.03998 3.95557 
4.43561 9.96442 3.95557 5.52441 2.76221 2.76227 0 ]xsh
266.313 678.686 mo
(makesazeroornegativecontributiontothetotalmod-)
[8.27661 5.03998 5.04239 4.43561 7.3157 8.51993 4.43561 4.43561 3.96332 8.39987 5.03998 7.44342 
5.52441 4.43564 5.03998 5.04001 3.84119 2.76227 5.0423 7.79559 4.43555 5.04004 5.28458 3.84122 
3.96332 2.76227 5.52435 5.52444 3.84122 2.76224 5.04001 9.00427 3.84122 8.52017 3.84125 5.52441 
8.03558 3.84119 5.04004 3.84125 5.04004 6.24219 8.27661 5.28021 5.52441 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/NCPDHG+CMR10*1 uf
/NCPDHG+CMR10 uf
/DMSAAA+CMR10 uf
/NCPDHI+CMBX9*1 uf
/NCPDHI+CMBX9 uf
/QJJAAA+CMBX9 uf
/NCPDHJ+CMMI10*1 uf
/NCPDHJ+CMMI10 uf
/NKWBAA+CMMI10 uf
/NCPDHN+CMR7*1 uf
/NCPDHN+CMR7 uf
/ELRBAA+CMR7 uf
/NCPDHO+CMEX10*1 uf
/NCPDHO+CMEX10 uf
/OHGCAA+CMEX10 uf
/NCPDHM+CMBX10*1 uf
/NCPDHM+CMBX10 uf
/MZQAAA+CMBX10 uf
/NCPDHK+CMMI7*1 uf
/NCPDHK+CMMI7 uf
/HJCBAA+CMMI7 uf
/NCPDHL+CMSY10*1 uf
/NCPDHL+CMSY10 uf
/UGXAAA+CMSY10 uf
/NCPDHH+CMR9*1 uf
/NCPDHH+CMR9 uf
/HIBBAA+CMR9 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
