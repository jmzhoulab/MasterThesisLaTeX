%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: random.pdf
%%Creator: Adobe Acrobat 10.0.1
%%For: WuXF
%%CreationDate: 2012-4-11, 16:30:07
%%BoundingBox: 0 0 434 442
%%HiResBoundingBox: 0 0 434 442
%%CropBox: 0 0 434 442
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1010 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="MiKTeX GPL Ghostscript  9.0"
   xmp:ModifyDate="2012-03-13T21:01:27+08:00"
   xmp:CreateDate="2012-03-13T21:01:27+08:00"
   xmp:CreatorTool="Adobe Acrobat 10.1.2"
   xmpMM:DocumentID="24a8f954-6f68-11e1-0000-6a1c21449753"
   xmpMM:InstanceID="24a8f954-6f68-11e1-0000-6a1c21449753"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">random.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Administrator</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -442 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 442 li
434 442 li
434 0 li
cp
clp
gsave
1 .39801 mo
1 442 li
433.002 442 li
433.002 .39801 li
cp
clp
0 442 mo
434 442 li
434 -3.05176e-5 li
0 -3.05176e-5 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
.28247 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
90.0504 157.301 mo
108.95 158.451 li
.882813 .769531 0 0 cmyk
@
116.47 158.541 mo
156.15 156.971 li
@
113.02 138.111 mo
112.77 154.921 li
@
94.9004 187.201 mo
110.71 161.881 li
@
100.33 135.481 mo
110.94 155.361 li
@
156.17 157.221 mo
131.46 159.871 li
@
159.63 140.161 mo
130.9 158.261 li
@
89.4105 175.881 mo
124.23 161.691 li
@
142.31 157.071 mo
127.79 121.291 li
@
145.21 164.031 mo
160.34 199.311 li
@
140.69 158.331 mo
132.68 152.421 li
@
99.6203 149.161 mo
80.3906 142.581 li
@
102.26 146.731 mo
99.4906 135.801 li
@
108.31 177.161 mo
103.89 154.081 li
@
131.25 136.881 mo
106.57 148.751 li
@
160.12 169.181 mo
140.45 171.391 li
@
129.88 153.941 mo
131.93 187.351 li
@
131.16 146.731 mo
142.37 121.311 li
@
34.1004 172.111 mo
51.1605 173.261 li
@
108.96 113.181 mo
100.37 128.851 li
@
65.2004 106.931 mo
80.8906 115.501 li
@
109.83 132.431 mo
87.4406 119.221 li
@
108.11 107.201 mo
94.0305 93.041 li
@
175.41 112.211 mo
164.46 134.761 li
@
201.9 104.421 mo
180.76 108.161 li
@
114.43 110.761 mo
140.23 116.981 li
@
174.33 117.831 mo
169.8 98.061 li
@
191.59 119.141 mo
171.5 97.171 li
@
153.39 81.491 mo
166.05 91.98 li
@
152.45 69.651 mo
166.86 91.251 li
@
175.61 117.761 mo
179.09 87.921 li
@
178.36 60.051 mo
179.34 80.421 li
@
161.66 73.921 mo
155.07 91.771 li
@
156.88 122.991 mo
154.18 99.041 li
@
146.69 65.711 mo
131.55 62.401 li
@
194.65 118.191 mo
197.75 96.23 li
@
193.97 129.741 mo
207.39 117.981 li
@
189.7 135.701 mo
184.94 147.161 li
@
187.47 133.061 mo
181.21 134.481 li
@
188.57 134.981 mo
172.52 152.211 li
@
185.17 163.911 mo
198.93 176.031 li
@
184.98 164.111 mo
207.17 186.761 li
@
180.47 164.691 mo
170.44 182.141 li
@
183.42 157.811 mo
193.05 125.531 li
@
148.98 148.321 mo
178.84 160.041 li
@
196.42 160.361 mo
200.69 174.911 li
@
198.43 158.921 mo
213.94 169.921 li
@
163.68 156.811 mo
191.59 156.751 li
@
220.77 145.511 mo
198.8 155.221 li
@
167.38 167.421 mo
191.84 158.091 li
@
184.42 170.491 mo
193.01 159.691 li
@
215.27 136.721 mo
198.02 154.071 li
@
141.96 145.571 mo
116.59 135.711 li
@
192.82 125.451 mo
184.81 147.111 li
@
178.72 183.581 mo
182.96 154.371 li
@
161.91 171.981 mo
151.26 189.471 li
@
148.33 178.471 mo
160.67 170.761 li
@
157.88 130.451 mo
163.28 165.041 li
@
184.91 186.981 mo
166.71 171.231 li
@
164.36 189.741 mo
163.95 172.531 li
@
202.17 140.361 mo
198.52 166.461 li
@
190.67 197.971 mo
197.03 173.831 li
@
218.01 164.221 mo
201.6 169.111 li
@
189.52 186.121 mo
196.22 173.511 li
@
200.71 133.431 mo
189.78 115.811 li
@
147.63 117.421 mo
184.05 113.061 li
@
221.31 111.401 mo
191.56 112.471 li
@
127.28 65.321 mo
124.57 82.461 li
@
124.26 89.931 mo
126.09 114.041 li
@
124.23 114.701 mo
113.05 98.631 li
@
220.85 182.341 mo
205.45 179.261 li
@
210.15 169.701 mo
221.79 180.511 li
@
208.62 154.221 mo
163.68 156.621 li
@
256.94 160.611 mo
216.1 154.571 li
@
248.38 218.891 mo
228.89 204.811 li
@
209.13 170.471 mo
224.09 199.271 li
@
225 223.521 mo
225.68 206.371 li
@
204.81 164.391 mo
180.12 138.061 li
@
220.07 166.581 mo
211.35 186.011 li
@
237.46 186.001 mo
213.54 188.981 li
@
201.09 227.191 mo
208.96 193.121 li
@
207.27 199.741 mo
165.58 202.521 li
@
213.3 196.491 mo
234.31 168.861 li
@
213.98 201.831 mo
235.16 218.611 li
@
218.48 161.071 mo
197.92 147.491 li
@
247.82 164.921 mo
225.38 163.401 li
@
167.26 152.351 mo
153.65 139.111 li
@
171.31 151.461 mo
176.18 138.831 li
@
164.98 189.771 mo
169.42 158.701 li
@
191.11 144.581 mo
166.49 138.991 li
@
226.48 122.991 mo
197.89 122.041 li
@
181.57 169.701 mo
175.67 125.231 li
@
165.53 271.671 mo
187.21 288.111 li
@
187.14 319.671 mo
189.82 294.131 li
@
210.11 269.921 mo
192.83 287.681 li
@
213.76 270.841 mo
218.51 287.501 li
@
210.83 263.971 mo
190.36 229.031 li
@
216.4 268.061 mo
248.66 275.401 li
@
198.51 234.211 mo
183.73 262.711 li
@
189.75 192.641 mo
199.93 208.921 li
@
139.22 240.781 mo
159.9 206.011 li
@
161.07 213.811 mo
151.35 225.741 li
@
159.7 210.501 mo
131.41 207.541 li
@
164.19 207.201 mo
167.82 189.101 li
@
151.62 195.671 mo
161.14 207.921 li
@
121.63 216.861 mo
159.72 211.421 li
@
231.37 202.671 mo
167.19 210.441 li
@
174.89 237.491 mo
181.09 262.401 li
@
165.31 197.171 mo
173.12 230.171 li
@
187.03 204.251 mo
171.53 219.571 li
@
179.83 211.041 mo
186.55 222.531 li
@
176.48 204.321 mo
170.02 188.881 li
@
185.98 192.761 mo
179.71 204.471 li
@
167.03 196.241 mo
175.35 205.051 li
@
171.96 224.341 mo
196.51 241.101 li
@
130.04 234.501 mo
165.26 223.351 li
@
177.2 190.941 mo
169.82 218.581 li
@
182.53 177.171 mo
188 222.041 li
@
166.28 238.901 mo
185.22 227.691 li
@
147.43 225.221 mo
133.7 194.551 li
@
167.88 191.951 mo
174.74 188.851 li
@
130.88 135.091 mo
116.84 134.501 li
@
138.41 135.261 mo
173.77 135.311 li
@
203.11 106.581 mo
180.04 132.501 li
@
178.82 254.861 mo
196.33 245.061 li
@
234.78 237.721 mo
203.34 242.641 li
@
180.3 269.421 mo
166.62 296.551 li
@
178.03 287.321 mo
181.31 269.761 li
@
165.22 266.771 mo
172.84 259.331 li
@
153.11 263.151 mo
171.92 257.741 li
@
159.36 240.011 mo
143.26 236.471 li
@
146.08 262.611 mo
130.82 255.511 li
@
161.34 265.821 mo
150.16 232.231 li
@
132.73 266.281 mo
136.54 247.711 li
@
108.73 253.821 mo
133.73 245.241 li
@
129.5 250.791 mo
137.5 238.801 li
@
125.38 250.751 mo
115.66 235.561 li
@
124.94 239.091 mo
115.69 260.361 li
@
100.02 223.321 mo
123.03 234.051 li
@
101.62 256.311 mo
83.3504 262.851 li
@
300.44 316.191 mo
292.32 301.991 li
@
279.22 276.301 mo
288.76 295.351 li
@
281.17 129.051 mo
266.21 140.381 li
@
268.42 212.981 mo
285.24 218.281 li
@
295.67 265.621 mo
313.13 246.071 li
@
289.46 269.131 mo
256.03 275.531 li
@
313.35 281.661 mo
296.31 270.491 li
@
287.85 190.221 mo
310.57 210.631 li
@
282.5 184.931 mo
263.21 163.941 li
@
259.56 192.851 mo
281.36 188.451 li
@
282.23 150.981 mo
264.07 159.561 li
@
240.79 240.121 mo
254.29 257.671 li
@
238.41 233.371 mo
238.21 224.711 li
@
238.62 256.921 mo
238.52 240.911 li
@
254.47 197.101 mo
239.89 233.641 li
@
262.01 247.741 mo
275.56 269.721 li
@
257.47 241.781 mo
240.68 223.711 li
@
258.74 241.001 mo
252.73 224.631 li
@
248.97 218.241 mo
237.57 205.071 li
@
270.76 231.331 mo
254.76 222.851 li
@
261.25 210.691 mo
238.69 203.381 li
@
235.26 198.451 mo
236.44 169.631 li
@
276.27 201.291 mo
238.87 202.131 li
@
255.03 189.931 mo
246.47 152.451 li
@
264.19 182.381 mo
258.11 190.571 li
@
283.78 200.841 mo
314.85 197.891 li
@
265.29 175.761 mo
261.8 164.751 li
@
262.77 180.251 mo
244.86 184.641 li
@
266.76 283.521 mo
274.85 275.571 li
@
263.02 282.551 mo
257.65 264.271 li
@
253.32 272.601 mo
255.6 264.291 li
@
319.6 285.861 mo
333.02 295.051 li
@
216.49 130.581 mo
211.67 118.981 li
@
221.6 133.221 mo
238.43 129.391 li
@
230.8 126.841 mo
236.04 162.141 li
@
231.63 119.611 mo
243.24 90.291 li
@
239.25 131.011 mo
227.07 141.521 li
@
226.88 114.561 mo
243.82 145.471 li
@
239.43 163.391 mo
260.37 145.131 li
@
261.18 157.431 mo
262.69 146.391 li
@
255.34 164.981 mo
275.11 164.001 li
@
209.07 102.271 mo
241.18 88.291 li
@
225.38 107.511 mo
227.32 84.321 li
@
227.72 76.811 mo
228.09 59.401 li
@
247.84 84.821 mo
260.16 77.281 li
@
275.1 70.381 mo
247.95 85.001 li
@
254.49 58.641 mo
245.87 83.23 li
@
303.16 54.501 mo
281.68 66.73 li
@
255.65 51.321 mo
255.27 34.211 li
@
258.3 52.341 mo
269.9 39.911 li
@
317.47 239.971 mo
325.49 225.551 li
@
315.36 239.511 mo
313.66 216.901 li
@
333.98 252.111 mo
319.03 244.901 li
@
319.85 201.081 mo
326.07 218.701 li
@
339.11 215.211 mo
317.13 213.441 li
@
346.56 216.221 mo
362.5 219.271 li
@
345.35 186.701 mo
322.09 196.121 li
@
372.04 176.321 mo
352.36 183.931 li
@
378.04 172.131 mo
388.32 160.451 li
@
379.31 175.291 mo
394.89 176.681 li
@
365.89 10.821 mo
353.43 19.041 li
@
334.75 35.991 mo
347.57 23.711 li
@
350.29 42.301 mo
335.72 39.351 li
@
309.73 50.821 mo
328.72 40.411 li
@
30.7004 418.141 mo
30.4203 430.901 li
@
49.9703 418.141 mo
49.6906 430.901 li
@
69.2305 418.141 mo
68.9605 430.901 li
@
93.5605 223.951 mo
76.8203 236.181 li
@
92.8805 222.281 mo
83.3105 223.691 li
@
96.1605 217.991 mo
93.3504 194.141 li
@
114.19 218.051 mo
83.2906 223.581 li
@
59.8703 234.341 mo
76.2305 225.961 li
@
57.2703 221.581 mo
75.8406 223.791 li
@
70.8605 240.781 mo
56.3605 252.601 li
@
78.9406 260.461 mo
74.6406 242.071 li
@
73.4906 211.241 mo
73.7406 234.631 li
@
77.8004 267.311 mo
68.5105 282.141 li
@
147.02 327.891 mo
136.84 341.161 li
@
151.31 321.711 mo
162.93 303.111 li
@
160.41 272.511 mo
149.97 287.861 li
@
185.95 327.101 mo
181.45 347.871 li
@
172.95 372.011 mo
179.32 355.071 li
@
162.54 392.231 mo
169.82 378.851 li
@
111.2 183.931 mo
125.48 204.081 li
@
125.83 210.441 mo
115.47 229.091 li
@
70.8305 190.791 mo
89.1406 190.471 li
@
84.4805 180.791 mo
74.8805 204.001 li
@
82.1805 176.851 mo
58.6504 173.971 li
@
2 lc
0 lj
89.9105 157.071 mo
89.9105 159.071 88.2906 160.691 86.2906 160.691 cv
84.2906 160.691 82.6605 159.071 82.6605 157.071 cv
82.6605 155.071 84.2906 153.441 86.2906 153.441 cv
88.2906 153.441 89.9105 155.071 89.9105 157.071 cv
cp
0 0 0 .71875 cmyk
@
89.9105 157.071 mo
89.9105 159.071 88.2906 160.691 86.2906 160.691 cv
84.2906 160.691 82.6605 159.071 82.6605 157.071 cv
82.6605 155.071 84.2906 153.441 86.2906 153.441 cv
88.2906 153.441 89.9105 155.071 89.9105 157.071 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: PBAAAA+ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+ArialMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000566376
7420962ad27600000124000006306670676dcc79599a000007540000066e
676c796600000000000041cc0000116668656164ce98269100000dc40000
003668686561123312ff00000dfc00000024686d74780000000000000e20
000000626c6f63610000000000000e8400000d166d6178700b470ca80000
1b9c000000206e616d65c0f2653b00001bbc00001b0d7072657052fec4e9
000036cc00000aff67646972000000000000000000000000000100000190
000500000000000000000000000000000000000000000000000000000000
00000000000000000000000000080000000000000000000000000000f000
f0ff000000000000000000000000000100000000000005ba001905ba001a
05a70019042600180000ffe70000ffe80000ffe7fe69ffe805ba0019fe69
ffe802ea000000b8000000b80000000000a800ad016900ad00bf00c201f0
001800af00b900b400c800170044009c007c009400870006005a00c80089
005200520005004400940119ffb4002f00a1000300a100cd00170057007e
00ba00160118ffe9007f008503d300870085000d002200410050006f008d
014cff75005c00df04830037004c006e00700180ff58ff8eff92ffa400a5
00b903c8fffd000b001a0063006300cdffee05d8ffdc002d005c00950099
00df019209b500400057008000b9039d0072009a035d0401ff67fffa0003
0021007700cd0004004d00cd01c0022b004c006500e70118017c034305d8
ffa3ffb0ffc40003001c005d0068009a00ba013501470221055cff4dffcd
0016002d00780080009900b200b600b600b800bd00da010c05f0ffa4fff0
0019002c0049007f00b400ce01c003fefd81fe3f00000005001800290039
0049006f00be00c700d0012301c1026f050c05320540057affd400140031
0055005700a700b400e601f7027e027e027f03c60446ff42000e00850091
00bf00c200c500e1011a012f014f01560229026f029e03720008002c0031
0031006400690089009800c700de012b01b6020c02cf03a304ab04fb061d
fee0ff0e00060026009b009d00c1010d011801200173018201d601e30243
025f029b02e2039404a904d20761001c005e006d008d00ab00f701120138
0151015b0168017c01870191019901cd01d001e802410254026b02ef0368
037103bd044204420453047304830586058b06e8fe58fec4fed1fef7ff32
ff860051007c008100910095009e00b400b900cf00d900d900df00e20105
010b010e010e012001210155017b017b017e018d01a201a801a901b401d0
01d001e201e901f201f501fb020002000206021b02210222022202230272
02770294029c02cf02cf02d002ec02f903170322032b0335033c0359036f
037103870390039003b503e1041a04cf04ff053205320596059f05a805ab
05c205f0060c0782080008ccfca3fd2afddefe00fe88fe96feb2feb4ffe1
00150019001a001c001f003c005100610061006a0078009600a500af00d3
010c0118011a012a013e014c0151015f016a0171017801820184019a01a5
01a801a901ae01bc01cd01d701ef0200020d021c02210222022e02350242
024f024f025e026502710290029202b402d602fa0307030b030f0315032a
0347035d036503740379039603b003cc03dd03e203f603fc03fc03ff040a
041f04220426042b0447045f0475049e04e704e7055c05cb05e5060a066d
068606b806f10736073e07500751075d078f07b607d4086000b600c300b5
00b700000000000000000000000001e00381034503b5008e0233041902ce
02ce002d005f0064034d023f000002a80188027d01b402240578063b023b
014e00f00426029402c6029f02f6023b034d014b0153006a023100000000
0000061404aa0000003c04c300ed04bc026502ce03b50078060c017e02ef
060c00b201000239000001c50330042b03cb00da03df010704a100db040a
011701ed02a70350010b01bd043e05580021039c00ae0371017d00b50245
00000afb088c012b014e01aa00870054013201f803ff0003024e00b40037
03e30083006b02d800ed00770088009701640467008e0033017c00e700a6
029e0329056e062a061501c90269048a021301b4000204a9000002390124
010305140084015d039a06ef02d9007500cf040a00de03ac04bc02cf02ae
034d04f005520168006d007d00860071ff810079055804d2016700030156
002504e00094007c033204210094007f0072005c002f00b6001800ba00b8
0041034d00720018001f004c016a01550099009a009a009800b200040078
006900140057006e00ce00b4065402b80067050e016500e7000004cbfe52
005affa60099ff67006eff92002dffd40087ff7c00b800a800e5008f00a8
0185fe7b0070001e00d900de014c054602cf0546ff2d028a02d902530296
00b700000000000000000000000000000125011800ea00ea00ae0000003e
05bb008a04d70053003fff8cffd500150028002200990062004a00e4006d
00ee00e5004803c00033fe4e02b1ff460370007905df0051ffa7ff1f010a
0068ff6c004f00bc00a507050061072b4043555441403f3e3d3c3b3a3938
373534333231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a19
1817161514131211100f0e0d0c0b0a090807060504030201002c45234660
20b02660b004262348482d2c452346236120b02661b004262348482d2c45
234660b0206120b04660b004262348482d2c4523462361b0206020b02661
b02061b004262348482d2c45234660b0406120b06660b004262348482d2c
4523462361b0406020b02661b04061b004262348482d2c0110203c003c2d
2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320b0
4d44235920b09051582320b00d44235921212d2c20204518684420b00160
2045b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b432343
0b2d2c00b0172370b101173e01b0172370b10217453ab10200080d2d2c45
b01a234445b01923442d2c2045b00325456164b050515845441b2121592d
2cb00143632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b0
0743650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364
615c58b00361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb017
23442d2cb01243588745b0112bb0172344b0177ae41b038a45186920b017
23448a8a8720b0a05158b0112bb0172344b0177ae41b21b0177ae4595918
2d2c2d2cb0022546608a46b040618c482d2c4b53205c58b002855958b001
85592d2c20b0032545b019234445b01a23444565234520b00325606a20b0
09234223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a
54582321b03f1b235961441cb114008a5279b31940201945208a54582321
b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d
4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb1101143
2343650b2d2c4b525845441b2121592d2c0120b003252349b04060b02063
20b000525823b002253823b002256538008a63381b212121212159012d2c
4bb06451584569b00943608a103a1b212121592d2c01b005251023208af5
00b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b006
2510f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c
2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76
b8022323701020b802234520b0005058b00161593a2f182d2c21210c6423
648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b0
02602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c
0c6423648bb84000626023212d2cb4000100000015b00826b00826b00826
b008260f10161345683ab001162d2cb4000100000015b00826b00826b008
26b008260f1016134568653ab001162d2c4b53234b515a5820458a60441b
2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121
592d2c4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03
592d2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425
060c6423646164b807085158b00425b00425012046b01060482046b01060
48590a21211b2121592d2cb012435c580cb00425b00425060c6423646164
b807085158b00425b00425012046b8fff060482046b8fff06048590a2121
1b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b0
3b2b1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a03
4b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c4b5258b004
25b0042549b00425b00425496120b0005458212043b0005558b00325b003
25b8ffc038b8ffc038591bb04054582043b0005458b00225b8ffc038591b
2043b0005458b00325b00325b8ffc038b8ffc0381bb00325b8ffc0385959
5959212121212d2c462346608a8a462320468a608a61b8ff806223201023
8ab902c202c28a70456020b0005058b00161b8ffba8b1bb0468c59b01060
68013a2d2cb1020042b123018851b1400188535a58b910000020885458b2
02010243604259b12401885158b920000040885458b2020202436042b124
01885458b2022002436042004b014b5258b2020802436042591bb9400000
80885458b202040243604259b94000008063b80100885458b20208024360
4259b94000010063b80200885458b202100243604259b94000020063b804
00885458b202400243604259595959592d2cb0024354584b53234b515a58
381b2121591b21212121592d00000001000000030000b1b0afba5f0f3cf5
081b080000000000a2e3272a00000000b9d5b4f6faaffd671000080c0000
0009000100000000000000010000073efe4e00431000faaffe2610000001
000000000000000000000000000000140600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100023900ba0239
00ba0473005500df003c0056001a0055004d006100530055000000000015
001500150015001500150015001500150015001500150015001500150015
0015003300330111017f029403810431050e05f9064f079908b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b308b308b308b308b308b308b308b3
08b308b308b308b308b308b308b308b3000000010000068a0100003f0076
000700020010002f00560000040d0aff0003000200000046034e00000003
0000000000fe00000000000300000001000a013e0000000300000002000e
05de0000000300000003005e05c00000000300000004000a013e00000003
00000005001805ee0000000300000006000e061e000000030000000700c4
062c00000003000000080026077c0000000300000009008a0da400000003
0000000a04c200fe000000030000000b00620e2e000000030000000c0066
0e90000000030000000d06b406f0000000030000000e005c0ef600010000
00000000007f0f52000100000000000100050ff100010000000000020007
12410001000000000003002f1232000100000000000400050ff100010000
00000005000c124900010000000000060007126100010000000000070062
126800010000000000080013131000010000000000090045162400010000
0000000a02610fd1000100000000000b00311669000100000000000c0033
169a000100000000000d035a12ca000100000000000e002e16cd00030001
04030002000c16fb00030001040500020010170b0003000104060002000c
171b00030001040700020010172700030001040800020010173700030001
0409000000fe00000003000104090001000a013e0003000104090002000e
05de0003000104090003005e05c00003000104090004000a013e00030001
04090005001805ee0003000104090006000e061e000300010409000700c4
062c00030001040900080026077c0003000104090009008a0da400030001
0409000a04c200fe000300010409000b00620e2e000300010409000c0066
0e90000300010409000d06b406f0000300010409000e005c0ef600030001
040a0002000c16fb00030001040b00020010174700030001040c0002000c
16fb00030001040e0002000c17570003000104100002000e176700030001
04130002001217750003000104140002000c16fb00030001041500020010
16fb0003000104160002000c16fb0003000104190002000e178700030001
041b00020010175700030001041d0002000c16fb00030001041f0002000c
16fb0003000104240002000e179500030001042a0002000e17a300030001
042d0002000e17b100030001080a0002000c16fb0003000108160002000c
16fb000300010c0a0002000c16fb000300010c0c0002000c16fb00540079
007000650066006100630065002000a900200054006800650020004d006f
006e006f007400790070006500200043006f00720070006f007200610074
0069006f006e00200070006c0063002e00200044006100740061002000a9
00200054006800650020004d006f006e006f007400790070006500200043
006f00720070006f0072006100740069006f006e00200070006c0063002f
005400790070006500200053006f006c007500740069006f006e00730020
0049006e0063002e00200031003900390030002d0031003900390032002e
00200041006c006c00200052006900670068007400730020005200650073
006500720076006500640043006f006e00740065006d0070006f00720061
00720079002000730061006e007300200073006500720069006600200064
0065007300690067006e002c00200041007200690061006c00200063006f
006e007400610069006e00730020006d006f00720065002000680075006d
0061006e0069007300740020006300680061007200610063007400650072
0069007300740069006300730020007400680061006e0020006d0061006e
00790020006f006600200069007400730020007000720065006400650063
006500730073006f0072007300200061006e006400200061007300200073
0075006300680020006900730020006d006f0072006500200069006e0020
00740075006e00650020007700690074006800200074006800650020006d
006f006f00640020006f006600200074006800650020006c006100730074
002000640065006300610064006500730020006f00660020007400680065
0020007400770065006e00740069006500740068002000630065006e0074
007500720079002e002000200054006800650020006f0076006500720061
006c006c002000740072006500610074006d0065006e00740020006f0066
002000630075007200760065007300200069007300200073006f00660074
0065007200200061006e0064002000660075006c006c0065007200200074
00680061006e00200069006e0020006d006f0073007400200069006e0064
007500730074007200690061006c0020007300740079006c006500200073
0061006e0073002000730065007200690066002000660061006300650073
002e00200020005400650072006d0069006e0061006c0020007300740072
006f006b00650073002000610072006500200063007500740020006f006e
002000740068006500200064006900610067006f006e0061006c00200077
0068006900630068002000680065006c0070007300200074006f00200067
006900760065002000740068006500200066006100630065002000610020
006c0065007300730020006d0065006300680061006e006900630061006c
00200061007000700065006100720061006e00630065002e002000200041
007200690061006c00200069007300200061006e00200065007800740072
0065006d0065006c007900200076006500720073006100740069006c0065
002000660061006d0069006c00790020006f006600200074007900700065
00660061006300650073002000770068006900630068002000630061006e
002000620065002000750073006500640020007700690074006800200065
007100750061006c0020007300750063006300650073007300200066006f
007200200074006500780074002000730065007400740069006e00670020
0069006e0020007200650070006f007200740073002c0020007000720065
00730065006e0074006100740069006f006e0073002c0020006d00610067
0061007a0069006e006500730020006500740063002c00200061006e0064
00200066006f007200200064006900730070006c00610079002000750073
006500200069006e0020006e006500770073007000610070006500720073
002c0020006100640076006500720074006900730069006e006700200061
006e0064002000700072006f006d006f00740069006f006e0073002e004d
006f006e006f0074007900700065003a0041007200690061006c00200052
006500670075006c00610072003a00560065007200730069006f006e0020
0033002e0030003000200028004d006900630072006f0073006f00660074
00290041007200690061006c004d00540041007200690061006c00ae0020
00540072006100640065006d00610072006b0020006f0066002000540068
00650020004d006f006e006f007400790070006500200043006f00720070
006f0072006100740069006f006e00200070006c00630020007200650067
006900730074006500720065006400200069006e00200074006800650020
0055005300200050006100740020002600200054004d0020004f00660066
002e00200061006e006400200065006c0073006500770068006500720065
002e004e004f00540049004600490043004100540049004f004e0020004f
00460020004c004900430045004e00530045002000410047005200450045
004d0045004e0054000d000a000d000a0054006800690073002000740079
007000650066006100630065002000690073002000740068006500200070
0072006f007000650072007400790020006f00660020004d006f006e006f
00740079007000650020005400790070006f006700720061007000680079
00200061006e006400200069007400730020007500730065002000620079
00200079006f007500200069007300200063006f00760065007200650064
00200075006e00640065007200200074006800650020007400650072006d
00730020006f0066002000610020006c006900630065006e007300650020
00610067007200650065006d0065006e0074002e00200059006f00750020
00680061007600650020006f0062007400610069006e0065006400200074
00680069007300200074007900700065006600610063006500200073006f
006600740077006100720065002000650069007400680065007200200064
00690072006500630074006c0079002000660072006f006d0020004d006f
006e006f00740079007000650020006f007200200074006f006700650074
0068006500720020007700690074006800200073006f0066007400770061
007200650020006400690073007400720069006200750074006500640020
006200790020006f006e00650020006f00660020004d006f006e006f0074
007900700065002700730020006c006900630065006e0073006500650073
002e000d000a000d000a005400680069007300200073006f006600740077
00610072006500200069007300200061002000760061006c007500610062
006c00650020006100730073006500740020006f00660020004d006f006e
006f0074007900700065002e00200055006e006c00650073007300200079
006f00750020006800610076006500200065006e00740065007200650064
00200069006e0074006f0020006100200073007000650063006900660069
00630020006c006900630065006e00730065002000610067007200650065
006d0065006e00740020006700720061006e00740069006e006700200079
006f00750020006100640064006900740069006f006e0061006c00200072
00690067006800740073002c00200079006f007500720020007500730065
0020006f00660020007400680069007300200073006f0066007400770061
007200650020006900730020006c0069006d006900740065006400200074
006f00200079006f0075007200200077006f0072006b0073007400610074
0069006f006e00200066006f007200200079006f007500720020006f0077
006e0020007000750062006c0069007300680069006e0067002000750073
0065002e00200059006f00750020006d006100790020006e006f00740020
0063006f007000790020006f007200200064006900730074007200690062
0075007400650020007400680069007300200073006f0066007400770061
00720065002e000d000a000d000a0049006600200079006f007500200068
00610076006500200061006e00790020007100750065007300740069006f
006e00200063006f006e006300650072006e0069006e006700200079006f
00750072002000720069006700680074007300200079006f007500200073
0068006f0075006c00640020007200650076006900650077002000740068
00650020006c006900630065006e00730065002000610067007200650065
006d0065006e007400200079006f00750020007200650063006500690076
0065006400200077006900740068002000740068006500200073006f0066
007400770061007200650020006f007200200063006f006e007400610063
00740020004d006f006e006f007400790070006500200066006f00720020
006100200063006f007000790020006f006600200074006800650020006c
006900630065006e00730065002000610067007200650065006d0065006e
0074002e000d000a000d000a004d006f006e006f00740079007000650020
00630061006e00200062006500200063006f006e00740061006300740065
0064002000610074003a000d000a000d000a0055005300410020002d0020
002800380034003700290020003700310038002d00300034003000300009
00090055004b0020002d0020003000310031003400340020003000310037
003300370020003700360035003900350039000d000a0068007400740070
003a002f002f007700770077002e006d006f006e006f0074007900700065
002e0063006f006d004d006f006e006f0074007900700065002000540079
00700065002000440072006100770069006e00670020004f006600660069
006300650020002d00200052006f00620069006e0020004e006900630068
006f006c00610073002c0020005000610074007200690063006900610020
005300610075006e00640065007200730020003100390038003200680074
00740070003a002f002f007700770077002e006d006f006e006f00740079
00700065002e0063006f006d002f00680074006d006c002f006d0074006e
0061006d0065002f006d0073005f0061007200690061006c002e00680074
006d006c0068007400740070003a002f002f007700770077002e006d006f
006e006f0074007900700065002e0063006f006d002f00680074006d006c
002f006d0074006e0061006d0065002f006d0073005f00770065006c0063
006f006d0065002e00680074006d006c0068007400740070003a002f002f
007700770077002e006d006f006e006f0074007900700065002e0063006f
006d002f00680074006d006c002f0074007900700065002f006c00690063
0065006e00730065002e00680074006d006c547970656661636520a92054
6865204d6f6e6f7479706520436f72706f726174696f6e20706c632e2044
61746120a920546865204d6f6e6f7479706520436f72706f726174696f6e
20706c632f5479706520536f6c7574696f6e7320496e632e20313939302d
313939322e20416c6c20526967687473205265736572766564436f6e7465
6d706f726172792073616e732073657269662064657369676e2c20417269
616c20636f6e7461696e73206d6f72652068756d616e6973742063686172
6163746572697374696373207468616e206d616e79206f66206974732070
72656465636573736f727320616e642061732073756368206973206d6f72
6520696e2074756e65207769746820746865206d6f6f64206f6620746865
206c6173742064656361646573206f6620746865207477656e7469657468
2063656e747572792e2020546865206f766572616c6c2074726561746d65
6e74206f662063757276657320697320736f6674657220616e642066756c
6c6572207468616e20696e206d6f737420696e647573747269616c207374
796c652073616e732073657269662066616365732e20205465726d696e61
6c207374726f6b65732061726520637574206f6e2074686520646961676f
6e616c2077686963682068656c707320746f206769766520746865206661
63652061206c657373206d656368616e6963616c20617070656172616e63
652e2020417269616c20697320616e2065787472656d656c792076657273
6174696c652066616d696c79206f66207479706566616365732077686963
682063616e2062652075736564207769746820657175616c207375636365
737320666f7220746578742073657474696e6720696e207265706f727473
2c2070726573656e746174696f6e732c206d6167617a696e657320657463
2c20616e6420666f7220646973706c61792075736520696e206e65777370
61706572732c206164766572746973696e6720616e642070726f6d6f7469
6f6e732e4d6f6e6f747970653a417269616c20526567756c61723a566572
73696f6e20332e303020284d6963726f736f667429417269616c4d544172
69616ca82054726164656d61726b206f6620546865204d6f6e6f74797065
20436f72706f726174696f6e20706c63207265676973746572656420696e
2074686520555320506174202620544d204f66662e20616e6420656c7365
77686572652e4e4f54494649434154494f4e204f46204c4943454e534520
41475245454d454e540d0a0d0a5468697320747970656661636520697320
7468652070726f7065727479206f66204d6f6e6f74797065205479706f67
726170687920616e64206974732075736520627920796f7520697320636f
766572656420756e64657220746865207465726d73206f662061206c6963
656e73652061677265656d656e742e20596f752068617665206f62746169
6e6564207468697320747970656661636520736f66747761726520656974
686572206469726563746c792066726f6d204d6f6e6f74797065206f7220
746f676574686572207769746820736f6674776172652064697374726962
75746564206279206f6e65206f66204d6f6e6f747970652773206c696365
6e736565732e0d0a0d0a5468697320736f66747761726520697320612076
616c7561626c65206173736574206f66204d6f6e6f747970652e20556e6c
65737320796f75206861766520656e746572656420696e746f2061207370
656369666963206c6963656e73652061677265656d656e74206772616e74
696e6720796f75206164646974696f6e616c207269676874732c20796f75
7220757365206f66207468697320736f667477617265206973206c696d69
74656420746f20796f757220776f726b73746174696f6e20666f7220796f
7572206f776e207075626c697368696e67207573652e20596f75206d6179
206e6f7420636f7079206f72206469737472696275746520746869732073
6f6674776172652e0d0a0d0a496620796f75206861766520616e79207175
657374696f6e20636f6e6365726e696e6720796f75722072696768747320
796f752073686f756c642072657669657720746865206c6963656e736520
61677265656d656e7420796f752072656365697665642077697468207468
6520736f667477617265206f7220636f6e74616374204d6f6e6f74797065
20666f72206120636f7079206f6620746865206c6963656e736520616772
65656d656e742e0d0a0d0a4d6f6e6f747970652063616e20626520636f6e
7461637465642061743a0d0a0d0a555341202d202838343729203731382d
303430300909554b202d203031313434203031373337203736353935390d
0a687474703a2f2f7777772e6d6f6e6f747970652e636f6d4d6f6e6f7479
706520547970652044726177696e67204f6666696365202d20526f62696e
204e6963686f6c61732c205061747269636961205361756e646572732031
393832687474703a2f2f7777772e6d6f6e6f747970652e636f6d2f68746d
6c2f6d746e616d652f6d735f617269616c2e68746d6c687474703a2f2f77
77772e6d6f6e6f747970652e636f6d2f68746d6c2f6d746e616d652f6d73
5f77656c636f6d652e68746d6c687474703a2f2f7777772e6d6f6e6f7479
70652e636f6d2f68746d6c2f747970652f6c6963656e73652e68746d6c00
4e006f0072006d0061006c006e0079006f00620079010d0065006a006e00
e9006e006f0072006d0061006c005300740061006e006400610072006403
9a03b103bd03bf03bd03b903ba03ac004e006f0072006d00610061006c00
69004e006f0072006d00e1006c006e0065004e006f0072006d0061006c00
65005300740061006e00640061006100720064041e0431044b0447043d04
4b0439004e0061007600610064006e006f0074006801b001a10300006e00
670041007200720075006e00740061000000b1540f4122031700ef031700
ff03170003001f0317002f0317004f0317005f0317008f0317009f031700
06000f0317005f0317006f0317007f031700bf031700f003170006004003
17b2923340b80317b28b3340b80317b36a6c3240b80317b2613340b80317
b35c5d3240b80317b357593240b80317b34d513240b80317b344493240b8
0317b23a3340b80317b331343240b80317b32e423240b80317b3272c3240
b80317b312253280b80317b30a0d32c04116031600d00316000200700316
000102c4000f0101001f00a0031500b0031500020306000f0101001f0040
0312b32426329fbf03040001030203010064001fffc00301b20d1132410a
02ff02ef0012001f02ee02ed0064001fffc002edb30e11329f414a02e200
af02e200bf02e2000302e202e202e102e1007f02e00001001002e0003f02
e0009f02e000bf02e000cf02e000ef02e0000602e002e002df02df02de02
de000f02dd002f02dd003f02dd005f02dd009f02dd00bf02dd00ef02dd00
0702dd02dd001002dc0001000002dc0001001002dc003f02dc000202dc02
dc001002db000102db02db000f02da000102da02daffc002d3b2373932b9
ffc002d3b22b2f32b9ffc002d3b21f2532b9ffc002d3b2171b32b9ffc002
d3b2121632b802d2b2f9291fb802e3b3202b1fa0413002d400b002d40002
000002d4001002d4002002d4005002d4006002d4007002d40006006002d6
007002d6008002d6009002d600a002d600b002d60006000002d6001002d6
002002ca002002cc002002d6003002d6004002d6005002d6000802d0b220
2b1fb802cfb226421f411602ce02c70017001f02cd02c80017001f02cc02
c60017001f02cb02c50017001f02c902c5001e001f02ca02c6b21e1f0041
0b02c6000002c7001002c6001002c7002f02c5000502c1b324121fff4111
02bf0001001f02bf002f02bf003f02bf004f02bf005f02bf008f02bf0006
02bf0222b2641f12410b02bb00ca0800001f02b200e90800001f02a600a2
0800406a1f4026434932402043493240263a3d3240203a3d329f209f2602
4026969932402096993240268e923240208e92324026848c324020848c32
40267a813240207a813240266c763240206c76324026646a324020646a32
40265a5f3240205a5f3240264f543240204f5432b8029eb724271f374f6b
0120410f0277003002770040027700500277000402770277027700f90400
001f029bb22a2a1fb8029a402b292a1f80ba0180bc0180520180a2018065
01807e01808101803c01805e01802b01801c01801e0180400180bb013800
0100800140b40180400180bb013800010080013940180180ca0180ad0180
73018026018025018024018020013740b80221b2493340b80221b2453340
b80221b341423240b80221b33d3e320f410f0221003f0221007f02210003
00bf022100cf022100ff0221000300400221b320223240b80221b3191e32
40b80222b32a3f3240b80221b32e3a326f414802c3007f02c3008f02c300
df02c30004002f02c3006002c300cf02c30003000f02c3003f02c3005f02
c300c002c300ef02c300ff02c3000600df02220001008f02220001000f02
22002f0222003f0222005f0222007f022200ef0222000600bf022100ef02
210002006f0221007f022100af02210003002f0221003f0221004f022100
0302c302c30222022202210221401d101c102b1048038f1c010f1e014f1e
ff1e023700161600000012110811b8010db6f70df8f70d00094109028e02
8f001d001f0290028f001d001f028fb2f91d1fb80198b226bb1f41150197
001e0401001f013900260125001f013800730401001f0135001c0801001f
0134001c02ab001f0132b21c561fb8010fb2262c1fba010e001e0401b61f
f91ce41fe91cb80201b61fe81cbb1fd720b80401b21fd51cb802abb61fd4
1c891fc92fb80801b21fbc26b80101b21fba20b80201b61fb91c381fadca
b80401b21f8126b8019ab21f7e26b8019ab61f7d1c471f6b1cb80401b21f
6526b8019ab21f5e73b80401400f1f52265a1f481c891f441c621f4073b8
0801b61f3f1c5e1f3c26b8019ab21f351cb80401b61f301cbb1f2b1cb804
01b61f2a1c561f291cb80101b21f231eb80401b21f5537b80168402c0796
0758074f07360732072c0721071f071d071b071408120810080e080c080a
080808060804080208000814b8ffe0402b00000100140610000001000604
000001000410000001001002000001000200000001000002010802004a00
b013034b024b5342014bb0c063004b6220b0f65323b8010a515ab0052342
01b0124b004b5442b0382b4bb807ff52b0372b4bb007505b58b101018e59
b0382bb00288b801005458b801ffb101018e851bb0124358b90001011185
8d1bb900010128858d5959001816763f183f123e113946443e113946443e
113946443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b
2b2b182b2b2b2b2b2b2b2b2b2b2b182b1db0964b5358b0aa1d59b0324b53
58b0ff1d594bb09353205c58b901f201f04544b901f101f045445958b903
3e01f2455258b901f2033e4459594bb8015653205c58b9002001f14544b9
002601f145445958b9081e0020455258b90020081e4459594bb8019a5320
5c58b9002501f24544b9002401f245445958b909090025455258b9002509
094459594bb8040153205c58b173244544b1242445445958b91720007345
5258b9007317204459594bb8040153205c58b1ca254544b1252545445958
b9168000ca455258b900ca16804459594bb03e53205c58b11c1c4544b11e
1c45445958b9011a001c455258b9001c011a4459594bb05653205c58b11c
1c4544b12f1c45445958b90189001c455258b9001c01894459594bb80301
53205c58b11c1c4544b11c1c45445958b90de0001c455258b9001c0de044
59592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b01b33b59635c45652345602345
6560234560b08b766818b080622020b163594565234520b0032660626368
20b003266165b059236544b063234420b13b5c4565234520b00326606263
6820b003266165b05c236544b03b2344b1005c455458b15c406544b23b40
3b4523614459b347503437456523456023456560234560b089766818b080
622020b134504565234520b003266062636820b003266165b050236544b0
34234420b147374565234520b003266062636820b003266165b037236544
b0472344b10037455458b137406544b24740474523614459004b5342014b
5058b108004259435c58b108004259b3020b0a124358601b215942161070
3eb0124358b93b21187e1bba040001a8000b2b59b00c2342b00d2342b012
4358b92d412d411bba04000400000b2b59b00e2342b00f2342b0124358b9
187e3b211bba01a80400000b2b59b0102342b0112342002b747573750018
4569444569444569447373737374757374752b2b2b2b74752b2b2b2b2b73
7373737373737373737373737373737373737373737373732b2b2b45b040
6144737400004bb02a534bb03f515a58b1070745b040604459004bb03a53
4bb03f515a58b10b0b45b8ffc0604459004bb02e534bb03a515a58b10303
45b040604459004bb02e534bb03c515a58b1090945b8ffc06044592b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b752b2b2b2b2b2b2b435c58b9008002
bbb301401e017400735903b01e4b5402b0124b545ab012435c5a58ba009f
02220001007359002b7473012b01732b2b2b2b2b2b2b2b737373732b002b
2b2b2b2b2b00456944734569447345694473747545694473456944456944
4569447374456944456944732b2b2b2b2b732b002b732b74752b2b2b2b2b
2b2b2b2b2b2b2b2b2b7374752b0000>
[4455 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 42 17 <000100ba0000018700cd000300254018023c000a023c5f006f007f00af00
04a0000100a004a198182b10f65d5ded003fed313033353315bacdcdcd00
>PBAAAA+ArialMT AddT42Char 
1 102 19 <00020055ffe7041105c00010001d0155b10202435458400a1a1e0405141e
0d0d1709b8ffe8b40f0f025509b8ffe840190d0d02550911000c0f0f0255
00160c0c0255000c0d0d0255002f2b2b2bcd2f2b2bcd003fed3fed31301b
b10602435458400a1a1e0405141e0d0d1709b8fff4b40f0f065509b8ffe6
b40d0d065509b8ffee40190b0b0655091100100d0d065500100c0c065500
100b0b0655002f2b2b2bcd2f2b2b2bcd003fed3fed31301bb4062019101c
b8fff0b202200bbeffe00016ffe00012ffe0000fffe0406204068702880b
880fc90e0509070b180245134c154a19431b54135c155c19521b6b076b0b
63136c156b19601b79027706760b7a0f870698079610c918da02d606d60b
db0f1a1a1e0405141e0d0d17730940212334300901000910090209901f11
7300b8ffc0400e212334200040000200901ec78b182b10f65d2bed10f65d
712bed003fed3fed3130015d71005d003838383838013838385959131012
363332161612151002062322272613101633323611102623220706556bd3
a076b274426ad3a1d47991b9a97c7ca9a97e7c4a5d02d30104013dac5fb3
feffdafefefec3ad98b7019dfe97eff00168016aee698600>PBAAAA+ArialMT AddT42Char 
1 546 20 <000100df000002fb05c0000a00af402003400d11346b047f028f02990804
ac04010900060502030905010c0201ca0a00b8ffc0400a21233430000120
000100b8ffe0b41010025500b8ffea40110f0f0255001c0c0c0255000e0d
0d025500b8fff040190f0f065500100c0c065500100d0d0655001a0c0540
0d0f3405b8ffc0400e212334300501200540050205190bba013c01850018
2b4e10e45d712b2b10f62b2b2b2b2b2b2b5d712b3c4dfd3c003f3f173901
11393130015d005d2b212311060607353636373302fbb441d35497e22f74
047b3e7c1fae47ca5f00>PBAAAA+ArialMT AddT42Char 
1 1794 23 <0002001a0000041005ba000a000d0126403612580c680c9a0ca90cc90c05
4c034c0d94040312010208000c060307050a0b0307000c0c0d0dca030414
030304030d00020c0d040703bb02bb0008000201a0400a000404000c0c00
ca0a04b80266b705050a401d1f340ab8ffe0b4101002550ab8ffe6b40d0d
02550ab8ffeeb40d0d06550ab80137400d07402223340780213507900f02
b8ffc0400b0d14340002100220020302b8ffe0b40d0d025502b8ffe4b60d
0d065502b50eb8018cb18b182b10ec2b2b5d2b10f62b2bf42b2b2b2b3c10
e610fd3c003f3f10f43cf63c1139390111123939872e2b047d10c40f0f0f
313001435c58b9000dffdeb212390db8ffd4400b333903222d3903041d1d
3c2b2b2b2b595d005d435c5840140c400b390c8050390c4026390c221c39
0c402d392b2b2b2b2b5921112135013311331523110311010296fd84029d
93c6c6b4fe35015fa503b6fc4aa5fea102040295fd6b>PBAAAA+ArialMT AddT42Char 
1 3230 27 <00030053ffe7041905c00017002300300200b10202435458b40c001b1e2e
b8ffc04017131302552e2e12211e0605281e120d1e090c0c0c025509b8ff
f4b60d0d0255092b0fb8fff0b40f0f02550fb8ffe8b40b0b02550fb8ffe8
b60d0d02550f1803b8fff0b41010025503b8fff0b40f0f025503b8fff440
190d0d02550324150c0b0b0255150c0c0c0255150c0d0d0255152f2b2b2b
cd2f2b2b2bcd2f2b2b2bcd2f2b2bcd003fed3fed12392f2bed393931301b
b10602435458b71e090c0c0c065509b8fff4b60d0d0655092b0fb8ffe4b4
0f0f06550fb8ffe4b60d0d06550f1803b8fff0b40f0f065503b8fffc4022
0d0d06550324150c0c0c0655150c0d0d0655150c001b1e2e2e12211e0605
281e120d003fed3fed12392fed3939012f2b2bcd2f2b2bcd2f2b2bcd2f2b
2bcd31301b4037351601291649164926e60ce930050930017d007d017c04
7408710b720c750d7a178b008a018c048608810b840c860d8d17cc11c613
1222b8ffe0b21c201ab8ffe0b220202fb8ffe0b22d2026b8ffe0401e2920
0c001e18000c1b1e2ea02e012e12211e0605281e120d1e73bf090109b802
6740102b730f40202334300f01000f100f020fb80191b6321873b0030103
b80267b2247315b8ffc0400e2123342015401502159031c78b182b10f65d
2bedf45ded10f45d712bedf45ded003fed3fed12395d2fed393901111239
393130013838383838383838015d72710071595901262635343633321615
140607161615140023220035343613141633323635342623220603141616
333236353426232206016a706ce6bfc0ea6b6d878dfef6d9d9fef6916286
6b6885896667883a49905381a8ad827fa7031b29986aa0dadfa06697292c
c488bcff000101c08fc101546884835f638784fcff4d904fa68082aaa800
>PBAAAA+ArialMT AddT42Char 
1 0 0 <00020100000005000500000300070000211121112521112101000400fc20
03c0fc400500fb002004c000>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/g17 17 def
/g19 19 def
/g20 20 def
/g23 23 def
/g27 27 def
end
PBAAAA+ArialMT /Encoding get
dup 46 /g17 put
dup 48 /g19 put
dup 49 /g20 put
dup 52 /g23 put
dup 56 /g27 put
pop
end
%ADOEndSubsetFont
/JGUUWX+ArialMT /PBAAAA+ArialMT findfont ct_VMDictPut
/JGUUWX+ArialMT*1 
[46{/.notdef}rp /g17 /.notdef /g19 /g20 2{/.notdef}rp /g23 3{/.notdef}rp 
/g27 199{/.notdef}rp]
JGUUWX+ArialMT nf
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
83.4605 157.801 mo
(148.0)
[1.2564 1.25641 1.2564 .628204 0 ]xsh
116.33 158.681 mo
116.33 160.691 114.71 162.311 112.71 162.311 cv
110.71 162.311 109.08 160.691 109.08 158.681 cv
109.08 156.681 110.71 155.061 112.71 155.061 cv
114.71 155.061 116.33 156.681 116.33 158.681 cv
cp
0 0 0 .71875 cmyk
@
116.33 158.681 mo
116.33 160.691 114.71 162.311 112.71 162.311 cv
110.71 162.311 109.08 160.691 109.08 158.681 cv
109.08 156.681 110.71 155.061 112.71 155.061 cv
114.71 155.061 116.33 156.681 116.33 158.681 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
1 3890 28 <00020055ffe7041905c0001e002a01aeb10602435458b70b1f1801002511
18b8fff6b40f0f065518b8fff4b40d0d065518b8fff040280c0c06551811
0c0d0d065511100c0c06551118112c2b0b281e0f0e1f0e4f0e030e0e1400
50010101b8ffc0400d1011065501041e1c0d221e1405003fed3fedc42b5d
3212392f5ded3201111239392f2b2b2f2b2b2b10cdd4cd10ddc531301bb1
0202435458b70b1f180100251118b8ffeab40f0f025518b8ffea402a0d0d
025518110c0c0c02551118112c2b0b281e0f0e1f0e4f0e030e0e14005001
0101041e1c0d221e1405003fed3fedc45d3212392f5ded3201111239392f
2b2f2b2b10cdd4cd10ddc531301b40343a1a4c1640235b16572366036c16
6d1a67237a1a7d1e8c1a8b1e9a16a91abc1aea16e620f620133d169e16ad
16033a2964060227baffe00023ffe0401821200620281e4f0e5f0e020e0e
1c221e140501d350000100b80268b4041e1c0d1fba0139000b0138401118
40212334301801001810180218902c01b80138b400b5257311b8ffc0400e
212334201140110211902bc78b182b10f65d2bedf4ed10f65d712beded00
3fedfd5de43fed12392f5ded31300138383838005d71015d595913371616
33323e023534270606232202353400333216121110020623222601342623
220615141633323670ad167c61537d50360136bb6db6fc0107c68fed7b7a
f1a2acda02cba57478b2a97c7da10153107a6e4c7fd8700c18566b0108d8
df01109afee3fef2fee7feb3aebf03349bb6c49c8cafaf00>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/g28 28 def
end
PBAAAA+ArialMT /Encoding get
dup 57 /g28 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/JGUUWX+ArialMT*1 
[46{/.notdef}rp /g17 /.notdef /g19 /g20 2{/.notdef}rp /g23 3{/.notdef}rp 
/g27 /g28 198{/.notdef}rp]
JGUUWX+ArialMT nf
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
109.88 159.411 mo
(149.0)
[1.2564 1.25641 1.2564 .62896 0 ]xsh
131.34 160.271 mo
131.34 162.271 129.72 163.891 127.72 163.891 cv
125.71 163.891 124.09 162.271 124.09 160.271 cv
124.09 158.271 125.71 156.641 127.72 156.641 cv
129.72 156.641 131.34 158.271 131.34 160.271 cv
cp
0 0 0 .71875 cmyk
@
131.34 160.271 mo
131.34 162.271 129.72 163.891 127.72 163.891 cv
125.71 163.891 124.09 162.271 124.09 160.271 cv
124.09 158.271 125.71 156.641 127.72 156.641 cv
129.72 156.641 131.34 158.271 131.34 160.271 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
1 3058 26 <000100610000041605a7000d0070400ec40d01040d010402080409030d00
b802bb4030020104090c0d73030302402123344f025f026f0203021a0f08
7309eb004f015f015f02033f015f016f017f010401190eb80192b18b182b
4e10f45d713c4df4ed4e10f6712b3c4d10ed003f3f3cfd3c391139011112
39313001715d13352115060003060723361212376103b58cfeed4b360fb9
0382f38904faad8c95fe12fefbb8dbad01ea01c79c00>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/g26 26 def
end
PBAAAA+ArialMT /Encoding get
dup 55 /g26 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/JGUUWX+ArialMT*1 
[46{/.notdef}rp /g17 /.notdef /g19 /g20 2{/.notdef}rp /g23 2{/.notdef}rp 
/g26 /g27 /g28 198{/.notdef}rp]
JGUUWX+ArialMT nf
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
124.89 161.001 mo
(197.0)
[1.2564 1.25641 1.2564 .629349 0 ]xsh
147.35 160.561 mo
147.35 162.571 145.73 164.191 143.72 164.191 cv
141.72 164.191 140.1 162.571 140.1 160.561 cv
140.1 158.561 141.72 156.941 143.72 156.941 cv
145.73 156.941 147.35 158.561 147.35 160.561 cv
cp
0 0 0 .71875 cmyk
@
147.35 160.561 mo
147.35 162.571 145.73 164.191 143.72 164.191 cv
141.72 164.191 140.1 162.571 140.1 160.561 cv
140.1 158.561 141.72 156.941 143.72 156.941 cv
145.73 156.941 147.35 158.561 147.35 160.561 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
1 766 21 <0001003c0000040705c0001e01c7b10602435458400911100d1813130655
0db8fff4b4111106550db8ffee4009101006550d1e14051eb8ffe8401713
1306551e1e111106551e1c0e1006551e0c0d0d06551eb802bb400c020a17
17201f10110202201f1112392fd4cd1112392fcd002fed2b2b2b2b3fed2b
2b2bc43231301bb10202435458400911100d0c121202550db8fff440090f
1102550d1e14051eb8ffe0400b121302551e140f1102551eb802bbb2020a
17b8ffe8b40b0b025517b8ffec400e0d0d02551717201f10110202201f11
12392fd4cd1112392f2b2bcd002fed2b2b3fed2b2bc43231301b40363b05
3b06bb05bf06bb07c708c91c07490c590c540e6b0c640e7a127a138912bc
12e51ae51bf01a0cbf0bb713021b101c101d101e1006befff00007ffe000
08fff00009fff0401a1e0a10080606ca1c1a141c1c1a081c1a030102081a
1c030d1e10b802a4b34f110111b80118b50d1e1405001eb802bb400f0102
0c0a7317d30000014021233401bb0281002000100138400c11b53f025f02
6f027f020402ba0224001f018fb18b182b10f65df4ed10f62b3c10f4ed00
3f3cfd3c3fedfd5de4111217390111121739870e2e2b0e7d10c401111239
313000383838380138383838005d015d7259592515212637363637363635
34262322060727363633321615140606070606070407fc37021725a39aef
a8997b829c01b913f8d1d3f648a7c2a25c1eadad413c63c07ec4e5666b93
9c8a13cfd9eaad58aabca4886131>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/g21 21 def
end
PBAAAA+ArialMT /Encoding get
dup 50 /g21 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/JGUUWX+ArialMT*1 
[46{/.notdef}rp /g17 /.notdef /g19 /g20 /g21 /.notdef /g23 
2{/.notdef}rp /g26 /g27 /g28 198{/.notdef}rp]
JGUUWX+ArialMT nf
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
141.52 161.291 mo
(24.0)
[1.25641 1.25639 .629074 0 ]xsh
106.81 150.381 mo
106.81 152.381 105.18 154.001 103.18 154.001 cv
101.18 154.001 99.5605 152.381 99.5605 150.381 cv
99.5605 148.381 101.18 146.751 103.18 146.751 cv
105.18 146.751 106.81 148.381 106.81 150.381 cv
cp
0 0 0 .71875 cmyk
@
106.81 150.381 mo
106.81 152.381 105.18 154.001 103.18 154.001 cv
101.18 154.001 99.5605 152.381 99.5605 150.381 cv
99.5605 148.381 101.18 146.751 103.18 146.751 cv
105.18 146.751 106.81 148.381 106.81 150.381 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
1 1320 22 <00010056ffe6041605c0002b0159b10202435458400b1918400d0d025518
1c0001b8ffc0402b0c0d02550129230a0d0f0c0f1e0a0a29151e1c041e29
1c05290d230d0c181901001220100c0c0255200726b8ffe8b40c0d025526
2f2bcd2f2bcd2fcd2fcd2f0012393f3f10ed10ed12392fedc610c6123910
c42b3210c42b3231301b4028050d160d450d860d0445115711761b035216
6c106a146416750d7914860d8a14891ba50d0a052003b8ffe0400b0b0c0d
0e040701230d0c01b802a4b340000100bb01180029000d0135b40c0c1504
18ba02a4001902684027151e1c05041e290d12735f206f200220180d0d06
55208007732640212334302601002610260226b8fff4b70d0d065526902d
18b80138b219d301ba01380000ffc0400b212334200040000200902cb801
92b18b182b10f65d2bedf4ed10f62b5d712bedf42b5ded003fed3fedfde4
1112392fed10fd5de411123901111217393130013838015d005d01715913
371616333236353426232207371633323635342623220607273636333216
1615140607161615140023222656b41f956b7fafa27d334c14120b73b886
6a698c14b421eaae78ca6b66648290fee8d6c1ff0183189987b0827ca114
9e02787d6382848420b5c767b2645f9c2e1ebd8ec0fef5e6>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/g22 22 def
end
PBAAAA+ArialMT /Encoding get
dup 51 /g22 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/JGUUWX+ArialMT*1 
[46{/.notdef}rp /g17 /.notdef /g19 /g20 /g21 /g22 /g23 
2{/.notdef}rp /g26 /g27 /g28 198{/.notdef}rp]
JGUUWX+ArialMT nf
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
100.98 151.111 mo
(73.0)
[1.2564 1.25641 .628197 0 ]xsh
140.33 171.811 mo
140.33 173.811 138.71 175.441 136.71 175.441 cv
134.71 175.441 133.08 173.811 133.08 171.811 cv
133.08 169.811 134.71 168.191 136.71 168.191 cv
138.71 168.191 140.33 169.811 140.33 171.811 cv
cp
0 0 0 .71875 cmyk
@
140.33 171.811 mo
140.33 173.811 138.71 175.441 136.71 175.441 cv
134.71 175.441 133.08 173.811 133.08 171.811 cv
133.08 169.811 134.71 168.191 136.71 168.191 cv
138.71 168.191 140.33 169.811 140.33 171.811 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
133.88 172.541 mo
(134.0)
[1.25641 1.25639 1.25641 .628952 0 ]xsh
133.27 150.181 mo
133.27 152.181 131.65 153.811 129.65 153.811 cv
127.64 153.811 126.02 152.181 126.02 150.181 cv
126.02 148.181 127.64 146.561 129.65 146.561 cv
131.65 146.561 133.27 148.181 133.27 150.181 cv
cp
0 0 0 .71875 cmyk
@
133.27 150.181 mo
133.27 152.181 131.65 153.811 129.65 153.811 cv
127.64 153.811 126.02 152.181 126.02 150.181 cv
126.02 148.181 127.64 146.561 129.65 146.561 cv
131.65 146.561 133.27 148.181 133.27 150.181 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
1 2588 25 <0002004dffe7041505c0001d002a014fb10202435458401f0f011f015f01
03011b281e400d010d0d14051e1b05221e140d0a1e01002510b8fff44019
0d0d0255101e17100f0f025517100c0c0255170c0d0d0255172f2b2b2bcd
2f2bcdd4cd10c5003fed3fed12392f5ded10c45d31301b402d6b19014407
4015441944205a1254206b03640764086a1264207408751c8508861cd608
d4161107200d0d065527b8ffe0b40d0d065523b8ffe0400b0d0d06552120
0d0d065507b8ffe0b42720232021b8ffe04011281e400d500d020d0d141b
01d35f000100b802684009051e1b05221e140d01b80138401200b5257310
40212334301001001010100210b8fff0b70c0c065510902c0aba0138001e
013940163f175f176f177f170417160c0c065517160d0d065517b80224b3
2bc78b182b10f62b2b5deded10f62b5d712bedf4ed003fed3fedfd5de411
12392f5ded313001383838382b2b2b2b015d005d59010726272623220706
060736363332121514060623220011103736333216011416163332363534
2623220603fbb3182c496b564155620241bc67b4fd77d084e1fee49d89e8
adddfd374f8e4e72a4a27b7aaa04530e6a304d303eeedc6360fef7d28aed
7e014b017c01a9c1a8c2fcdd5daa59b89e98afaf>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/g25 25 def
end
PBAAAA+ArialMT /Encoding get
dup 54 /g25 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/JGUUWX+ArialMT*1 
[46{/.notdef}rp /g17 /.notdef /g19 /g20 /g21 /g22 /g23 
/.notdef /g25 /g26 /g27 /g28 198{/.notdef}rp]
JGUUWX+ArialMT nf
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
127.45 150.911 mo
(46.0)
[1.25641 1.25639 .629074 0 ]xsh
33.9703 171.861 mo
33.9703 173.861 32.3406 175.481 30.3406 175.481 cv
28.3406 175.481 26.7203 173.861 26.7203 171.861 cv
26.7203 169.861 28.3406 168.231 30.3406 168.231 cv
32.3406 168.231 33.9703 169.861 33.9703 171.861 cv
cp
0 0 0 .71875 cmyk
@
33.9703 171.861 mo
33.9703 173.861 32.3406 175.481 30.3406 175.481 cv
28.3406 175.481 26.7203 173.861 26.7203 171.861 cv
26.7203 169.861 28.3406 168.231 30.3406 168.231 cv
32.3406 168.231 33.9703 169.861 33.9703 171.861 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
28.1406 172.591 mo
(61.0)
[1.2564 1.2564 .628202 0 ]xsh
80.4605 141.361 mo
80.4605 143.371 78.8305 144.991 76.8305 144.991 cv
74.8305 144.991 73.2105 143.371 73.2105 141.361 cv
73.2105 139.361 74.8305 137.741 76.8305 137.741 cv
78.8305 137.741 80.4605 139.361 80.4605 141.361 cv
cp
0 0 0 .71875 cmyk
@
80.4605 141.361 mo
80.4605 143.371 78.8305 144.991 76.8305 144.991 cv
74.8305 144.991 73.2105 143.371 73.2105 141.361 cv
73.2105 139.361 74.8305 137.741 76.8305 137.741 cv
78.8305 137.741 80.4605 139.361 80.4605 141.361 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
74.0004 142.091 mo
(170.0)
[1.2564 1.25641 1.2564 .628204 0 ]xsh
102.19 132.151 mo
102.19 134.161 100.561 135.781 98.5605 135.781 cv
96.5605 135.781 94.9406 134.161 94.9406 132.151 cv
94.9406 130.151 96.5605 128.531 98.5605 128.531 cv
100.561 128.531 102.19 130.151 102.19 132.151 cv
cp
0 0 0 .71875 cmyk
@
102.19 132.151 mo
102.19 134.161 100.561 135.781 98.5605 135.781 cv
96.5605 135.781 94.9406 134.161 94.9406 132.151 cv
94.9406 130.151 96.5605 128.531 98.5605 128.531 cv
100.561 128.531 102.19 130.151 102.19 132.151 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
95.7305 132.881 mo
(112.0)
[1.2564 1.25641 1.2564 .628204 0 ]xsh
65.5203 105.121 mo
65.5203 107.121 63.9004 108.751 61.9004 108.751 cv
59.9004 108.751 58.2703 107.121 58.2703 105.121 cv
58.2703 103.121 59.9004 101.501 61.9004 101.501 cv
63.9004 101.501 65.5203 103.121 65.5203 105.121 cv
cp
0 0 0 .71875 cmyk
@
65.5203 105.121 mo
65.5203 107.121 63.9004 108.751 61.9004 108.751 cv
59.9004 108.751 58.2703 107.121 58.2703 105.121 cv
58.2703 103.121 59.9004 101.501 61.9004 101.501 cv
63.9004 101.501 65.5203 103.121 65.5203 105.121 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
59.0703 105.851 mo
(101.0)
[1.2564 1.2564 1.2564 .628201 0 ]xsh
87.8203 117.301 mo
87.8203 119.301 86.2004 120.931 84.1906 120.931 cv
82.1906 120.931 80.5703 119.301 80.5703 117.301 cv
80.5703 115.301 82.1906 113.681 84.1906 113.681 cv
86.2004 113.681 87.8203 115.301 87.8203 117.301 cv
cp
0 0 0 .71875 cmyk
@
87.8203 117.301 mo
87.8203 119.301 86.2004 120.931 84.1906 120.931 cv
82.1906 120.931 80.5703 119.301 80.5703 117.301 cv
80.5703 115.301 82.1906 113.681 84.1906 113.681 cv
86.2004 113.681 87.8203 115.301 87.8203 117.301 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
81.3703 118.031 mo
(186.0)
[1.2564 1.25641 1.2564 .628204 0 ]xsh
95.0004 90.371 mo
95.0004 92.371 93.3805 94.001 91.3805 94.001 cv
89.3805 94.001 87.7504 92.371 87.7504 90.371 cv
87.7504 88.371 89.3805 86.751 91.3805 86.751 cv
93.3805 86.751 95.0004 88.371 95.0004 90.371 cv
cp
0 0 0 .71875 cmyk
@
95.0004 90.371 mo
95.0004 92.371 93.3805 94.001 91.3805 94.001 cv
89.3805 94.001 87.7504 92.371 87.7504 90.371 cv
87.7504 88.371 89.3805 86.751 91.3805 86.751 cv
93.3805 86.751 95.0004 88.371 95.0004 90.371 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
1 2146 24 <00010055ffe7042105a6001e0156b10202435458b90001ffc0400d0d0d02
55011c0e0a1e15151c12b802bb400b0f04041e1c0d0e01000718b8ffeab4
0f0f025518b8ffeab40d0d0255182f2b2bcd2fcd2f003fed3fed12392ffd
c410c42b31301b4029120c0d0d06550f0c0d0d06554b1a791d8a1d9613a7
13c30cd60cdb1b080913180e2a1a03093005300bbaffe00003ffe0401013
0a15121313ca0e0f140e13140e0f0db802a440130e0a1e15400ea00e020e
0e0f40150115151c12b802bbb70f0401d340000100b801184020041e1c0d
115f106f107f108f1004108007731840212334301801001810180218b8ff
f4b70d0d065518902012bc0135000f0195000d0138b20eb501ba01380000
ffc0400b212334200040000200901fb80192b18b182b10f65d2bedf4edf4
ed10f62b5d712bedf45d3c003fedfd5de43fed12392f5d11392f5d10ed10
e487082e2b057d10c4001112393130013838383801715d2b2b5913371616
33323635342623220607271321152103363332001514070623222655bd15
996c82b4ad8c578c28a98e02d9fdb74f8491c00108748df4c8fd0180108a
8bc4a29ab24f3f1602f1acfe765cfef6d1c791b2e000>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/g24 24 def
end
PBAAAA+ArialMT /Encoding get
dup 53 /g24 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/JGUUWX+ArialMT*1 
[46{/.notdef}rp /g17 /.notdef /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 /g27 /g28 198{/.notdef}rp]
JGUUWX+ArialMT nf
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
88.5504 91.101 mo
(105.0)
[1.2564 1.25641 1.2564 .628204 0 ]xsh
180.67 108.821 mo
180.67 110.821 179.05 112.441 177.05 112.441 cv
175.05 112.441 173.42 110.821 173.42 108.821 cv
173.42 106.821 175.05 105.191 177.05 105.191 cv
179.05 105.191 180.67 106.821 180.67 108.821 cv
cp
0 0 0 .71875 cmyk
@
180.67 108.821 mo
180.67 110.821 179.05 112.441 177.05 112.441 cv
175.05 112.441 173.42 110.821 173.42 108.821 cv
173.42 106.821 175.05 105.191 177.05 105.191 cv
179.05 105.191 180.67 106.821 180.67 108.821 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
174.22 109.551 mo
(140.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
114.39 109.871 mo
114.39 111.871 112.77 113.501 110.77 113.501 cv
108.76 113.501 107.14 111.871 107.14 109.871 cv
107.14 107.871 108.76 106.251 110.77 106.251 cv
112.77 106.251 114.39 107.871 114.39 109.871 cv
cp
0 0 0 .71875 cmyk
@
114.39 109.871 mo
114.39 111.871 112.77 113.501 110.77 113.501 cv
108.76 113.501 107.14 111.871 107.14 109.871 cv
107.14 107.871 108.76 106.251 110.77 106.251 cv
112.77 106.251 114.39 107.871 114.39 109.871 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
108.57 110.601 mo
(80.0)
[1.2564 1.25641 .629066 0 ]xsh
172.58 94.391 mo
172.58 96.391 170.96 98.011 168.95 98.011 cv
166.95 98.011 165.33 96.391 165.33 94.391 cv
165.33 92.381 166.95 90.761 168.95 90.761 cv
170.96 90.761 172.58 92.381 172.58 94.391 cv
cp
0 0 0 .71875 cmyk
@
172.58 94.391 mo
172.58 96.391 170.96 98.011 168.95 98.011 cv
166.95 98.011 165.33 96.391 165.33 94.391 cv
165.33 92.381 166.95 90.761 168.95 90.761 cv
170.96 90.761 172.58 92.381 172.58 94.391 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
166.13 95.121 mo
(146.0)
[1.25641 1.25639 1.25641 .628952 0 ]xsh
183.15 84.181 mo
183.15 86.181 181.53 87.811 179.52 87.811 cv
177.52 87.811 175.9 86.181 175.9 84.181 cv
175.9 82.181 177.52 80.561 179.52 80.561 cv
181.53 80.561 183.15 82.181 183.15 84.181 cv
cp
0 0 0 .71875 cmyk
@
183.15 84.181 mo
183.15 86.181 181.53 87.811 179.52 87.811 cv
177.52 87.811 175.9 86.181 175.9 84.181 cv
175.9 82.181 177.52 80.561 179.52 80.561 cv
181.53 80.561 183.15 82.181 183.15 84.181 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
176.7 84.911 mo
(124.0)
[1.25641 1.25639 1.25641 .628967 0 ]xsh
157.39 95.301 mo
157.39 97.301 155.76 98.921 153.76 98.921 cv
151.76 98.921 150.14 97.301 150.14 95.301 cv
150.14 93.301 151.76 91.671 153.76 91.671 cv
155.76 91.671 157.39 93.301 157.39 95.301 cv
cp
0 0 0 .71875 cmyk
@
157.39 95.301 mo
157.39 97.301 155.76 98.921 153.76 98.921 cv
151.76 98.921 150.14 97.301 150.14 95.301 cv
150.14 93.301 151.76 91.671 153.76 91.671 cv
155.76 91.671 157.39 93.301 157.39 95.301 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
151.56 96.031 mo
(91.0)
[1.25641 1.25639 .628204 0 ]xsh
166.58 70.391 mo
166.58 72.391 164.96 74.021 162.96 74.021 cv
160.96 74.021 159.33 72.391 159.33 70.391 cv
159.33 68.391 160.96 66.771 162.96 66.771 cv
164.96 66.771 166.58 68.391 166.58 70.391 cv
cp
0 0 0 .71875 cmyk
@
166.58 70.391 mo
166.58 72.391 164.96 74.021 162.96 74.021 cv
160.96 74.021 159.33 72.391 159.33 70.391 cv
159.33 68.391 160.96 66.771 162.96 66.771 cv
164.96 66.771 166.58 68.391 166.58 70.391 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
160.76 71.121 mo
(40.0)
[1.25641 1.25639 .628204 0 ]xsh
181.8 56.291 mo
181.8 58.291 180.18 59.911 178.18 59.911 cv
176.17 59.911 174.55 58.291 174.55 56.291 cv
174.55 54.291 176.17 52.661 178.18 52.661 cv
180.18 52.661 181.8 54.291 181.8 56.291 cv
cp
0 0 0 .71875 cmyk
@
181.8 56.291 mo
181.8 58.291 180.18 59.911 178.18 59.911 cv
176.17 59.911 174.55 58.291 174.55 56.291 cv
174.55 54.291 176.17 52.661 178.18 52.661 cv
180.18 52.661 181.8 54.291 181.8 56.291 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
176.61 57.0209 mo
(7.0)
[1.25641 .628738 0 ]xsh
153.99 66.511 mo
153.99 68.511 152.37 70.141 150.37 70.141 cv
148.36 70.141 146.74 68.511 146.74 66.511 cv
146.74 64.511 148.36 62.891 150.37 62.891 cv
152.37 62.891 153.99 64.511 153.99 66.511 cv
cp
0 0 0 .71875 cmyk
@
153.99 66.511 mo
153.99 68.511 152.37 70.141 150.37 70.141 cv
148.36 70.141 146.74 68.511 146.74 66.511 cv
146.74 64.511 148.36 62.891 150.37 62.891 cv
152.37 62.891 153.99 64.511 153.99 66.511 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
148.17 67.241 mo
(13.0)
[1.25641 1.25639 .629074 0 ]xsh
154.11 79.081 mo
154.11 81.091 152.49 82.711 150.49 82.711 cv
148.49 82.711 146.86 81.091 146.86 79.081 cv
146.86 77.081 148.49 75.461 150.49 75.461 cv
152.49 75.461 154.11 77.081 154.11 79.081 cv
cp
0 0 0 .71875 cmyk
@
154.11 79.081 mo
154.11 81.091 152.49 82.711 150.49 82.711 cv
148.49 82.711 146.86 81.091 146.86 79.081 cv
146.86 77.081 148.49 75.461 150.49 75.461 cv
152.49 75.461 154.11 77.081 154.11 79.081 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
148.29 79.811 mo
(56.0)
[1.25641 1.25639 .629074 0 ]xsh
201.9 92.501 mo
201.9 94.501 200.28 96.131 198.27 96.131 cv
196.27 96.131 194.65 94.501 194.65 92.501 cv
194.65 90.501 196.27 88.881 198.27 88.881 cv
200.28 88.881 201.9 90.501 201.9 92.501 cv
cp
0 0 0 .71875 cmyk
@
201.9 92.501 mo
201.9 94.501 200.28 96.131 198.27 96.131 cv
196.27 96.131 194.65 94.501 194.65 92.501 cv
194.65 90.501 196.27 88.881 198.27 88.881 cv
200.28 88.881 201.9 90.501 201.9 92.501 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
195.45 93.23 mo
(125.0)
[1.25641 1.25639 1.25641 .628967 0 ]xsh
194.77 132.221 mo
194.77 134.221 193.14 135.851 191.14 135.851 cv
189.14 135.851 187.52 134.221 187.52 132.221 cv
187.52 130.221 189.14 128.601 191.14 128.601 cv
193.14 128.601 194.77 130.221 194.77 132.221 cv
cp
0 0 0 .71875 cmyk
@
194.77 132.221 mo
194.77 134.221 193.14 135.851 191.14 135.851 cv
189.14 135.851 187.52 134.221 187.52 132.221 cv
187.52 130.221 189.14 128.601 191.14 128.601 cv
193.14 128.601 194.77 130.221 194.77 132.221 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
188.94 132.951 mo
(37.0)
[1.25641 1.25639 .629074 0 ]xsh
185.97 161.421 mo
185.97 163.421 184.35 165.051 182.34 165.051 cv
180.34 165.051 178.72 163.421 178.72 161.421 cv
178.72 159.421 180.34 157.801 182.34 157.801 cv
184.35 157.801 185.97 159.421 185.97 161.421 cv
cp
0 0 0 .71875 cmyk
@
185.97 161.421 mo
185.97 163.421 184.35 165.051 182.34 165.051 cv
180.34 165.051 178.72 163.421 178.72 161.421 cv
178.72 159.421 180.34 157.801 182.34 157.801 cv
184.35 157.801 185.97 159.421 185.97 161.421 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
180.15 162.151 mo
(59.0)
[1.25641 1.25639 .629074 0 ]xsh
198.98 156.741 mo
198.98 158.751 197.36 160.371 195.36 160.371 cv
193.36 160.371 191.73 158.751 191.73 156.741 cv
191.73 154.741 193.36 153.121 195.36 153.121 cv
197.36 153.121 198.98 154.741 198.98 156.741 cv
cp
0 0 0 .71875 cmyk
@
198.98 156.741 mo
198.98 158.751 197.36 160.371 195.36 160.371 cv
193.36 160.371 191.73 158.751 191.73 156.741 cv
191.73 154.741 193.36 153.121 195.36 153.121 cv
197.36 153.121 198.98 154.741 198.98 156.741 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
192.53 157.471 mo
(164.0)
[1.25641 1.25639 1.25641 .628952 0 ]xsh
149.1 146.941 mo
149.1 148.941 147.47 150.561 145.47 150.561 cv
143.47 150.561 141.85 148.941 141.85 146.941 cv
141.85 144.941 143.47 143.311 145.47 143.311 cv
147.47 143.311 149.1 144.941 149.1 146.941 cv
cp
0 0 0 .71875 cmyk
@
149.1 146.941 mo
149.1 148.941 147.47 150.561 145.47 150.561 cv
143.47 150.561 141.85 148.941 141.85 146.941 cv
141.85 144.941 143.47 143.311 145.47 143.311 cv
147.47 143.311 149.1 144.941 149.1 146.941 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
143.27 147.671 mo
(38.0)
[1.25641 1.25639 .629074 0 ]xsh
187.13 150.641 mo
187.13 152.641 185.5 154.271 183.5 154.271 cv
181.5 154.271 179.88 152.641 179.88 150.641 cv
179.88 148.641 181.5 147.021 183.5 147.021 cv
185.5 147.021 187.13 148.641 187.13 150.641 cv
cp
0 0 0 .71875 cmyk
@
187.13 150.641 mo
187.13 152.641 185.5 154.271 183.5 154.271 cv
181.5 154.271 179.88 152.641 179.88 150.641 cv
179.88 148.641 181.5 147.021 183.5 147.021 cv
185.5 147.021 187.13 148.641 187.13 150.641 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
180.67 151.371 mo
(135.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
167.49 168.761 mo
167.49 170.771 165.87 172.391 163.87 172.391 cv
161.86 172.391 160.24 170.771 160.24 168.761 cv
160.24 166.761 161.86 165.141 163.87 165.141 cv
165.87 165.141 167.49 166.761 167.49 168.761 cv
cp
0 0 0 .71875 cmyk
@
167.49 168.761 mo
167.49 170.771 165.87 172.391 163.87 172.391 cv
161.86 172.391 160.24 170.771 160.24 168.761 cv
160.24 166.761 161.86 165.141 163.87 165.141 cv
165.87 165.141 167.49 166.761 167.49 168.761 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
161.67 169.491 mo
(78.0)
[1.25641 1.25639 .629074 0 ]xsh
160.93 126.731 mo
160.93 128.731 159.3 130.351 157.3 130.351 cv
155.3 130.351 153.68 128.731 153.68 126.731 cv
153.68 124.731 155.3 123.101 157.3 123.101 cv
159.3 123.101 160.93 124.731 160.93 126.731 cv
cp
0 0 0 .71875 cmyk
@
160.93 126.731 mo
160.93 128.731 159.3 130.351 157.3 130.351 cv
155.3 130.351 153.68 128.731 153.68 126.731 cv
153.68 124.731 155.3 123.101 157.3 123.101 cv
159.3 123.101 160.93 124.731 160.93 126.731 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
155.1 127.461 mo
(31.0)
[1.25641 1.25639 .629074 0 ]xsh
201.62 170.191 mo
201.62 172.191 199.99 173.811 197.99 173.811 cv
195.99 173.811 194.37 172.191 194.37 170.191 cv
194.37 168.181 195.99 166.561 197.99 166.561 cv
199.99 166.561 201.62 168.181 201.62 170.191 cv
cp
0 0 0 .71875 cmyk
@
201.62 170.191 mo
201.62 172.191 199.99 173.811 197.99 173.811 cv
195.99 173.811 194.37 172.191 194.37 170.191 cv
194.37 168.181 195.99 166.561 197.99 166.561 cv
199.99 166.561 201.62 168.181 201.62 170.191 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
195.17 170.911 mo
(174.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
191.42 112.611 mo
191.42 114.611 189.79 116.231 187.79 116.231 cv
185.79 116.231 184.17 114.611 184.17 112.611 cv
184.17 110.611 185.79 108.981 187.79 108.981 cv
189.79 108.981 191.42 110.611 191.42 112.611 cv
cp
0 0 0 .71875 cmyk
@
191.42 112.611 mo
191.42 114.611 189.79 116.231 187.79 116.231 cv
185.79 116.231 184.17 114.611 184.17 112.611 cv
184.17 110.611 185.79 108.981 187.79 108.981 cv
189.79 108.981 191.42 110.611 191.42 112.611 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
184.96 113.341 mo
(192.0)
[1.25641 1.25639 1.25641 .628967 0 ]xsh
147.52 117.871 mo
147.52 119.871 145.89 121.491 143.89 121.491 cv
141.89 121.491 140.27 119.871 140.27 117.871 cv
140.27 115.861 141.89 114.241 143.89 114.241 cv
145.89 114.241 147.52 115.861 147.52 117.871 cv
cp
0 0 0 .71875 cmyk
@
147.52 117.871 mo
147.52 119.871 145.89 121.491 143.89 121.491 cv
141.89 121.491 140.27 119.871 140.27 117.871 cv
140.27 115.861 141.89 114.241 143.89 114.241 cv
145.89 114.241 147.52 115.861 147.52 117.871 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
141.06 118.591 mo
(114.0)
[1.25641 1.25639 1.25641 .628952 0 ]xsh
131.5 61.601 mo
131.5 63.601 129.87 65.221 127.87 65.221 cv
125.87 65.221 124.25 63.601 124.25 61.601 cv
124.25 59.601 125.87 57.971 127.87 57.971 cv
129.87 57.971 131.5 59.601 131.5 61.601 cv
cp
0 0 0 .71875 cmyk
@
131.5 61.601 mo
131.5 63.601 129.87 65.221 127.87 65.221 cv
125.87 65.221 124.25 63.601 124.25 61.601 cv
124.25 59.601 125.87 57.971 127.87 57.971 cv
129.87 57.971 131.5 59.601 131.5 61.601 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
125.67 62.3309 mo
(65.0)
[1.2564 1.2564 .629074 0 ]xsh
127.6 86.181 mo
127.6 88.181 125.98 89.801 123.98 89.801 cv
121.98 89.801 120.35 88.181 120.35 86.181 cv
120.35 84.181 121.98 82.551 123.98 82.551 cv
125.98 82.551 127.6 84.181 127.6 86.181 cv
cp
0 0 0 .71875 cmyk
@
127.6 86.181 mo
127.6 88.181 125.98 89.801 123.98 89.801 cv
121.98 89.801 120.35 88.181 120.35 86.181 cv
120.35 84.181 121.98 82.551 123.98 82.551 cv
125.98 82.551 127.6 84.181 127.6 86.181 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
121.15 86.911 mo
(167.0)
[1.2564 1.25641 1.2564 .62896 0 ]xsh
130 117.801 mo
130 119.801 128.38 121.421 126.38 121.421 cv
124.38 121.421 122.75 119.801 122.75 117.801 cv
122.75 115.801 124.38 114.171 126.38 114.171 cv
128.38 114.171 130 115.801 130 117.801 cv
cp
0 0 0 .71875 cmyk
@
130 117.801 mo
130 119.801 128.38 121.421 126.38 121.421 cv
124.38 121.421 122.75 119.801 122.75 117.801 cv
122.75 115.801 124.38 114.171 126.38 114.171 cv
128.38 114.171 130 115.801 130 117.801 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
123.55 118.531 mo
(182.0)
[1.2564 1.25641 1.2564 .62896 0 ]xsh
114.53 95.531 mo
114.53 97.531 112.91 99.161 110.9 99.161 cv
108.9 99.161 107.28 97.531 107.28 95.531 cv
107.28 93.531 108.9 91.911 110.9 91.911 cv
112.91 91.911 114.53 93.531 114.53 95.531 cv
cp
0 0 0 .71875 cmyk
@
114.53 95.531 mo
114.53 97.531 112.91 99.161 110.9 99.161 cv
108.9 99.161 107.28 97.531 107.28 95.531 cv
107.28 93.531 108.9 91.911 110.9 91.911 cv
112.91 91.911 114.53 93.531 114.53 95.531 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
108.08 96.2609 mo
(193.0)
[1.2564 1.25641 1.2564 .62896 0 ]xsh
228.17 183.081 mo
228.17 185.081 226.55 186.701 224.55 186.701 cv
222.55 186.701 220.92 185.081 220.92 183.081 cv
220.92 181.071 222.55 179.451 224.55 179.451 cv
226.55 179.451 228.17 181.071 228.17 183.081 cv
cp
0 0 0 .71875 cmyk
@
228.17 183.081 mo
228.17 185.081 226.55 186.701 224.55 186.701 cv
222.55 186.701 220.92 185.081 220.92 183.081 cv
220.92 181.071 222.55 179.451 224.55 179.451 cv
226.55 179.451 228.17 181.071 228.17 183.081 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
221.72 183.801 mo
(118.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
220.64 172.101 mo
220.64 174.101 219.01 175.731 217.01 175.731 cv
215.01 175.731 213.39 174.101 213.39 172.101 cv
213.39 170.101 215.01 168.481 217.01 168.481 cv
219.01 168.481 220.64 170.101 220.64 172.101 cv
cp
0 0 0 .71875 cmyk
@
220.64 172.101 mo
220.64 174.101 219.01 175.731 217.01 175.731 cv
215.01 175.731 213.39 174.101 213.39 172.101 cv
213.39 170.101 215.01 168.481 217.01 168.481 cv
219.01 168.481 220.64 170.101 220.64 172.101 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
214.18 172.831 mo
(178.0)
[1.25641 1.25639 1.25641 .628952 0 ]xsh
216 154.021 mo
216 156.021 214.38 157.641 212.38 157.641 cv
210.38 157.641 208.75 156.021 208.75 154.021 cv
208.75 152.021 210.38 150.391 212.38 150.391 cv
214.38 150.391 216 152.021 216 154.021 cv
cp
0 0 0 .71875 cmyk
@
216 154.021 mo
216 156.021 214.38 157.641 212.38 157.641 cv
210.38 157.641 208.75 156.021 208.75 154.021 cv
208.75 152.021 210.38 150.391 212.38 150.391 cv
214.38 150.391 216 152.021 216 154.021 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
210.18 154.751 mo
(95.0)
[1.25641 1.25639 .628204 0 ]xsh
229.46 202.611 mo
229.46 204.611 227.83 206.231 225.83 206.231 cv
223.83 206.231 222.21 204.611 222.21 202.611 cv
222.21 200.611 223.83 198.981 225.83 198.981 cv
227.83 198.981 229.46 200.611 229.46 202.611 cv
cp
0 0 0 .71875 cmyk
@
229.46 202.611 mo
229.46 204.611 227.83 206.231 225.83 206.231 cv
223.83 206.231 222.21 204.611 222.21 202.611 cv
222.21 200.611 223.83 198.981 225.83 198.981 cv
227.83 198.981 229.46 200.611 229.46 202.611 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
223.63 203.341 mo
(85.0)
[1.25641 1.25639 .628204 0 ]xsh
211.01 167.131 mo
211.01 169.131 209.39 170.761 207.39 170.761 cv
205.39 170.761 203.76 169.131 203.76 167.131 cv
203.76 165.131 205.39 163.511 207.39 163.511 cv
209.39 163.511 211.01 165.131 211.01 167.131 cv
cp
0 0 0 .71875 cmyk
@
211.01 167.131 mo
211.01 169.131 209.39 170.761 207.39 170.761 cv
205.39 170.761 203.76 169.131 203.76 167.131 cv
203.76 165.131 205.39 163.511 207.39 163.511 cv
209.39 163.511 211.01 165.131 211.01 167.131 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
205.19 167.861 mo
(27.0)
[1.25641 1.25639 .629089 0 ]xsh
213.43 189.451 mo
213.43 191.451 211.8 193.071 209.8 193.071 cv
207.8 193.071 206.18 191.451 206.18 189.451 cv
206.18 187.441 207.8 185.821 209.8 185.821 cv
211.8 185.821 213.43 187.441 213.43 189.451 cv
cp
0 0 0 .71875 cmyk
@
213.43 189.451 mo
213.43 191.451 211.8 193.071 209.8 193.071 cv
207.8 193.071 206.18 191.451 206.18 189.451 cv
206.18 187.441 207.8 185.821 209.8 185.821 cv
211.8 185.821 213.43 187.441 213.43 189.451 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
206.98 190.171 mo
(176.0)
[1.25641 1.25639 1.25641 .628967 0 ]xsh
214.65 199.491 mo
214.65 201.491 213.03 203.121 211.02 203.121 cv
209.02 203.121 207.4 201.491 207.4 199.491 cv
207.4 197.491 209.02 195.871 211.02 195.871 cv
213.03 195.871 214.65 197.491 214.65 199.491 cv
cp
0 0 0 .71875 cmyk
@
214.65 199.491 mo
214.65 201.491 213.03 203.121 211.02 203.121 cv
209.02 203.121 207.4 201.491 207.4 199.491 cv
207.4 197.491 209.02 195.871 211.02 195.871 cv
213.03 195.871 214.65 197.491 214.65 199.491 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
208.82 200.221 mo
(23.0)
[1.25641 1.25639 .629089 0 ]xsh
228.47 227.281 mo
228.47 229.281 226.85 230.911 224.84 230.911 cv
222.84 230.911 221.22 229.281 221.22 227.281 cv
221.22 225.281 222.84 223.661 224.84 223.661 cv
226.85 223.661 228.47 225.281 228.47 227.281 cv
cp
0 0 0 .71875 cmyk
@
228.47 227.281 mo
228.47 229.281 226.85 230.911 224.84 230.911 cv
222.84 230.911 221.22 229.281 221.22 227.281 cv
221.22 225.281 222.84 223.661 224.84 223.661 cv
226.85 223.661 228.47 225.281 228.47 227.281 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
223.27 228.011 mo
(5.0)
[1.25641 .628708 0 ]xsh
225.24 163.141 mo
225.24 165.141 223.62 166.771 221.62 166.771 cv
219.62 166.771 217.99 165.141 217.99 163.141 cv
217.99 161.141 219.62 159.521 221.62 159.521 cv
223.62 159.521 225.24 161.141 225.24 163.141 cv
cp
0 0 0 .71875 cmyk
@
225.24 163.141 mo
225.24 165.141 223.62 166.771 221.62 166.771 cv
219.62 166.771 217.99 165.141 217.99 163.141 cv
217.99 161.141 219.62 159.521 221.62 159.521 cv
223.62 159.521 225.24 161.141 225.24 163.141 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
219.42 163.871 mo
(84.0)
[1.25641 1.25639 .629089 0 ]xsh
173.58 154.971 mo
173.58 156.971 171.96 158.601 169.96 158.601 cv
167.96 158.601 166.33 156.971 166.33 154.971 cv
166.33 152.971 167.96 151.351 169.96 151.351 cv
171.96 151.351 173.58 152.971 173.58 154.971 cv
cp
0 0 0 .71875 cmyk
@
173.58 154.971 mo
173.58 156.971 171.96 158.601 169.96 158.601 cv
167.96 158.601 166.33 156.971 166.33 154.971 cv
166.33 152.971 167.96 151.351 169.96 151.351 cv
171.96 151.351 173.58 152.971 173.58 154.971 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
167.76 155.701 mo
(76.0)
[1.25641 1.25639 .628204 0 ]xsh
163.54 156.821 mo
163.54 158.821 161.92 160.451 159.92 160.451 cv
157.91 160.451 156.29 158.821 156.29 156.821 cv
156.29 154.821 157.91 153.201 159.92 153.201 cv
161.92 153.201 163.54 154.821 163.54 156.821 cv
cp
0 0 0 .71875 cmyk
@
163.54 156.821 mo
163.54 158.821 161.92 160.451 159.92 160.451 cv
157.91 160.451 156.29 158.821 156.29 156.821 cv
156.29 154.821 157.91 153.201 159.92 153.201 cv
161.92 153.201 163.54 154.821 163.54 156.821 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
157.09 157.551 mo
(152.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
206.32 136.631 mo
206.32 138.631 204.7 140.261 202.69 140.261 cv
200.69 140.261 199.07 138.631 199.07 136.631 cv
199.07 134.631 200.69 133.011 202.69 133.011 cv
204.7 133.011 206.32 134.631 206.32 136.631 cv
cp
0 0 0 .71875 cmyk
@
206.32 136.631 mo
206.32 138.631 204.7 140.261 202.69 140.261 cv
200.69 140.261 199.07 138.631 199.07 136.631 cv
199.07 134.631 200.69 133.011 202.69 133.011 cv
204.7 133.011 206.32 134.631 206.32 136.631 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
199.87 137.361 mo
(156.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
198.41 145.411 mo
198.41 147.411 196.78 149.041 194.78 149.041 cv
192.78 149.041 191.16 147.411 191.16 145.411 cv
191.16 143.411 192.78 141.791 194.78 141.791 cv
196.78 141.791 198.41 143.411 198.41 145.411 cv
cp
0 0 0 .71875 cmyk
@
198.41 145.411 mo
198.41 147.411 196.78 149.041 194.78 149.041 cv
192.78 149.041 191.16 147.411 191.16 145.411 cv
191.16 143.411 192.78 141.791 194.78 141.791 cv
196.78 141.791 198.41 143.411 198.41 145.411 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
191.95 146.141 mo
(122.0)
[1.25641 1.25639 1.25641 .628967 0 ]xsh
197.75 121.921 mo
197.75 123.921 196.13 125.541 194.13 125.541 cv
192.13 125.541 190.5 123.921 190.5 121.921 cv
190.5 119.911 192.13 118.291 194.13 118.291 cv
196.13 118.291 197.75 119.911 197.75 121.921 cv
cp
0 0 0 .71875 cmyk
@
197.75 121.921 mo
197.75 123.921 196.13 125.541 194.13 125.541 cv
192.13 125.541 190.5 123.921 190.5 121.921 cv
190.5 119.911 192.13 118.291 194.13 118.291 cv
196.13 118.291 197.75 119.911 197.75 121.921 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
191.3 122.651 mo
(102.0)
[1.25641 1.25639 1.25641 .628967 0 ]xsh
178.8 121.501 mo
178.8 123.501 177.17 125.121 175.17 125.121 cv
173.17 125.121 171.55 123.501 171.55 121.501 cv
171.55 119.491 173.17 117.871 175.17 117.871 cv
177.17 117.871 178.8 119.491 178.8 121.501 cv
cp
0 0 0 .71875 cmyk
@
178.8 121.501 mo
178.8 123.501 177.17 125.121 175.17 125.121 cv
173.17 125.121 171.55 123.501 171.55 121.501 cv
171.55 119.491 173.17 117.871 175.17 117.871 cv
177.17 117.871 178.8 119.491 178.8 121.501 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
172.34 122.231 mo
(119.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
166.44 138.151 mo
166.44 140.151 164.82 141.781 162.82 141.781 cv
160.81 141.781 159.19 140.151 159.19 138.151 cv
159.19 136.151 160.81 134.531 162.82 134.531 cv
164.82 134.531 166.44 136.151 166.44 138.151 cv
cp
0 0 0 .71875 cmyk
@
166.44 138.151 mo
166.44 140.151 164.82 141.781 162.82 141.781 cv
160.81 141.781 159.19 140.151 159.19 138.151 cv
159.19 136.151 160.81 134.531 162.82 134.531 cv
164.82 134.531 166.44 136.151 166.44 138.151 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
159.99 138.881 mo
(144.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
193.83 290.381 mo
193.83 292.381 192.21 294.011 190.21 294.011 cv
188.21 294.011 186.58 292.381 186.58 290.381 cv
186.58 288.381 188.21 286.761 190.21 286.761 cv
192.21 286.761 193.83 288.381 193.83 290.381 cv
cp
0 0 0 .71875 cmyk
@
193.83 290.381 mo
193.83 292.381 192.21 294.011 190.21 294.011 cv
188.21 294.011 186.58 292.381 186.58 290.381 cv
186.58 288.381 188.21 286.761 190.21 286.761 cv
192.21 286.761 193.83 288.381 193.83 290.381 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
187.38 291.111 mo
(123.0)
[1.25641 1.25639 1.25641 .628952 0 ]xsh
205.38 178.521 mo
205.38 180.531 203.75 182.151 201.75 182.151 cv
199.75 182.151 198.13 180.531 198.13 178.521 cv
198.13 176.521 199.75 174.901 201.75 174.901 cv
203.75 174.901 205.38 176.521 205.38 178.521 cv
cp
0 0 0 .71875 cmyk
@
205.38 178.521 mo
205.38 180.531 203.75 182.151 201.75 182.151 cv
199.75 182.151 198.13 180.531 198.13 178.521 cv
198.13 176.521 199.75 174.901 201.75 174.901 cv
203.75 174.901 205.38 176.521 205.38 178.521 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
198.92 179.251 mo
(191.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
223.17 291.121 mo
223.17 293.121 221.54 294.741 219.54 294.741 cv
217.54 294.741 215.92 293.121 215.92 291.121 cv
215.92 289.121 217.54 287.491 219.54 287.491 cv
221.54 287.491 223.17 289.121 223.17 291.121 cv
cp
0 0 0 .71875 cmyk
@
223.17 291.121 mo
223.17 293.121 221.54 294.741 219.54 294.741 cv
217.54 294.741 215.92 293.121 215.92 291.121 cv
215.92 289.121 217.54 287.491 219.54 287.491 cv
221.54 287.491 223.17 289.121 223.17 291.121 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
216.71 291.851 mo
(168.0)
[1.25641 1.25639 1.25641 .628967 0 ]xsh
216.36 267.221 mo
216.36 269.221 214.73 270.851 212.73 270.851 cv
210.73 270.851 209.11 269.221 209.11 267.221 cv
209.11 265.221 210.73 263.601 212.73 263.601 cv
214.73 263.601 216.36 265.221 216.36 267.221 cv
cp
0 0 0 .71875 cmyk
@
216.36 267.221 mo
216.36 269.221 214.73 270.851 212.73 270.851 cv
210.73 270.851 209.11 269.221 209.11 267.221 cv
209.11 265.221 210.73 263.601 212.73 263.601 cv
214.73 263.601 216.36 265.221 216.36 267.221 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
210.53 267.951 mo
(55.0)
[1.25641 1.25639 .628204 0 ]xsh
203.87 230.861 mo
203.87 232.861 202.25 234.491 200.25 234.491 cv
198.24 234.491 196.62 232.861 196.62 230.861 cv
196.62 228.861 198.24 227.241 200.25 227.241 cv
202.25 227.241 203.87 228.861 203.87 230.861 cv
cp
0 0 0 .71875 cmyk
@
203.87 230.861 mo
203.87 232.861 202.25 234.491 200.25 234.491 cv
198.24 234.491 196.62 232.861 196.62 230.861 cv
196.62 228.861 198.24 227.241 200.25 227.241 cv
202.25 227.241 203.87 228.861 203.87 230.861 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
198.05 231.591 mo
(10.0)
[1.25641 1.25639 .629074 0 ]xsh
205.55 212.111 mo
205.55 214.111 203.93 215.741 201.92 215.741 cv
199.92 215.741 198.3 214.111 198.3 212.111 cv
198.3 210.111 199.92 208.491 201.92 208.491 cv
203.93 208.491 205.55 210.111 205.55 212.111 cv
cp
0 0 0 .71875 cmyk
@
205.55 212.111 mo
205.55 214.111 203.93 215.741 201.92 215.741 cv
199.92 215.741 198.3 214.111 198.3 212.111 cv
198.3 210.111 199.92 208.491 201.92 208.491 cv
203.93 208.491 205.55 210.111 205.55 212.111 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
199.73 212.841 mo
(98.0)
[1.25641 1.25639 .628204 0 ]xsh
165.45 202.771 mo
165.45 204.781 163.82 206.401 161.82 206.401 cv
159.82 206.401 158.2 204.781 158.2 202.771 cv
158.2 200.771 159.82 199.151 161.82 199.151 cv
163.82 199.151 165.45 200.771 165.45 202.771 cv
cp
0 0 0 .71875 cmyk
@
165.45 202.771 mo
165.45 204.781 163.82 206.401 161.82 206.401 cv
159.82 206.401 158.2 204.781 158.2 202.771 cv
158.2 200.771 159.82 199.151 161.82 199.151 cv
163.82 199.151 165.45 200.771 165.45 202.771 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
159 203.501 mo
(159.0)
[1.25641 1.25639 1.25641 .628952 0 ]xsh
167.07 210.891 mo
167.07 212.891 165.45 214.521 163.45 214.521 cv
161.45 214.521 159.82 212.891 159.82 210.891 cv
159.82 208.891 161.45 207.271 163.45 207.271 cv
165.45 207.271 167.07 208.891 167.07 210.891 cv
cp
0 0 0 .71875 cmyk
@
167.07 210.891 mo
167.07 212.891 165.45 214.521 163.45 214.521 cv
161.45 214.521 159.82 212.891 159.82 210.891 cv
159.82 208.891 161.45 207.271 163.45 207.271 cv
165.45 207.271 167.07 208.891 167.07 210.891 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
160.62 211.621 mo
(132.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
177.61 233.831 mo
177.61 235.831 175.98 237.461 173.98 237.461 cv
171.98 237.461 170.36 235.831 170.36 233.831 cv
170.36 231.831 171.98 230.211 173.98 230.211 cv
175.98 230.211 177.61 231.831 177.61 233.831 cv
cp
0 0 0 .71875 cmyk
@
177.61 233.831 mo
177.61 235.831 175.98 237.461 173.98 237.461 cv
171.98 237.461 170.36 235.831 170.36 233.831 cv
170.36 231.831 171.98 230.211 173.98 230.211 cv
175.98 230.211 177.61 231.831 177.61 233.831 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
171.78 234.561 mo
(39.0)
[1.25641 1.25639 .628204 0 ]xsh
193.33 201.611 mo
193.33 203.611 191.71 205.231 189.71 205.231 cv
187.7 205.231 186.08 203.611 186.08 201.611 cv
186.08 199.601 187.7 197.981 189.71 197.981 cv
191.71 197.981 193.33 199.601 193.33 201.611 cv
cp
0 0 0 .71875 cmyk
@
193.33 201.611 mo
193.33 203.611 191.71 205.231 189.71 205.231 cv
187.7 205.231 186.08 203.611 186.08 201.611 cv
186.08 199.601 187.7 197.981 189.71 197.981 cv
191.71 197.981 193.33 199.601 193.33 201.611 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
187.51 202.341 mo
(90.0)
[1.25641 1.25639 .628204 0 ]xsh
181.56 207.791 mo
181.56 209.801 179.93 211.421 177.93 211.421 cv
175.93 211.421 174.31 209.801 174.31 207.791 cv
174.31 205.791 175.93 204.171 177.93 204.171 cv
179.93 204.171 181.56 205.791 181.56 207.791 cv
cp
0 0 0 .71875 cmyk
@
181.56 207.791 mo
181.56 209.801 179.93 211.421 177.93 211.421 cv
175.93 211.421 174.31 209.801 174.31 207.791 cv
174.31 205.791 175.93 204.171 177.93 204.171 cv
179.93 204.171 181.56 205.791 181.56 207.791 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
175.73 208.521 mo
(52.0)
[1.25641 1.25639 .628204 0 ]xsh
172.47 222.221 mo
172.47 224.221 170.85 225.841 168.85 225.841 cv
166.85 225.841 165.22 224.221 165.22 222.221 cv
165.22 220.221 166.85 218.591 168.85 218.591 cv
170.85 218.591 172.47 220.221 172.47 222.221 cv
cp
0 0 0 .71875 cmyk
@
172.47 222.221 mo
172.47 224.221 170.85 225.841 168.85 225.841 cv
166.85 225.841 165.22 224.221 165.22 222.221 cv
165.22 220.221 166.85 218.591 168.85 218.591 cv
170.85 218.591 172.47 220.221 172.47 222.221 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
166.02 222.951 mo
(143.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
192.08 225.781 mo
192.08 227.781 190.46 229.401 188.46 229.401 cv
186.45 229.401 184.83 227.781 184.83 225.781 cv
184.83 223.771 186.45 222.151 188.46 222.151 cv
190.46 222.151 192.08 223.771 192.08 225.781 cv
cp
0 0 0 .71875 cmyk
@
192.08 225.781 mo
192.08 227.781 190.46 229.401 188.46 229.401 cv
186.45 229.401 184.83 227.781 184.83 225.781 cv
184.83 223.771 186.45 222.151 188.46 222.151 cv
190.46 222.151 192.08 223.771 192.08 225.781 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
185.63 226.501 mo
(181.0)
[1.25641 1.25639 1.25641 .628952 0 ]xsh
135.78 191.111 mo
135.78 193.111 134.16 194.731 132.16 194.731 cv
130.16 194.731 128.53 193.111 128.53 191.111 cv
128.53 189.111 130.16 187.481 132.16 187.481 cv
134.16 187.481 135.78 189.111 135.78 191.111 cv
cp
0 0 0 .71875 cmyk
@
135.78 191.111 mo
135.78 193.111 134.16 194.731 132.16 194.731 cv
130.16 194.731 128.53 193.111 128.53 191.111 cv
128.53 189.111 130.16 187.481 132.16 187.481 cv
134.16 187.481 135.78 189.111 135.78 191.111 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
129.33 191.841 mo
(175.0)
[1.25641 1.25639 1.25641 .628967 0 ]xsh
148.76 180.461 mo
148.76 182.471 147.14 184.091 145.14 184.091 cv
143.13 184.091 141.51 182.471 141.51 180.461 cv
141.51 178.461 143.13 176.841 145.14 176.841 cv
147.14 176.841 148.76 178.461 148.76 180.461 cv
cp
0 0 0 .71875 cmyk
@
148.76 180.461 mo
148.76 182.471 147.14 184.091 145.14 184.091 cv
143.13 184.091 141.51 182.471 141.51 180.461 cv
141.51 178.461 143.13 176.841 145.14 176.841 cv
147.14 176.841 148.76 178.461 148.76 180.461 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
142.94 181.191 mo
(33.0)
[1.25641 1.25639 .629074 0 ]xsh
168.07 193.501 mo
168.07 195.501 166.45 197.131 164.44 197.131 cv
162.44 197.131 160.82 195.501 160.82 193.501 cv
160.82 191.501 162.44 189.881 164.44 189.881 cv
166.45 189.881 168.07 191.501 168.07 193.501 cv
cp
0 0 0 .71875 cmyk
@
168.07 193.501 mo
168.07 195.501 166.45 197.131 164.44 197.131 cv
162.44 197.131 160.82 195.501 160.82 193.501 cv
160.82 191.501 162.44 189.881 164.44 189.881 cv
166.45 189.881 168.07 191.501 168.07 193.501 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
162.87 194.231 mo
(2.0)
[1.25641 .628738 0 ]xsh
181.8 187.311 mo
181.8 189.311 180.18 190.931 178.17 190.931 cv
176.17 190.931 174.55 189.311 174.55 187.311 cv
174.55 185.301 176.17 183.681 178.17 183.681 cv
180.18 183.681 181.8 185.301 181.8 187.311 cv
cp
0 0 0 .71875 cmyk
@
181.8 187.311 mo
181.8 189.311 180.18 190.931 178.17 190.931 cv
176.17 190.931 174.55 189.311 174.55 187.311 cv
174.55 185.301 176.17 183.681 178.17 183.681 cv
180.18 183.681 181.8 185.301 181.8 187.311 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
175.97 188.031 mo
(72.0)
[1.25641 1.25639 .629074 0 ]xsh
191.38 189.441 mo
191.38 191.451 189.76 193.071 187.75 193.071 cv
185.75 193.071 184.13 191.451 184.13 189.441 cv
184.13 187.441 185.75 185.821 187.75 185.821 cv
189.76 185.821 191.38 187.441 191.38 189.441 cv
cp
0 0 0 .71875 cmyk
@
191.38 189.441 mo
191.38 191.451 189.76 193.071 187.75 193.071 cv
185.75 193.071 184.13 191.451 184.13 189.441 cv
184.13 187.441 185.75 185.821 187.75 185.821 cv
189.76 185.821 191.38 187.441 191.38 189.441 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
185.56 190.171 mo
(12.0)
[1.25641 1.25639 .628204 0 ]xsh
185.69 173.431 mo
185.69 175.441 184.07 177.061 182.07 177.061 cv
180.07 177.061 178.44 175.441 178.44 173.431 cv
178.44 171.431 180.07 169.811 182.07 169.811 cv
184.07 169.811 185.69 171.431 185.69 173.431 cv
cp
0 0 0 .71875 cmyk
@
185.69 173.431 mo
185.69 175.441 184.07 177.061 182.07 177.061 cv
180.07 177.061 178.44 175.441 178.44 173.431 cv
178.44 171.431 180.07 169.811 182.07 169.811 cv
184.07 169.811 185.69 171.431 185.69 173.431 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
179.87 174.161 mo
(58.0)
[1.25641 1.25639 .629074 0 ]xsh
172.19 185.411 mo
172.19 187.411 170.57 189.031 168.56 189.031 cv
166.56 189.031 164.94 187.411 164.94 185.411 cv
164.94 183.411 166.56 181.781 168.56 181.781 cv
170.57 181.781 172.19 183.411 172.19 185.411 cv
cp
0 0 0 .71875 cmyk
@
172.19 185.411 mo
172.19 187.411 170.57 189.031 168.56 189.031 cv
166.56 189.031 164.94 187.411 164.94 185.411 cv
164.94 183.411 166.56 181.781 168.56 181.781 cv
170.57 181.781 172.19 183.411 172.19 185.411 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
165.74 186.141 mo
(139.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
116.7 134.341 mo
116.7 136.341 115.08 137.971 113.08 137.971 cv
111.08 137.971 109.45 136.341 109.45 134.341 cv
109.45 132.341 111.08 130.721 113.08 130.721 cv
115.08 130.721 116.7 132.341 116.7 134.341 cv
cp
0 0 0 .71875 cmyk
@
116.7 134.341 mo
116.7 136.341 115.08 137.971 113.08 137.971 cv
111.08 137.971 109.45 136.341 109.45 134.341 cv
109.45 132.341 111.08 130.721 113.08 130.721 cv
115.08 130.721 116.7 132.341 116.7 134.341 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
110.25 135.071 mo
(147.0)
[1.2564 1.25641 1.2564 .62896 0 ]xsh
138.27 135.251 mo
138.27 137.251 136.64 138.871 134.64 138.871 cv
132.64 138.871 131.02 137.251 131.02 135.251 cv
131.02 133.251 132.64 131.621 134.64 131.621 cv
136.64 131.621 138.27 133.251 138.27 135.251 cv
cp
0 0 0 .71875 cmyk
@
138.27 135.251 mo
138.27 137.251 136.64 138.871 134.64 138.871 cv
132.64 138.871 131.02 137.251 131.02 135.251 cv
131.02 133.251 132.64 131.621 134.64 131.621 cv
136.64 131.621 138.27 133.251 138.27 135.251 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
132.44 135.981 mo
(35.0)
[1.25641 1.25639 .629074 0 ]xsh
154.58 136.491 mo
154.58 138.491 152.95 140.111 150.95 140.111 cv
148.95 140.111 147.33 138.491 147.33 136.491 cv
147.33 134.491 148.95 132.861 150.95 132.861 cv
152.95 132.861 154.58 134.491 154.58 136.491 cv
cp
0 0 0 .71875 cmyk
@
154.58 136.491 mo
154.58 138.491 152.95 140.111 150.95 140.111 cv
148.95 140.111 147.33 138.491 147.33 136.491 cv
147.33 134.491 148.95 132.861 150.95 132.861 cv
152.95 132.861 154.58 134.491 154.58 136.491 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
148.12 137.221 mo
(136.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
181.17 135.321 mo
181.17 137.321 179.54 138.941 177.54 138.941 cv
175.54 138.941 173.92 137.321 173.92 135.321 cv
173.92 133.321 175.54 131.691 177.54 131.691 cv
179.54 131.691 181.17 133.321 181.17 135.321 cv
cp
0 0 0 .71875 cmyk
@
181.17 135.321 mo
181.17 137.321 179.54 138.941 177.54 138.941 cv
175.54 138.941 173.92 137.321 173.92 135.321 cv
173.92 133.321 175.54 131.691 177.54 131.691 cv
179.54 131.691 181.17 133.321 181.17 135.321 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
175.34 136.051 mo
(88.0)
[1.25641 1.25639 .629074 0 ]xsh
203.24 243.221 mo
203.24 245.221 201.62 246.851 199.62 246.851 cv
197.62 246.851 195.99 245.221 195.99 243.221 cv
195.99 241.221 197.62 239.601 199.62 239.601 cv
201.62 239.601 203.24 241.221 203.24 243.221 cv
cp
0 0 0 .71875 cmyk
@
203.24 243.221 mo
203.24 245.221 201.62 246.851 199.62 246.851 cv
197.62 246.851 195.99 245.221 195.99 243.221 cv
195.99 241.221 197.62 239.601 199.62 239.601 cv
201.62 239.601 203.24 241.221 203.24 243.221 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
196.79 243.951 mo
(195.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
185.62 266.051 mo
185.62 268.061 184 269.681 182 269.681 cv
179.99 269.681 178.37 268.061 178.37 266.051 cv
178.37 264.051 179.99 262.431 182 262.431 cv
184 262.431 185.62 264.051 185.62 266.051 cv
cp
0 0 0 .71875 cmyk
@
185.62 266.051 mo
185.62 268.061 184 269.681 182 269.681 cv
179.99 269.681 178.37 268.061 178.37 266.051 cv
178.37 264.051 179.99 262.431 182 262.431 cv
184 262.431 185.62 264.051 185.62 266.051 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
179.17 266.781 mo
(117.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
179.16 256.701 mo
179.16 258.701 177.54 260.331 175.54 260.331 cv
173.54 260.331 171.91 258.701 171.91 256.701 cv
171.91 254.701 173.54 253.081 175.54 253.081 cv
177.54 253.081 179.16 254.701 179.16 256.701 cv
cp
0 0 0 .71875 cmyk
@
179.16 256.701 mo
179.16 258.701 177.54 260.331 175.54 260.331 cv
173.54 260.331 171.91 258.701 171.91 256.701 cv
171.91 254.701 173.54 253.081 175.54 253.081 cv
177.54 253.081 179.16 254.701 179.16 256.701 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
172.71 257.431 mo
(189.0)
[1.25641 1.25639 1.25641 .628967 0 ]xsh
166.67 240.811 mo
166.67 242.821 165.04 244.441 163.04 244.441 cv
161.04 244.441 159.42 242.821 159.42 240.811 cv
159.42 238.811 161.04 237.191 163.04 237.191 cv
165.04 237.191 166.67 238.811 166.67 240.811 cv
cp
0 0 0 .71875 cmyk
@
166.67 240.811 mo
166.67 242.821 165.04 244.441 163.04 244.441 cv
161.04 244.441 159.42 242.821 159.42 240.811 cv
159.42 238.811 161.04 237.191 163.04 237.191 cv
165.04 237.191 166.67 238.811 166.67 240.811 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
160.84 241.541 mo
(36.0)
[1.25641 1.25639 .629074 0 ]xsh
153.12 264.191 mo
153.12 266.201 151.5 267.821 149.49 267.821 cv
147.49 267.821 145.87 266.201 145.87 264.191 cv
145.87 262.191 147.49 260.571 149.49 260.571 cv
151.5 260.571 153.12 262.191 153.12 264.191 cv
cp
0 0 0 .71875 cmyk
@
153.12 264.191 mo
153.12 266.201 151.5 267.821 149.49 267.821 cv
147.49 267.821 145.87 266.201 145.87 264.191 cv
145.87 262.191 147.49 260.571 149.49 260.571 cv
151.5 260.571 153.12 262.191 153.12 264.191 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
147.29 264.921 mo
(32.0)
[1.25641 1.25639 .629074 0 ]xsh
152.59 228.661 mo
152.59 230.661 150.97 232.281 148.97 232.281 cv
146.96 232.281 145.34 230.661 145.34 228.661 cv
145.34 226.661 146.96 225.031 148.97 225.031 cv
150.97 225.031 152.59 226.661 152.59 228.661 cv
cp
0 0 0 .71875 cmyk
@
152.59 228.661 mo
152.59 230.661 150.97 232.281 148.97 232.281 cv
146.96 232.281 145.34 230.661 145.34 228.661 cv
145.34 226.661 146.96 225.031 148.97 225.031 cv
150.97 225.031 152.59 226.661 152.59 228.661 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
146.14 229.391 mo
(158.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
140.92 244.021 mo
140.92 246.021 139.29 247.651 137.29 247.651 cv
135.29 247.651 133.67 246.021 133.67 244.021 cv
133.67 242.021 135.29 240.401 137.29 240.401 cv
139.29 240.401 140.92 242.021 140.92 244.021 cv
cp
0 0 0 .71875 cmyk
@
140.92 244.021 mo
140.92 246.021 139.29 247.651 137.29 247.651 cv
135.29 247.651 133.67 246.021 133.67 244.021 cv
133.67 242.021 135.29 240.401 137.29 240.401 cv
139.29 240.401 140.92 242.021 140.92 244.021 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
135.09 244.751 mo
(96.0)
[1.25641 1.25639 .629074 0 ]xsh
143.21 235.661 mo
143.21 237.671 141.59 239.291 139.58 239.291 cv
137.58 239.291 135.96 237.671 135.96 235.661 cv
135.96 233.661 137.58 232.041 139.58 232.041 cv
141.59 232.041 143.21 233.661 143.21 235.661 cv
cp
0 0 0 .71875 cmyk
@
143.21 235.661 mo
143.21 237.671 141.59 239.291 139.58 239.291 cv
137.58 239.291 135.96 237.671 135.96 235.661 cv
135.96 233.661 137.58 232.041 139.58 232.041 cv
141.59 232.041 143.21 233.661 143.21 235.661 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
137.39 236.391 mo
(86.0)
[1.25641 1.25639 .629074 0 ]xsh
131.03 253.931 mo
131.03 255.931 129.41 257.551 127.41 257.551 cv
125.4 257.551 123.78 255.931 123.78 253.931 cv
123.78 251.931 125.4 250.301 127.41 250.301 cv
129.41 250.301 131.03 251.931 131.03 253.931 cv
cp
0 0 0 .71875 cmyk
@
131.03 253.931 mo
131.03 255.931 129.41 257.551 127.41 257.551 cv
125.4 257.551 123.78 255.931 123.78 253.931 cv
123.78 251.931 125.4 250.301 127.41 250.301 cv
129.41 250.301 131.03 251.931 131.03 253.931 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
125.21 254.661 mo
(41.0)
[1.2564 1.25641 .628204 0 ]xsh
130.07 235.641 mo
130.07 237.641 128.45 239.261 126.45 239.261 cv
124.44 239.261 122.82 237.641 122.82 235.641 cv
122.82 233.641 124.44 232.011 126.45 232.011 cv
128.45 232.011 130.07 233.641 130.07 235.641 cv
cp
0 0 0 .71875 cmyk
@
130.07 235.641 mo
130.07 237.641 128.45 239.261 126.45 239.261 cv
124.44 239.261 122.82 237.641 122.82 235.641 cv
122.82 233.641 124.44 232.011 126.45 232.011 cv
128.45 232.011 130.07 233.641 130.07 235.641 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
123.62 236.371 mo
(121.0)
[1.2564 1.25641 1.2564 .629356 0 ]xsh
117.81 263.811 mo
117.81 265.821 116.19 267.441 114.19 267.441 cv
112.19 267.441 110.56 265.821 110.56 263.811 cv
110.56 261.811 112.19 260.191 114.19 260.191 cv
116.19 260.191 117.81 261.811 117.81 263.811 cv
cp
0 0 0 .71875 cmyk
@
117.81 263.811 mo
117.81 265.821 116.19 267.441 114.19 267.441 cv
112.19 267.441 110.56 265.821 110.56 263.811 cv
110.56 261.811 112.19 260.191 114.19 260.191 cv
116.19 260.191 117.81 261.811 117.81 263.811 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
111.36 264.541 mo
(173.0)
[1.2564 1.25641 1.2564 .62896 0 ]xsh
108.8 255.051 mo
108.8 257.051 107.17 258.671 105.17 258.671 cv
103.17 258.671 101.55 257.051 101.55 255.051 cv
101.55 253.041 103.17 251.421 105.17 251.421 cv
107.17 251.421 108.8 253.041 108.8 255.051 cv
cp
0 0 0 .71875 cmyk
@
108.8 255.051 mo
108.8 257.051 107.17 258.671 105.17 258.671 cv
103.17 258.671 101.55 257.051 101.55 255.051 cv
101.55 253.041 103.17 251.421 105.17 251.421 cv
107.17 251.421 108.8 253.041 108.8 255.051 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
102.97 255.771 mo
(29.0)
[1.2564 1.25641 .629066 0 ]xsh
305.93 319.461 mo
305.93 321.471 304.31 323.091 302.31 323.091 cv
300.31 323.091 298.68 321.471 298.68 319.461 cv
298.68 317.461 300.31 315.841 302.31 315.841 cv
304.31 315.841 305.93 317.461 305.93 319.461 cv
cp
0 0 0 .71875 cmyk
@
305.93 319.461 mo
305.93 321.471 304.31 323.091 302.31 323.091 cv
300.31 323.091 298.68 321.471 298.68 319.461 cv
298.68 317.461 300.31 315.841 302.31 315.841 cv
304.31 315.841 305.93 317.461 305.93 319.461 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
300.74 320.191 mo
(9.0)
[1.25641 .628723 0 ]xsh
294.08 298.721 mo
294.08 300.721 292.45 302.351 290.45 302.351 cv
288.45 302.351 286.83 300.721 286.83 298.721 cv
286.83 296.721 288.45 295.101 290.45 295.101 cv
292.45 295.101 294.08 296.721 294.08 298.721 cv
cp
0 0 0 .71875 cmyk
@
294.08 298.721 mo
294.08 300.721 292.45 302.351 290.45 302.351 cv
288.45 302.351 286.83 300.721 286.83 298.721 cv
286.83 296.721 288.45 295.101 290.45 295.101 cv
292.45 295.101 294.08 296.721 294.08 298.721 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
287.62 299.451 mo
(126.0)
[1.25641 1.25641 1.25641 .629333 0 ]xsh
287.8 126.781 mo
287.8 128.781 286.18 130.401 284.18 130.401 cv
282.17 130.401 280.55 128.781 280.55 126.781 cv
280.55 124.781 282.17 123.151 284.18 123.151 cv
286.18 123.151 287.8 124.781 287.8 126.781 cv
cp
0 0 0 .71875 cmyk
@
287.8 126.781 mo
287.8 128.781 286.18 130.401 284.18 130.401 cv
282.17 130.401 280.55 128.781 280.55 126.781 cv
280.55 124.781 282.17 123.151 284.18 123.151 cv
286.18 123.151 287.8 124.781 287.8 126.781 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
281.35 127.511 mo
(163.0)
[1.25641 1.25641 1.25641 .628937 0 ]xsh
292.45 219.411 mo
292.45 221.411 290.83 223.041 288.83 223.041 cv
286.83 223.041 285.2 221.411 285.2 219.411 cv
285.2 217.411 286.83 215.791 288.83 215.791 cv
290.83 215.791 292.45 217.411 292.45 219.411 cv
cp
0 0 0 .71875 cmyk
@
292.45 219.411 mo
292.45 221.411 290.83 223.041 288.83 223.041 cv
286.83 223.041 285.2 221.411 285.2 219.411 cv
285.2 217.411 286.83 215.791 288.83 215.791 cv
290.83 215.791 292.45 217.411 292.45 219.411 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
286 220.141 mo
(198.0)
[1.25641 1.25641 1.25641 .628937 0 ]xsh
296.78 268.431 mo
296.78 270.431 295.16 272.051 293.16 272.051 cv
291.15 272.051 289.53 270.431 289.53 268.431 cv
289.53 266.421 291.15 264.801 293.16 264.801 cv
295.16 264.801 296.78 266.421 296.78 268.431 cv
cp
0 0 0 .71875 cmyk
@
296.78 268.431 mo
296.78 270.431 295.16 272.051 293.16 272.051 cv
291.15 272.051 289.53 270.431 289.53 268.431 cv
289.53 266.421 291.15 264.801 293.16 264.801 cv
295.16 264.801 296.78 266.421 296.78 268.431 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
290.96 269.151 mo
(19.0)
[1.25641 1.25641 .628204 0 ]xsh
288.67 187.701 mo
288.67 189.711 287.05 191.331 285.05 191.331 cv
283.05 191.331 281.42 189.711 281.42 187.701 cv
281.42 185.701 283.05 184.081 285.05 184.081 cv
287.05 184.081 288.67 185.701 288.67 187.701 cv
cp
0 0 0 .71875 cmyk
@
288.67 187.701 mo
288.67 189.711 287.05 191.331 285.05 191.331 cv
283.05 191.331 281.42 189.711 281.42 187.701 cv
281.42 185.701 283.05 184.081 285.05 184.081 cv
287.05 184.081 288.67 185.701 288.67 187.701 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
282.85 188.431 mo
(87.0)
[1.25641 1.25641 .629059 0 ]xsh
289.26 149.371 mo
289.26 151.371 287.64 152.991 285.64 152.991 cv
283.63 152.991 282.01 151.371 282.01 149.371 cv
282.01 147.371 283.63 145.741 285.64 145.741 cv
287.64 145.741 289.26 147.371 289.26 149.371 cv
cp
0 0 0 .71875 cmyk
@
289.26 149.371 mo
289.26 151.371 287.64 152.991 285.64 152.991 cv
283.63 152.991 282.01 151.371 282.01 149.371 cv
282.01 147.371 283.63 145.741 285.64 145.741 cv
287.64 145.741 289.26 147.371 289.26 149.371 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
283.44 150.101 mo
(54.0)
[1.25641 1.25641 .629059 0 ]xsh
242.12 237.141 mo
242.12 239.141 240.5 240.761 238.5 240.761 cv
236.49 240.761 234.87 239.141 234.87 237.141 cv
234.87 235.141 236.49 233.511 238.5 233.511 cv
240.5 233.511 242.12 235.141 242.12 237.141 cv
cp
0 0 0 .71875 cmyk
@
242.12 237.141 mo
242.12 239.141 240.5 240.761 238.5 240.761 cv
236.49 240.761 234.87 239.141 234.87 237.141 cv
234.87 235.141 236.49 233.511 238.5 233.511 cv
240.5 233.511 242.12 235.141 242.12 237.141 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
235.67 237.871 mo
(103.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
263.66 244.541 mo
263.66 246.541 262.04 248.161 260.04 248.161 cv
258.04 248.161 256.41 246.541 256.41 244.541 cv
256.41 242.541 258.04 240.911 260.04 240.911 cv
262.04 240.911 263.66 242.541 263.66 244.541 cv
cp
0 0 0 .71875 cmyk
@
263.66 244.541 mo
263.66 246.541 262.04 248.161 260.04 248.161 cv
258.04 248.161 256.41 246.541 256.41 244.541 cv
256.41 242.541 258.04 240.911 260.04 240.911 cv
262.04 240.911 263.66 242.541 263.66 244.541 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
257.84 245.271 mo
(17.0)
[1.25641 1.25641 .629059 0 ]xsh
241.74 220.951 mo
241.74 222.951 240.12 224.571 238.12 224.571 cv
236.12 224.571 234.49 222.951 234.49 220.951 cv
234.49 218.941 236.12 217.321 238.12 217.321 cv
240.12 217.321 241.74 218.941 241.74 220.951 cv
cp
0 0 0 .71875 cmyk
@
241.74 220.951 mo
241.74 222.951 240.12 224.571 238.12 224.571 cv
236.12 224.571 234.49 222.951 234.49 220.951 cv
234.49 218.941 236.12 217.321 238.12 217.321 cv
240.12 217.321 241.74 218.941 241.74 220.951 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
235.29 221.671 mo
(108.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
255.06 221.091 mo
255.06 223.091 253.44 224.721 251.44 224.721 cv
249.43 224.721 247.81 223.091 247.81 221.091 cv
247.81 219.091 249.43 217.471 251.44 217.471 cv
253.44 217.471 255.06 219.091 255.06 221.091 cv
cp
0 0 0 .71875 cmyk
@
255.06 221.091 mo
255.06 223.091 253.44 224.721 251.44 224.721 cv
249.43 224.721 247.81 223.091 247.81 221.091 cv
247.81 219.091 249.43 217.471 251.44 217.471 cv
253.44 217.471 255.06 219.091 255.06 221.091 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
249.24 221.821 mo
(71.0)
[1.25641 1.25639 .629089 0 ]xsh
277.71 233.101 mo
277.71 235.101 276.09 236.721 274.09 236.721 cv
272.09 236.721 270.46 235.101 270.46 233.101 cv
270.46 231.091 272.09 229.471 274.09 229.471 cv
276.09 229.471 277.71 231.091 277.71 233.101 cv
cp
0 0 0 .71875 cmyk
@
277.71 233.101 mo
277.71 235.101 276.09 236.721 274.09 236.721 cv
272.09 236.721 270.46 235.101 270.46 233.101 cv
270.46 231.091 272.09 229.471 274.09 229.471 cv
276.09 229.471 277.71 231.091 277.71 233.101 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
271.89 233.821 mo
(16.0)
[1.25641 1.25641 .629059 0 ]xsh
268.45 211.851 mo
268.45 213.851 266.83 215.471 264.83 215.471 cv
262.83 215.471 261.2 213.851 261.2 211.851 cv
261.2 209.851 262.83 208.221 264.83 208.221 cv
266.83 208.221 268.45 209.851 268.45 211.851 cv
cp
0 0 0 .71875 cmyk
@
268.45 211.851 mo
268.45 213.851 266.83 215.471 264.83 215.471 cv
262.83 215.471 261.2 213.851 261.2 211.851 cv
261.2 209.851 262.83 208.221 264.83 208.221 cv
266.83 208.221 268.45 209.851 268.45 211.851 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
262.63 212.581 mo
(21.0)
[1.25641 1.25641 .628204 0 ]xsh
238.73 202.221 mo
238.73 204.221 237.11 205.841 235.11 205.841 cv
233.11 205.841 231.48 204.221 231.48 202.221 cv
231.48 200.221 233.11 198.591 235.11 198.591 cv
237.11 198.591 238.73 200.221 238.73 202.221 cv
cp
0 0 0 .71875 cmyk
@
238.73 202.221 mo
238.73 204.221 237.11 205.841 235.11 205.841 cv
233.11 205.841 231.48 204.221 231.48 202.221 cv
231.48 200.221 233.11 198.591 235.11 198.591 cv
237.11 198.591 238.73 200.221 238.73 202.221 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
232.91 202.951 mo
(79.0)
[1.25641 1.25639 .628204 0 ]xsh
259.49 193.601 mo
259.49 195.601 257.87 197.221 255.87 197.221 cv
253.87 197.221 252.24 195.601 252.24 193.601 cv
252.24 191.601 253.87 189.971 255.87 189.971 cv
257.87 189.971 259.49 191.601 259.49 193.601 cv
cp
0 0 0 .71875 cmyk
@
259.49 193.601 mo
259.49 195.601 257.87 197.221 255.87 197.221 cv
253.87 197.221 252.24 195.601 252.24 193.601 cv
252.24 191.601 253.87 189.971 255.87 189.971 cv
257.87 189.971 259.49 191.601 259.49 193.601 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
253.67 194.331 mo
(22.0)
[1.25641 1.25639 .629089 0 ]xsh
283.66 201.201 mo
283.66 203.201 282.04 204.831 280.04 204.831 cv
278.03 204.831 276.41 203.201 276.41 201.201 cv
276.41 199.201 278.03 197.581 280.04 197.581 cv
282.04 197.581 283.66 199.201 283.66 201.201 cv
cp
0 0 0 .71875 cmyk
@
283.66 201.201 mo
283.66 203.201 282.04 204.831 280.04 204.831 cv
278.03 204.831 276.41 203.201 276.41 201.201 cv
276.41 199.201 278.03 197.581 280.04 197.581 cv
282.04 197.581 283.66 199.201 283.66 201.201 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
277.84 201.931 mo
(11.0)
[1.25641 1.25641 .629059 0 ]xsh
270.06 179.351 mo
270.06 181.351 268.43 182.981 266.43 182.981 cv
264.43 182.981 262.81 181.351 262.81 179.351 cv
262.81 177.351 264.43 175.731 266.43 175.731 cv
268.43 175.731 270.06 177.351 270.06 179.351 cv
cp
0 0 0 .71875 cmyk
@
270.06 179.351 mo
270.06 181.351 268.43 182.981 266.43 182.981 cv
264.43 182.981 262.81 181.351 262.81 179.351 cv
262.81 177.351 264.43 175.731 266.43 175.731 cv
268.43 175.731 270.06 177.351 270.06 179.351 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
264.86 180.081 mo
(1.0)
[1.25641 .628723 0 ]xsh
244.83 185.541 mo
244.83 187.541 243.2 189.161 241.2 189.161 cv
239.2 189.161 237.58 187.541 237.58 185.541 cv
237.58 183.541 239.2 181.911 241.2 181.911 cv
243.2 181.911 244.83 183.541 244.83 185.541 cv
cp
0 0 0 .71875 cmyk
@
244.83 185.541 mo
244.83 187.541 243.2 189.161 241.2 189.161 cv
239.2 189.161 237.58 187.541 237.58 185.541 cv
237.58 183.541 239.2 181.911 241.2 181.911 cv
243.2 181.911 244.83 183.541 244.83 185.541 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
239 186.271 mo
(82.0)
[1.25641 1.25639 .629089 0 ]xsh
281.16 272.931 mo
281.16 274.931 279.53 276.561 277.53 276.561 cv
275.53 276.561 273.91 274.931 273.91 272.931 cv
273.91 270.931 275.53 269.311 277.53 269.311 cv
279.53 269.311 281.16 270.931 281.16 272.931 cv
cp
0 0 0 .71875 cmyk
@
281.16 272.931 mo
281.16 274.931 279.53 276.561 277.53 276.561 cv
275.53 276.561 273.91 274.931 273.91 272.931 cv
273.91 270.931 275.53 269.311 277.53 269.311 cv
279.53 269.311 281.16 270.931 281.16 272.931 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
274.7 273.661 mo
(109.0)
[1.25641 1.25641 1.25641 .628937 0 ]xsh
267.7 286.161 mo
267.7 288.161 266.08 289.781 264.08 289.781 cv
262.08 289.781 260.45 288.161 260.45 286.161 cv
260.45 284.161 262.08 282.531 264.08 282.531 cv
266.08 282.531 267.7 284.161 267.7 286.161 cv
cp
0 0 0 .71875 cmyk
@
267.7 286.161 mo
267.7 288.161 266.08 289.781 264.08 289.781 cv
262.08 289.781 260.45 288.161 260.45 286.161 cv
260.45 284.161 262.08 282.531 264.08 282.531 cv
266.08 282.531 267.7 284.161 267.7 286.161 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
261.88 286.891 mo
(68.0)
[1.25641 1.25641 .628204 0 ]xsh
255.95 276.231 mo
255.95 278.241 254.33 279.861 252.33 279.861 cv
250.33 279.861 248.7 278.241 248.7 276.231 cv
248.7 274.231 250.33 272.611 252.33 272.611 cv
254.33 272.611 255.95 274.231 255.95 276.231 cv
cp
0 0 0 .71875 cmyk
@
255.95 276.231 mo
255.95 278.241 254.33 279.861 252.33 279.861 cv
250.33 279.861 248.7 278.241 248.7 276.231 cv
248.7 274.231 250.33 272.611 252.33 272.611 cv
254.33 272.611 255.95 274.231 255.95 276.231 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
250.13 276.961 mo
(62.0)
[1.25641 1.25639 .628204 0 ]xsh
260.21 260.651 mo
260.21 262.661 258.59 264.281 256.59 264.281 cv
254.59 264.281 252.96 262.661 252.96 260.651 cv
252.96 258.651 254.59 257.031 256.59 257.031 cv
258.59 257.031 260.21 258.651 260.21 260.651 cv
cp
0 0 0 .71875 cmyk
@
260.21 260.651 mo
260.21 262.661 258.59 264.281 256.59 264.281 cv
254.59 264.281 252.96 262.661 252.96 260.651 cv
252.96 258.651 254.59 257.031 256.59 257.031 cv
258.59 257.031 260.21 258.651 260.21 260.651 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
253.76 261.381 mo
(169.0)
[1.25641 1.25639 1.25641 .628967 0 ]xsh
320.12 283.731 mo
320.12 285.731 318.5 287.351 316.5 287.351 cv
314.5 287.351 312.87 285.731 312.87 283.731 cv
312.87 281.731 314.5 280.101 316.5 280.101 cv
318.5 280.101 320.12 281.731 320.12 283.731 cv
cp
0 0 0 .71875 cmyk
@
320.12 283.731 mo
320.12 285.731 318.5 287.351 316.5 287.351 cv
314.5 287.351 312.87 285.731 312.87 283.731 cv
312.87 281.731 314.5 280.101 316.5 280.101 cv
318.5 280.101 320.12 281.731 320.12 283.731 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
314.93 284.461 mo
(4.0)
[1.25641 .628723 0 ]xsh
339.75 297.181 mo
339.75 299.181 338.13 300.811 336.12 300.811 cv
334.12 300.811 332.5 299.181 332.5 297.181 cv
332.5 295.181 334.12 293.561 336.12 293.561 cv
338.13 293.561 339.75 295.181 339.75 297.181 cv
cp
0 0 0 .71875 cmyk
@
339.75 297.181 mo
339.75 299.181 338.13 300.811 336.12 300.811 cv
334.12 300.811 332.5 299.181 332.5 297.181 cv
332.5 295.181 334.12 293.561 336.12 293.561 cv
338.13 293.561 339.75 295.181 339.75 297.181 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
333.3 297.911 mo
(162.0)
[1.25641 1.25641 1.25641 .628937 0 ]xsh
242.27 260.681 mo
242.27 262.691 240.64 264.311 238.64 264.311 cv
236.64 264.311 235.02 262.691 235.02 260.681 cv
235.02 258.681 236.64 257.061 238.64 257.061 cv
240.64 257.061 242.27 258.681 242.27 260.681 cv
cp
0 0 0 .71875 cmyk
@
242.27 260.681 mo
242.27 262.691 240.64 264.311 238.64 264.311 cv
236.64 264.311 235.02 262.691 235.02 260.681 cv
235.02 258.681 236.64 257.061 238.64 257.061 cv
240.64 257.061 242.27 258.681 242.27 260.681 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
236.44 261.411 mo
(66.0)
[1.25641 1.25639 .629089 0 ]xsh
221.56 134.051 mo
221.56 136.061 219.93 137.681 217.93 137.681 cv
215.93 137.681 214.31 136.061 214.31 134.051 cv
214.31 132.051 215.93 130.431 217.93 130.431 cv
219.93 130.431 221.56 132.051 221.56 134.051 cv
cp
0 0 0 .71875 cmyk
@
221.56 134.051 mo
221.56 136.061 219.93 137.681 217.93 137.681 cv
215.93 137.681 214.31 136.061 214.31 134.051 cv
214.31 132.051 215.93 130.431 217.93 130.431 cv
219.93 130.431 221.56 132.051 221.56 134.051 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
215.73 134.781 mo
(15.0)
[1.25641 1.25639 .628204 0 ]xsh
233.87 123.111 mo
233.87 125.111 232.24 126.731 230.24 126.731 cv
228.24 126.731 226.62 125.111 226.62 123.111 cv
226.62 121.111 228.24 119.481 230.24 119.481 cv
232.24 119.481 233.87 121.111 233.87 123.111 cv
cp
0 0 0 .71875 cmyk
@
233.87 123.111 mo
233.87 125.111 232.24 126.731 230.24 126.731 cv
228.24 126.731 226.62 125.111 226.62 123.111 cv
226.62 121.111 228.24 119.481 230.24 119.481 cv
232.24 119.481 233.87 121.111 233.87 123.111 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
228.04 123.841 mo
(75.0)
[1.25641 1.25639 .629089 0 ]xsh
227.84 143.981 mo
227.84 145.981 226.22 147.611 224.22 147.611 cv
222.21 147.611 220.59 145.981 220.59 143.981 cv
220.59 141.981 222.21 140.361 224.22 140.361 cv
226.22 140.361 227.84 141.981 227.84 143.981 cv
cp
0 0 0 .71875 cmyk
@
227.84 143.981 mo
227.84 145.981 226.22 147.611 224.22 147.611 cv
222.21 147.611 220.59 145.981 220.59 143.981 cv
220.59 141.981 222.21 140.361 224.22 140.361 cv
226.22 140.361 227.84 141.981 227.84 143.981 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
221.39 144.711 mo
(128.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
245.72 128.551 mo
245.72 130.551 244.1 132.181 242.1 132.181 cv
240.1 132.181 238.47 130.551 238.47 128.551 cv
238.47 126.551 240.1 124.931 242.1 124.931 cv
244.1 124.931 245.72 126.551 245.72 128.551 cv
cp
0 0 0 .71875 cmyk
@
245.72 128.551 mo
245.72 130.551 244.1 132.181 242.1 132.181 cv
240.1 132.181 238.47 130.551 238.47 128.551 cv
238.47 126.551 240.1 124.931 242.1 124.931 cv
244.1 124.931 245.72 126.551 245.72 128.551 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
239.27 129.281 mo
(110.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
249.25 148.781 mo
249.25 150.781 247.63 152.401 245.63 152.401 cv
243.62 152.401 242 150.781 242 148.781 cv
242 146.781 243.62 145.151 245.63 145.151 cv
247.63 145.151 249.25 146.781 249.25 148.781 cv
cp
0 0 0 .71875 cmyk
@
249.25 148.781 mo
249.25 150.781 247.63 152.401 245.63 152.401 cv
243.62 152.401 242 150.781 242 148.781 cv
242 146.781 243.62 145.151 245.63 145.151 cv
247.63 145.151 249.25 146.781 249.25 148.781 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
242.8 149.511 mo
(188.0)
[1.25641 1.25639 1.25641 .628967 0 ]xsh
240.21 165.871 mo
240.21 167.871 238.59 169.491 236.59 169.491 cv
234.59 169.491 232.96 167.871 232.96 165.871 cv
232.96 163.861 234.59 162.241 236.59 162.241 cv
238.59 162.241 240.21 163.861 240.21 165.871 cv
cp
0 0 0 .71875 cmyk
@
240.21 165.871 mo
240.21 167.871 238.59 169.491 236.59 169.491 cv
234.59 169.491 232.96 167.871 232.96 165.871 cv
232.96 163.861 234.59 162.241 236.59 162.241 cv
238.59 162.241 240.21 163.861 240.21 165.871 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
233.76 166.591 mo
(151.0)
[1.25641 1.25639 1.25641 .628967 0 ]xsh
266.83 142.651 mo
266.83 144.661 265.21 146.281 263.2 146.281 cv
261.2 146.281 259.58 144.661 259.58 142.651 cv
259.58 140.651 261.2 139.031 263.2 139.031 cv
265.21 139.031 266.83 140.651 266.83 142.651 cv
cp
0 0 0 .71875 cmyk
@
266.83 142.651 mo
266.83 144.661 265.21 146.281 263.2 146.281 cv
261.2 146.281 259.58 144.661 259.58 142.651 cv
259.58 140.651 261.2 139.031 263.2 139.031 cv
265.21 139.031 266.83 140.651 266.83 142.651 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
260.38 143.381 mo
(196.0)
[1.25641 1.25641 1.25641 .628937 0 ]xsh
264.29 161.161 mo
264.29 163.171 262.67 164.791 260.66 164.791 cv
258.66 164.791 257.04 163.171 257.04 161.161 cv
257.04 159.161 258.66 157.541 260.66 157.541 cv
262.67 157.541 264.29 159.161 264.29 161.161 cv
cp
0 0 0 .71875 cmyk
@
264.29 161.161 mo
264.29 163.171 262.67 164.791 260.66 164.791 cv
258.66 164.791 257.04 163.171 257.04 161.161 cv
257.04 159.161 258.66 157.541 260.66 157.541 cv
262.67 157.541 264.29 159.161 264.29 161.161 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
258.47 161.891 mo
(94.0)
[1.25641 1.25641 .629059 0 ]xsh
255.21 165.171 mo
255.21 167.171 253.58 168.801 251.58 168.801 cv
249.58 168.801 247.96 167.171 247.96 165.171 cv
247.96 163.171 249.58 161.551 251.58 161.551 cv
253.58 161.551 255.21 163.171 255.21 165.171 cv
cp
0 0 0 .71875 cmyk
@
255.21 165.171 mo
255.21 167.171 253.58 168.801 251.58 168.801 cv
249.58 168.801 247.96 167.171 247.96 165.171 cv
247.96 163.171 249.58 161.551 251.58 161.551 cv
253.58 161.551 255.21 163.171 255.21 165.171 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
249.38 165.901 mo
(25.0)
[1.25641 1.25639 .628204 0 ]xsh
282.49 163.821 mo
282.49 165.821 280.87 167.441 278.87 167.441 cv
276.87 167.441 275.24 165.821 275.24 163.821 cv
275.24 161.821 276.87 160.191 278.87 160.191 cv
280.87 160.191 282.49 161.821 282.49 163.821 cv
cp
0 0 0 .71875 cmyk
@
282.49 163.821 mo
282.49 165.821 280.87 167.441 278.87 167.441 cv
276.87 167.441 275.24 165.821 275.24 163.821 cv
275.24 161.821 276.87 160.191 278.87 160.191 cv
280.87 160.191 282.49 161.821 282.49 163.821 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
276.67 164.551 mo
(49.0)
[1.25641 1.25641 .629059 0 ]xsh
213.85 115.501 mo
213.85 117.501 212.22 119.131 210.22 119.131 cv
208.22 119.131 206.6 117.501 206.6 115.501 cv
206.6 113.501 208.22 111.881 210.22 111.881 cv
212.22 111.881 213.85 113.501 213.85 115.501 cv
cp
0 0 0 .71875 cmyk
@
213.85 115.501 mo
213.85 117.501 212.22 119.131 210.22 119.131 cv
208.22 119.131 206.6 117.501 206.6 115.501 cv
206.6 113.501 208.22 111.881 210.22 111.881 cv
212.22 111.881 213.85 113.501 213.85 115.501 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
207.39 116.231 mo
(137.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
209.24 103.771 mo
209.24 105.771 207.61 107.391 205.61 107.391 cv
203.61 107.391 201.99 105.771 201.99 103.771 cv
201.99 101.771 203.61 100.141 205.61 100.141 cv
207.61 100.141 209.24 101.771 209.24 103.771 cv
cp
0 0 0 .71875 cmyk
@
209.24 103.771 mo
209.24 105.771 207.61 107.391 205.61 107.391 cv
203.61 107.391 201.99 105.771 201.99 103.771 cv
201.99 101.771 203.61 100.141 205.61 100.141 cv
207.61 100.141 209.24 101.771 209.24 103.771 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
203.41 104.501 mo
(14.0)
[1.25641 1.25639 .628204 0 ]xsh
228.7 111.261 mo
228.7 113.261 227.07 114.891 225.07 114.891 cv
223.07 114.891 221.45 113.261 221.45 111.261 cv
221.45 109.261 223.07 107.641 225.07 107.641 cv
227.07 107.641 228.7 109.261 228.7 111.261 cv
cp
0 0 0 .71875 cmyk
@
228.7 111.261 mo
228.7 113.261 227.07 114.891 225.07 114.891 cv
223.07 114.891 221.45 113.261 221.45 111.261 cv
221.45 109.261 223.07 107.641 225.07 107.641 cv
227.07 107.641 228.7 109.261 228.7 111.261 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
222.87 111.991 mo
(60.0)
[1.25641 1.25639 .629089 0 ]xsh
231.26 80.571 mo
231.26 82.571 229.64 84.201 227.64 84.201 cv
225.63 84.201 224.01 82.571 224.01 80.571 cv
224.01 78.571 225.63 76.951 227.64 76.951 cv
229.64 76.951 231.26 78.571 231.26 80.571 cv
cp
0 0 0 .71875 cmyk
@
231.26 80.571 mo
231.26 82.571 229.64 84.201 227.64 84.201 cv
225.63 84.201 224.01 82.571 224.01 80.571 cv
224.01 78.571 225.63 76.951 227.64 76.951 cv
229.64 76.951 231.26 78.571 231.26 80.571 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
225.44 81.3009 mo
(93.0)
[1.25641 1.25639 .629089 0 ]xsh
248.25 86.791 mo
248.25 88.791 246.63 90.411 244.63 90.411 cv
242.63 90.411 241 88.791 241 86.791 cv
241 84.791 242.63 83.161 244.63 83.161 cv
246.63 83.161 248.25 84.791 248.25 86.791 cv
cp
0 0 0 .71875 cmyk
@
248.25 86.791 mo
248.25 88.791 246.63 90.411 244.63 90.411 cv
242.63 90.411 241 88.791 241 86.791 cv
241 84.791 242.63 83.161 244.63 83.161 cv
246.63 83.161 248.25 84.791 248.25 86.791 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
241.8 87.521 mo
(138.0)
[1.25641 1.25639 1.25641 .628967 0 ]xsh
267 75.311 mo
267 77.321 265.38 78.941 263.37 78.941 cv
261.37 78.941 259.75 77.321 259.75 75.311 cv
259.75 73.311 261.37 71.691 263.37 71.691 cv
265.38 71.691 267 73.311 267 75.311 cv
cp
0 0 0 .71875 cmyk
@
267 75.311 mo
267 77.321 265.38 78.941 263.37 78.941 cv
261.37 78.941 259.75 77.321 259.75 75.311 cv
259.75 73.311 261.37 71.691 263.37 71.691 cv
265.38 71.691 267 73.311 267 75.311 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
260.55 76.0409 mo
(160.0)
[1.25641 1.25641 1.25641 .628937 0 ]xsh
231.79 55.631 mo
231.79 57.631 230.17 59.261 228.17 59.261 cv
226.17 59.261 224.54 57.631 224.54 55.631 cv
224.54 53.631 226.17 52.011 228.17 52.011 cv
230.17 52.011 231.79 53.631 231.79 55.631 cv
cp
0 0 0 .71875 cmyk
@
231.79 55.631 mo
231.79 57.631 230.17 59.261 228.17 59.261 cv
226.17 59.261 224.54 57.631 224.54 55.631 cv
224.54 53.631 226.17 52.011 228.17 52.011 cv
230.17 52.011 231.79 53.631 231.79 55.631 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
225.34 56.3609 mo
(141.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
282.04 68.601 mo
282.04 70.601 280.41 72.221 278.41 72.221 cv
276.41 72.221 274.79 70.601 274.79 68.601 cv
274.79 66.591 276.41 64.971 278.41 64.971 cv
280.41 64.971 282.04 66.591 282.04 68.601 cv
cp
0 0 0 .71875 cmyk
@
282.04 68.601 mo
282.04 70.601 280.41 72.221 278.41 72.221 cv
276.41 72.221 274.79 70.601 274.79 68.601 cv
274.79 66.591 276.41 64.971 278.41 64.971 cv
280.41 64.971 282.04 66.591 282.04 68.601 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
276.21 69.321 mo
(51.0)
[1.25641 1.25641 .628204 0 ]xsh
259.36 55.091 mo
259.36 57.091 257.73 58.711 255.73 58.711 cv
253.73 58.711 252.11 57.091 252.11 55.091 cv
252.11 53.091 253.73 51.461 255.73 51.461 cv
257.73 51.461 259.36 53.091 259.36 55.091 cv
cp
0 0 0 .71875 cmyk
@
259.36 55.091 mo
259.36 57.091 257.73 58.711 255.73 58.711 cv
253.73 58.711 252.11 57.091 252.11 55.091 cv
252.11 53.091 253.73 51.461 255.73 51.461 cv
257.73 51.461 259.36 53.091 259.36 55.091 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
253.53 55.821 mo
(26.0)
[1.25641 1.25641 .628204 0 ]xsh
258.82 30.451 mo
258.82 32.451 257.19 34.071 255.19 34.071 cv
253.19 34.071 251.57 32.451 251.57 30.451 cv
251.57 28.441 253.19 26.821 255.19 26.821 cv
257.19 26.821 258.82 28.441 258.82 30.451 cv
cp
0 0 0 .71875 cmyk
@
258.82 30.451 mo
258.82 32.451 257.19 34.071 255.19 34.071 cv
253.19 34.071 251.57 32.451 251.57 30.451 cv
251.57 28.441 253.19 26.821 255.19 26.821 cv
257.19 26.821 258.82 28.441 258.82 30.451 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
252.36 31.1709 mo
(184.0)
[1.25641 1.25639 1.25641 .628967 0 ]xsh
276.1 37.151 mo
276.1 39.151 274.48 40.781 272.47 40.781 cv
270.47 40.781 268.85 39.151 268.85 37.151 cv
268.85 35.151 270.47 33.531 272.47 33.531 cv
274.48 33.531 276.1 35.151 276.1 37.151 cv
cp
0 0 0 .71875 cmyk
@
276.1 37.151 mo
276.1 39.151 274.48 40.781 272.47 40.781 cv
270.47 40.781 268.85 39.151 268.85 37.151 cv
268.85 35.151 270.47 33.531 272.47 33.531 cv
274.48 33.531 276.1 35.151 276.1 37.151 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
269.65 37.881 mo
(113.0)
[1.25641 1.25641 1.25641 .629333 0 ]xsh
319.27 243.271 mo
319.27 245.271 317.64 246.891 315.64 246.891 cv
313.64 246.891 312.02 245.271 312.02 243.271 cv
312.02 241.261 313.64 239.641 315.64 239.641 cv
317.64 239.641 319.27 241.261 319.27 243.271 cv
cp
0 0 0 .71875 cmyk
@
319.27 243.271 mo
319.27 245.271 317.64 246.891 315.64 246.891 cv
313.64 246.891 312.02 245.271 312.02 243.271 cv
312.02 241.261 313.64 239.641 315.64 239.641 cv
317.64 239.641 319.27 241.261 319.27 243.271 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
312.81 243.991 mo
(100.0)
[1.25641 1.25641 1.25641 .628937 0 ]xsh
341 253.751 mo
341 255.751 339.38 257.371 337.37 257.371 cv
335.37 257.371 333.75 255.751 333.75 253.751 cv
333.75 251.751 335.37 250.121 337.37 250.121 cv
339.38 250.121 341 251.751 341 253.751 cv
cp
0 0 0 .71875 cmyk
@
341 253.751 mo
341 255.751 339.38 257.371 337.37 257.371 cv
335.37 257.371 333.75 255.751 333.75 253.751 cv
333.75 251.751 335.37 250.121 337.37 250.121 cv
339.38 250.121 341 251.751 341 253.751 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
335.18 254.481 mo
(28.0)
[1.25641 1.25641 .628204 0 ]xsh
330.95 222.251 mo
330.95 224.261 329.32 225.881 327.32 225.881 cv
325.32 225.881 323.7 224.261 323.7 222.251 cv
323.7 220.251 325.32 218.631 327.32 218.631 cv
329.32 218.631 330.95 220.251 330.95 222.251 cv
cp
0 0 0 .71875 cmyk
@
330.95 222.251 mo
330.95 224.261 329.32 225.881 327.32 225.881 cv
325.32 225.881 323.7 224.261 323.7 222.251 cv
323.7 220.251 325.32 218.631 327.32 218.631 cv
329.32 218.631 330.95 220.251 330.95 222.251 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
324.49 222.981 mo
(180.0)
[1.25641 1.25641 1.25641 .629333 0 ]xsh
317 213.141 mo
317 215.151 315.38 216.771 313.38 216.771 cv
311.37 216.771 309.75 215.151 309.75 213.141 cv
309.75 211.141 311.37 209.521 313.38 209.521 cv
315.38 209.521 317 211.141 317 213.141 cv
cp
0 0 0 .71875 cmyk
@
317 213.141 mo
317 215.151 315.38 216.771 313.38 216.771 cv
311.37 216.771 309.75 215.151 309.75 213.141 cv
309.75 211.141 311.37 209.521 313.38 209.521 cv
315.38 209.521 317 211.141 317 213.141 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
310.55 213.871 mo
(154.0)
[1.25641 1.25641 1.25641 .628937 0 ]xsh
346.49 215.511 mo
346.49 217.511 344.86 219.131 342.86 219.131 cv
340.86 219.131 339.24 217.511 339.24 215.511 cv
339.24 213.501 340.86 211.881 342.86 211.881 cv
344.86 211.881 346.49 213.501 346.49 215.511 cv
cp
0 0 0 .71875 cmyk
@
346.49 215.511 mo
346.49 217.511 344.86 219.131 342.86 219.131 cv
340.86 219.131 339.24 217.511 339.24 215.511 cv
339.24 213.501 340.86 211.881 342.86 211.881 cv
344.86 211.881 346.49 213.501 346.49 215.511 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
340.66 216.241 mo
(50.0)
[1.25641 1.25641 .628204 0 ]xsh
322.23 197.531 mo
322.23 199.531 320.6 201.161 318.6 201.161 cv
316.6 201.161 314.98 199.531 314.98 197.531 cv
314.98 195.531 316.6 193.911 318.6 193.911 cv
320.6 193.911 322.23 195.531 322.23 197.531 cv
cp
0 0 0 .71875 cmyk
@
322.23 197.531 mo
322.23 199.531 320.6 201.161 318.6 201.161 cv
316.6 201.161 314.98 199.531 314.98 197.531 cv
314.98 195.531 316.6 193.911 318.6 193.911 cv
320.6 193.911 322.23 195.531 322.23 197.531 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
315.77 198.261 mo
(130.0)
[1.25641 1.25641 1.25641 .629333 0 ]xsh
352.47 185.291 mo
352.47 187.291 350.85 188.911 348.84 188.911 cv
346.84 188.911 345.22 187.291 345.22 185.291 cv
345.22 183.281 346.84 181.661 348.84 181.661 cv
350.85 181.661 352.47 183.281 352.47 185.291 cv
cp
0 0 0 .71875 cmyk
@
352.47 185.291 mo
352.47 187.291 350.85 188.911 348.84 188.911 cv
346.84 188.911 345.22 187.291 345.22 185.291 cv
345.22 183.281 346.84 181.661 348.84 181.661 cv
350.85 181.661 352.47 183.281 352.47 185.291 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
346.65 186.011 mo
(83.0)
[1.25641 1.25641 .629059 0 ]xsh
394.43 157.621 mo
394.43 159.621 392.81 161.241 390.8 161.241 cv
388.8 161.241 387.18 159.621 387.18 157.621 cv
387.18 155.621 388.8 153.991 390.8 153.991 cv
392.81 153.991 394.43 155.621 394.43 157.621 cv
cp
0 0 0 .71875 cmyk
@
394.43 157.621 mo
394.43 159.621 392.81 161.241 390.8 161.241 cv
388.8 161.241 387.18 159.621 387.18 157.621 cv
387.18 155.621 388.8 153.991 390.8 153.991 cv
392.81 153.991 394.43 155.621 394.43 157.621 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
387.98 158.351 mo
(190.0)
[1.25641 1.25641 1.25641 .628937 0 ]xsh
402.26 177.011 mo
402.26 179.021 400.64 180.641 398.64 180.641 cv
396.64 180.641 395.01 179.021 395.01 177.011 cv
395.01 175.011 396.64 173.391 398.64 173.391 cv
400.64 173.391 402.26 175.011 402.26 177.011 cv
cp
0 0 0 .71875 cmyk
@
402.26 177.011 mo
402.26 179.021 400.64 180.641 398.64 180.641 cv
396.64 180.641 395.01 179.021 395.01 177.011 cv
395.01 175.011 396.64 173.391 398.64 173.391 cv
400.64 173.391 402.26 175.011 402.26 177.011 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
395.81 177.741 mo
(145.0)
[1.25641 1.25641 1.25641 .628937 0 ]xsh
379.18 174.961 mo
379.18 176.961 377.56 178.581 375.55 178.581 cv
373.55 178.581 371.93 176.961 371.93 174.961 cv
371.93 172.961 373.55 171.331 375.55 171.331 cv
377.56 171.331 379.18 172.961 379.18 174.961 cv
cp
0 0 0 .71875 cmyk
@
379.18 174.961 mo
379.18 176.961 377.56 178.581 375.55 178.581 cv
373.55 178.581 371.93 176.961 371.93 174.961 cv
371.93 172.961 373.55 171.331 375.55 171.331 cv
377.56 171.331 379.18 172.961 379.18 174.961 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
373.36 175.691 mo
(43.0)
[1.25641 1.25641 .628204 0 ]xsh
369.82 219.981 mo
369.82 221.991 368.2 223.611 366.2 223.611 cv
364.2 223.611 362.57 221.991 362.57 219.981 cv
362.57 217.981 364.2 216.361 366.2 216.361 cv
368.2 216.361 369.82 217.981 369.82 219.981 cv
cp
0 0 0 .71875 cmyk
@
369.82 219.981 mo
369.82 221.991 368.2 223.611 366.2 223.611 cv
364.2 223.611 362.57 221.991 362.57 219.981 cv
362.57 217.981 364.2 216.361 366.2 216.361 cv
368.2 216.361 369.82 217.981 369.82 219.981 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
363.37 220.711 mo
(166.0)
[1.25641 1.25641 1.25641 .629333 0 ]xsh
372.66 8.741 mo
372.66 10.741 371.03 12.371 369.03 12.371 cv
367.03 12.371 365.41 10.741 365.41 8.741 cv
365.41 6.741 367.03 5.12097 369.03 5.12097 cv
371.03 5.12097 372.66 6.741 372.66 8.741 cv
cp
0 0 0 .71875 cmyk
@
372.66 8.741 mo
372.66 10.741 371.03 12.371 369.03 12.371 cv
367.03 12.371 365.41 10.741 365.41 8.741 cv
365.41 6.741 367.03 5.12097 369.03 5.12097 cv
371.03 5.12097 372.66 6.741 372.66 8.741 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
367.46 9.47096 mo
(6.0)
[1.25641 .628723 0 ]xsh
353.92 21.111 mo
353.92 23.111 352.29 24.7299 350.29 24.7299 cv
348.29 24.7299 346.67 23.111 346.67 21.111 cv
346.67 19.111 348.29 17.4799 350.29 17.4799 cv
352.29 17.4799 353.92 19.111 353.92 21.111 cv
cp
0 0 0 .71875 cmyk
@
353.92 21.111 mo
353.92 23.111 352.29 24.7299 350.29 24.7299 cv
348.29 24.7299 346.67 23.111 346.67 21.111 cv
346.67 19.111 348.29 17.4799 350.29 17.4799 cv
352.29 17.4799 353.92 19.111 353.92 21.111 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
347.46 21.841 mo
(172.0)
[1.25641 1.25641 1.25641 .628937 0 ]xsh
335.65 38.601 mo
335.65 40.601 334.03 42.221 332.03 42.221 cv
330.02 42.221 328.4 40.601 328.4 38.601 cv
328.4 36.601 330.02 34.971 332.03 34.971 cv
334.03 34.971 335.65 36.601 335.65 38.601 cv
cp
0 0 0 .71875 cmyk
@
335.65 38.601 mo
335.65 40.601 334.03 42.221 332.03 42.221 cv
330.02 42.221 328.4 40.601 328.4 38.601 cv
328.4 36.601 330.02 34.971 332.03 34.971 cv
334.03 34.971 335.65 36.601 335.65 38.601 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
329.2 39.3309 mo
(107.0)
[1.25641 1.25641 1.25641 .628937 0 ]xsh
310.05 52.631 mo
310.05 54.641 308.43 56.261 306.43 56.261 cv
304.43 56.261 302.8 54.641 302.8 52.631 cv
302.8 50.631 304.43 49.011 306.43 49.011 cv
308.43 49.011 310.05 50.631 310.05 52.631 cv
cp
0 0 0 .71875 cmyk
@
310.05 52.631 mo
310.05 54.641 308.43 56.261 306.43 56.261 cv
304.43 56.261 302.8 54.641 302.8 52.631 cv
302.8 50.631 304.43 49.011 306.43 49.011 cv
308.43 49.011 310.05 50.631 310.05 52.631 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
304.23 53.3609 mo
(18.0)
[1.25641 1.25641 .628204 0 ]xsh
357.6 43.041 mo
357.6 45.041 355.98 46.671 353.98 46.671 cv
351.98 46.671 350.35 45.041 350.35 43.041 cv
350.35 41.041 351.98 39.421 353.98 39.421 cv
355.98 39.421 357.6 41.041 357.6 43.041 cv
cp
0 0 0 .71875 cmyk
@
357.6 43.041 mo
357.6 45.041 355.98 46.671 353.98 46.671 cv
351.98 46.671 350.35 45.041 350.35 43.041 cv
350.35 41.041 351.98 39.421 353.98 39.421 cv
355.98 39.421 357.6 41.041 357.6 43.041 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
351.78 43.7709 mo
(99.0)
[1.25641 1.25641 .628204 0 ]xsh
33.9703 434.661 mo
33.9703 436.661 32.3406 438.291 30.3406 438.291 cv
28.3406 438.291 26.7203 436.661 26.7203 434.661 cv
26.7203 432.661 28.3406 431.041 30.3406 431.041 cv
32.3406 431.041 33.9703 432.661 33.9703 434.661 cv
cp
0 0 0 .71875 cmyk
@
33.9703 434.661 mo
33.9703 436.661 32.3406 438.291 30.3406 438.291 cv
28.3406 438.291 26.7203 436.661 26.7203 434.661 cv
26.7203 432.661 28.3406 431.041 30.3406 431.041 cv
32.3406 431.041 33.9703 432.661 33.9703 434.661 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
27.5105 435.391 mo
(185.0)
[1.2564 1.2564 1.2564 .628202 0 ]xsh
34.4004 414.371 mo
34.4004 416.371 32.7805 418.001 30.7805 418.001 cv
28.7805 418.001 27.1504 416.371 27.1504 414.371 cv
27.1504 412.371 28.7805 410.751 30.7805 410.751 cv
32.7805 410.751 34.4004 412.371 34.4004 414.371 cv
cp
0 0 0 .71875 cmyk
@
34.4004 414.371 mo
34.4004 416.371 32.7805 418.001 30.7805 418.001 cv
28.7805 418.001 27.1504 416.371 27.1504 414.371 cv
27.1504 412.371 28.7805 410.751 30.7805 410.751 cv
32.7805 410.751 34.4004 412.371 34.4004 414.371 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
29.2105 415.101 mo
(3.0)
[1.2564 .628727 0 ]xsh
53.2305 434.661 mo
53.2305 436.661 51.6105 438.291 49.6105 438.291 cv
47.6105 438.291 45.9805 436.661 45.9805 434.661 cv
45.9805 432.661 47.6105 431.041 49.6105 431.041 cv
51.6105 431.041 53.2305 432.661 53.2305 434.661 cv
cp
0 0 0 .71875 cmyk
@
53.2305 434.661 mo
53.2305 436.661 51.6105 438.291 49.6105 438.291 cv
47.6105 438.291 45.9805 436.661 45.9805 434.661 cv
45.9805 432.661 47.6105 431.041 49.6105 431.041 cv
51.6105 431.041 53.2305 432.661 53.2305 434.661 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
46.7805 435.391 mo
(165.0)
[1.2564 1.2564 1.2564 .628201 0 ]xsh
53.6703 414.371 mo
53.6703 416.371 52.0504 418.001 50.0504 418.001 cv
48.0406 418.001 46.4203 416.371 46.4203 414.371 cv
46.4203 412.371 48.0406 410.751 50.0504 410.751 cv
52.0504 410.751 53.6703 412.371 53.6703 414.371 cv
cp
0 0 0 .71875 cmyk
@
53.6703 414.371 mo
53.6703 416.371 52.0504 418.001 50.0504 418.001 cv
48.0406 418.001 46.4203 416.371 46.4203 414.371 cv
46.4203 412.371 48.0406 410.751 50.0504 410.751 cv
52.0504 410.751 53.6703 412.371 53.6703 414.371 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
47.8504 415.101 mo
(64.0)
[1.2564 1.2564 .628204 0 ]xsh
72.5004 434.661 mo
72.5004 436.661 70.8805 438.291 68.8805 438.291 cv
66.8805 438.291 65.2504 436.661 65.2504 434.661 cv
65.2504 432.661 66.8805 431.041 68.8805 431.041 cv
70.8805 431.041 72.5004 432.661 72.5004 434.661 cv
cp
0 0 0 .71875 cmyk
@
72.5004 434.661 mo
72.5004 436.661 70.8805 438.291 68.8805 438.291 cv
66.8805 438.291 65.2504 436.661 65.2504 434.661 cv
65.2504 432.661 66.8805 431.041 68.8805 431.041 cv
70.8805 431.041 72.5004 432.661 72.5004 434.661 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
66.6805 435.391 mo
(42.0)
[1.2564 1.25641 .628197 0 ]xsh
72.9406 414.371 mo
72.9406 416.371 71.3203 418.001 69.3105 418.001 cv
67.3105 418.001 65.6906 416.371 65.6906 414.371 cv
65.6906 412.371 67.3105 410.751 69.3105 410.751 cv
71.3203 410.751 72.9406 412.371 72.9406 414.371 cv
cp
0 0 0 .71875 cmyk
@
72.9406 414.371 mo
72.9406 416.371 71.3203 418.001 69.3105 418.001 cv
67.3105 418.001 65.6906 416.371 65.6906 414.371 cv
65.6906 412.371 67.3105 410.751 69.3105 410.751 cv
71.3203 410.751 72.9406 412.371 72.9406 414.371 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
67.7406 415.101 mo
(0.0)
[1.2564 .628738 0 ]xsh
100.23 221.731 mo
100.23 223.731 98.6105 225.351 96.6004 225.351 cv
94.6004 225.351 92.9805 223.731 92.9805 221.731 cv
92.9805 219.731 94.6004 218.101 96.6004 218.101 cv
98.6105 218.101 100.23 219.731 100.23 221.731 cv
cp
0 0 0 .71875 cmyk
@
100.23 221.731 mo
100.23 223.731 98.6105 225.351 96.6004 225.351 cv
94.6004 225.351 92.9805 223.731 92.9805 221.731 cv
92.9805 219.731 94.6004 218.101 96.6004 218.101 cv
98.6105 218.101 100.23 219.731 100.23 221.731 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
93.7805 222.461 mo
(120.0)
[1.2564 1.25641 1.2564 .628204 0 ]xsh
83.2105 224.241 mo
83.2105 226.241 81.5805 227.861 79.5805 227.861 cv
77.5805 227.861 75.9605 226.241 75.9605 224.241 cv
75.9605 222.241 77.5805 220.611 79.5805 220.611 cv
81.5805 220.611 83.2105 222.241 83.2105 224.241 cv
cp
0 0 0 .71875 cmyk
@
83.2105 224.241 mo
83.2105 226.241 81.5805 227.861 79.5805 227.861 cv
77.5805 227.861 75.9605 226.241 75.9605 224.241 cv
75.9605 222.241 77.5805 220.611 79.5805 220.611 cv
81.5805 220.611 83.2105 222.241 83.2105 224.241 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
76.7504 224.971 mo
(161.0)
[1.2564 1.25641 1.2564 .628204 0 ]xsh
77.4004 238.401 mo
77.4004 240.401 75.7805 242.031 73.7805 242.031 cv
71.7703 242.031 70.1504 240.401 70.1504 238.401 cv
70.1504 236.401 71.7703 234.781 73.7805 234.781 cv
75.7805 234.781 77.4004 236.401 77.4004 238.401 cv
cp
0 0 0 .71875 cmyk
@
77.4004 238.401 mo
77.4004 240.401 75.7805 242.031 73.7805 242.031 cv
71.7703 242.031 70.1504 240.401 70.1504 238.401 cv
70.1504 236.401 71.7703 234.781 73.7805 234.781 cv
75.7805 234.781 77.4004 236.401 77.4004 238.401 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
70.9504 239.131 mo
(171.0)
[1.2564 1.25641 1.2564 .628204 0 ]xsh
83.4305 264.121 mo
83.4305 266.121 81.8105 267.751 79.8004 267.751 cv
77.8004 267.751 76.1805 266.121 76.1805 264.121 cv
76.1805 262.121 77.8004 260.501 79.8004 260.501 cv
81.8105 260.501 83.4305 262.121 83.4305 264.121 cv
cp
0 0 0 .71875 cmyk
@
83.4305 264.121 mo
83.4305 266.121 81.8105 267.751 79.8004 267.751 cv
77.8004 267.751 76.1805 266.121 76.1805 264.121 cv
76.1805 262.121 77.8004 260.501 79.8004 260.501 cv
81.8105 260.501 83.4305 262.121 83.4305 264.121 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
77.6105 264.851 mo
(74.0)
[1.2564 1.25641 .628197 0 ]xsh
60.1504 236.061 mo
60.1504 238.061 58.5203 239.691 56.5203 239.691 cv
54.5203 239.691 52.9004 238.061 52.9004 236.061 cv
52.9004 234.061 54.5203 232.441 56.5203 232.441 cv
58.5203 232.441 60.1504 234.061 60.1504 236.061 cv
cp
0 0 0 .71875 cmyk
@
60.1504 236.061 mo
60.1504 238.061 58.5203 239.691 56.5203 239.691 cv
54.5203 239.691 52.9004 238.061 52.9004 236.061 cv
52.9004 234.061 54.5203 232.441 56.5203 232.441 cv
58.5203 232.441 60.1504 234.061 60.1504 236.061 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
54.3203 236.791 mo
(77.0)
[1.2564 1.2564 .628204 0 ]xsh
57.1504 221.141 mo
57.1504 223.141 55.5305 224.761 53.5305 224.761 cv
51.5203 224.761 49.9004 223.141 49.9004 221.141 cv
49.9004 219.141 51.5203 217.511 53.5305 217.511 cv
55.5305 217.511 57.1504 219.141 57.1504 221.141 cv
cp
0 0 0 .71875 cmyk
@
57.1504 221.141 mo
57.1504 223.141 55.5305 224.761 53.5305 224.761 cv
51.5203 224.761 49.9004 223.141 49.9004 221.141 cv
49.9004 219.141 51.5203 217.511 53.5305 217.511 cv
55.5305 217.511 57.1504 219.141 57.1504 221.141 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
51.3305 221.871 mo
(53.0)
[1.2564 1.2564 .628204 0 ]xsh
70.1406 285.331 mo
70.1406 287.331 68.5105 288.951 66.5105 288.951 cv
64.5105 288.951 62.8906 287.331 62.8906 285.331 cv
62.8906 283.331 64.5105 281.701 66.5105 281.701 cv
68.5105 281.701 70.1406 283.331 70.1406 285.331 cv
cp
0 0 0 .71875 cmyk
@
70.1406 285.331 mo
70.1406 287.331 68.5105 288.951 66.5105 288.951 cv
64.5105 288.951 62.8906 287.331 62.8906 285.331 cv
62.8906 283.331 64.5105 281.701 66.5105 281.701 cv
68.5105 281.701 70.1406 283.331 70.1406 285.331 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
64.3105 286.061 mo
(89.0)
[1.2564 1.25641 .628197 0 ]xsh
57.0605 254.981 mo
57.0605 256.981 55.4406 258.601 53.4406 258.601 cv
51.4406 258.601 49.8105 256.981 49.8105 254.981 cv
49.8105 252.971 51.4406 251.351 53.4406 251.351 cv
55.4406 251.351 57.0605 252.971 57.0605 254.981 cv
cp
0 0 0 .71875 cmyk
@
57.0605 254.981 mo
57.0605 256.981 55.4406 258.601 53.4406 258.601 cv
51.4406 258.601 49.8105 256.981 49.8105 254.981 cv
49.8105 252.971 51.4406 251.351 53.4406 251.351 cv
55.4406 251.351 57.0605 252.971 57.0605 254.981 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
50.6105 255.701 mo
(183.0)
[1.2564 1.2564 1.2564 .628201 0 ]xsh
138.17 344.151 mo
138.17 346.151 136.55 347.771 134.54 347.771 cv
132.54 347.771 130.92 346.151 130.92 344.151 cv
130.92 342.141 132.54 340.521 134.54 340.521 cv
136.55 340.521 138.17 342.141 138.17 344.151 cv
cp
0 0 0 .71875 cmyk
@
138.17 344.151 mo
138.17 346.151 136.55 347.771 134.54 347.771 cv
132.54 347.771 130.92 346.151 130.92 344.151 cv
130.92 342.141 132.54 340.521 134.54 340.521 cv
136.55 340.521 138.17 342.141 138.17 344.151 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
131.72 344.871 mo
(157.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
152.94 324.911 mo
152.94 326.911 151.32 328.531 149.32 328.531 cv
147.32 328.531 145.69 326.911 145.69 324.911 cv
145.69 322.901 147.32 321.281 149.32 321.281 cv
151.32 321.281 152.94 322.901 152.94 324.911 cv
cp
0 0 0 .71875 cmyk
@
152.94 324.911 mo
152.94 326.911 151.32 328.531 149.32 328.531 cv
147.32 328.531 145.69 326.911 145.69 324.911 cv
145.69 322.901 147.32 321.281 149.32 321.281 cv
151.32 321.281 152.94 322.901 152.94 324.911 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
147.12 325.641 mo
(69.0)
[1.25641 1.25639 .629074 0 ]xsh
168.55 299.911 mo
168.55 301.911 166.93 303.541 164.93 303.541 cv
162.93 303.541 161.3 301.911 161.3 299.911 cv
161.3 297.911 162.93 296.291 164.93 296.291 cv
166.93 296.291 168.55 297.911 168.55 299.911 cv
cp
0 0 0 .71875 cmyk
@
168.55 299.911 mo
168.55 301.911 166.93 303.541 164.93 303.541 cv
162.93 303.541 161.3 301.911 161.3 299.911 cv
161.3 297.911 162.93 296.291 164.93 296.291 cv
166.93 296.291 168.55 297.911 168.55 299.911 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
162.1 300.641 mo
(153.0)
[1.25641 1.25639 1.25641 .628952 0 ]xsh
166.15 269.401 mo
166.15 271.401 164.53 273.021 162.53 273.021 cv
160.53 273.021 158.9 271.401 158.9 269.401 cv
158.9 267.401 160.53 265.771 162.53 265.771 cv
164.53 265.771 166.15 267.401 166.15 269.401 cv
cp
0 0 0 .71875 cmyk
@
166.15 269.401 mo
166.15 271.401 164.53 273.021 162.53 273.021 cv
160.53 273.021 158.9 271.401 158.9 269.401 cv
158.9 267.401 160.53 265.771 162.53 265.771 cv
164.53 265.771 166.15 267.401 166.15 269.401 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
160.33 270.131 mo
(97.0)
[1.25641 1.25639 .628204 0 ]xsh
180.96 291.021 mo
180.96 293.021 179.34 294.651 177.34 294.651 cv
175.33 294.651 173.71 293.021 173.71 291.021 cv
173.71 289.021 175.33 287.401 177.34 287.401 cv
179.34 287.401 180.96 289.021 180.96 291.021 cv
cp
0 0 0 .71875 cmyk
@
180.96 291.021 mo
180.96 293.021 179.34 294.651 177.34 294.651 cv
175.33 294.651 173.71 293.021 173.71 291.021 cv
173.71 289.021 175.33 287.401 177.34 287.401 cv
179.34 287.401 180.96 289.021 180.96 291.021 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
174.51 291.751 mo
(111.0)
[1.25641 1.25639 1.25641 .628967 0 ]xsh
135.6 269.971 mo
135.6 271.971 133.98 273.601 131.98 273.601 cv
129.97 273.601 128.35 271.971 128.35 269.971 cv
128.35 267.971 129.97 266.351 131.98 266.351 cv
133.98 266.351 135.6 267.971 135.6 269.971 cv
cp
0 0 0 .71875 cmyk
@
135.6 269.971 mo
135.6 271.971 133.98 273.601 131.98 273.601 cv
129.97 273.601 128.35 271.971 128.35 269.971 cv
128.35 267.971 129.97 266.351 131.98 266.351 cv
133.98 266.351 135.6 267.971 135.6 269.971 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
129.78 270.701 mo
(44.0)
[1.25641 1.25639 .628204 0 ]xsh
151.48 290.971 mo
151.48 292.971 149.86 294.601 147.85 294.601 cv
145.85 294.601 144.23 292.971 144.23 290.971 cv
144.23 288.971 145.85 287.351 147.85 287.351 cv
149.86 287.351 151.48 288.971 151.48 290.971 cv
cp
0 0 0 .71875 cmyk
@
151.48 290.971 mo
151.48 292.971 149.86 294.601 147.85 294.601 cv
145.85 294.601 144.23 292.971 144.23 290.971 cv
144.23 288.971 145.85 287.351 147.85 287.351 cv
149.86 287.351 151.48 288.971 151.48 290.971 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
145.03 291.701 mo
(106.0)
[1.25641 1.25639 1.25641 .628952 0 ]xsh
190.37 323.421 mo
190.37 325.421 188.75 327.041 186.75 327.041 cv
184.75 327.041 183.12 325.421 183.12 323.421 cv
183.12 321.411 184.75 319.791 186.75 319.791 cv
188.75 319.791 190.37 321.411 190.37 323.421 cv
cp
0 0 0 .71875 cmyk
@
190.37 323.421 mo
190.37 325.421 188.75 327.041 186.75 327.041 cv
184.75 327.041 183.12 325.421 183.12 323.421 cv
183.12 321.411 184.75 319.791 186.75 319.791 cv
188.75 319.791 190.37 321.411 190.37 323.421 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
184.55 324.141 mo
(57.0)
[1.25641 1.25639 .629074 0 ]xsh
184.27 351.551 mo
184.27 353.551 182.65 355.171 180.65 355.171 cv
178.65 355.171 177.02 353.551 177.02 351.551 cv
177.02 349.551 178.65 347.921 180.65 347.921 cv
182.65 347.921 184.27 349.551 184.27 351.551 cv
cp
0 0 0 .71875 cmyk
@
184.27 351.551 mo
184.27 353.551 182.65 355.171 180.65 355.171 cv
178.65 355.171 177.02 353.551 177.02 351.551 cv
177.02 349.551 178.65 347.921 180.65 347.921 cv
182.65 347.921 184.27 349.551 184.27 351.551 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
177.82 352.281 mo
(155.0)
[1.25641 1.25639 1.25641 .629349 0 ]xsh
175.25 375.541 mo
175.25 377.541 173.62 379.161 171.62 379.161 cv
169.62 379.161 168 377.541 168 375.541 cv
168 373.531 169.62 371.911 171.62 371.911 cv
173.62 371.911 175.25 373.531 175.25 375.541 cv
cp
0 0 0 .71875 cmyk
@
175.25 375.541 mo
175.25 377.541 173.62 379.161 171.62 379.161 cv
169.62 379.161 168 377.541 168 375.541 cv
168 373.531 169.62 371.911 171.62 371.911 cv
173.62 371.911 175.25 373.531 175.25 375.541 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
169.42 376.271 mo
(81.0)
[1.25641 1.25639 .629074 0 ]xsh
164.37 395.541 mo
164.37 397.541 162.75 399.171 160.74 399.171 cv
158.74 399.171 157.12 397.541 157.12 395.541 cv
157.12 393.541 158.74 391.921 160.74 391.921 cv
162.75 391.921 164.37 393.541 164.37 395.541 cv
cp
0 0 0 .71875 cmyk
@
164.37 395.541 mo
164.37 397.541 162.75 399.171 160.74 399.171 cv
158.74 399.171 157.12 397.541 157.12 395.541 cv
157.12 393.541 158.74 391.921 160.74 391.921 cv
162.75 391.921 164.37 393.541 164.37 395.541 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
158.55 396.271 mo
(47.0)
[1.25641 1.25639 .629074 0 ]xsh
112.65 180.861 mo
112.65 182.861 111.02 184.481 109.02 184.481 cv
107.02 184.481 105.4 182.861 105.4 180.861 cv
105.4 178.861 107.02 177.231 109.02 177.231 cv
111.02 177.231 112.65 178.861 112.65 180.861 cv
cp
0 0 0 .71875 cmyk
@
112.65 180.861 mo
112.65 182.861 111.02 184.481 109.02 184.481 cv
107.02 184.481 105.4 182.861 105.4 180.861 cv
105.4 178.861 107.02 177.231 109.02 177.231 cv
111.02 177.231 112.65 178.861 112.65 180.861 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
106.82 181.591 mo
(70.0)
[1.2564 1.25641 .629066 0 ]xsh
152.93 192.691 mo
152.93 194.691 151.31 196.321 149.31 196.321 cv
147.31 196.321 145.68 194.691 145.68 192.691 cv
145.68 190.691 147.31 189.071 149.31 189.071 cv
151.31 189.071 152.93 190.691 152.93 192.691 cv
cp
0 0 0 .71875 cmyk
@
152.93 192.691 mo
152.93 194.691 151.31 196.321 149.31 196.321 cv
147.31 196.321 145.68 194.691 145.68 192.691 cv
145.68 190.691 147.31 189.071 149.31 189.071 cv
151.31 189.071 152.93 190.691 152.93 192.691 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
146.48 193.421 mo
(131.0)
[1.25641 1.25639 1.25641 .628967 0 ]xsh
131.29 207.151 mo
131.29 209.151 129.66 210.781 127.66 210.781 cv
125.66 210.781 124.04 209.151 124.04 207.151 cv
124.04 205.151 125.66 203.531 127.66 203.531 cv
129.66 203.531 131.29 205.151 131.29 207.151 cv
cp
0 0 0 .71875 cmyk
@
131.29 207.151 mo
131.29 209.151 129.66 210.781 127.66 210.781 cv
125.66 210.781 124.04 209.151 124.04 207.151 cv
124.04 205.151 125.66 203.531 127.66 203.531 cv
129.66 203.531 131.29 205.151 131.29 207.151 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
124.83 207.881 mo
(150.0)
[1.2564 1.25641 1.2564 .628967 0 ]xsh
117.26 232.391 mo
117.26 234.391 115.64 236.011 113.64 236.011 cv
111.63 236.011 110.01 234.391 110.01 232.391 cv
110.01 230.381 111.63 228.761 113.64 228.761 cv
115.64 228.761 117.26 230.381 117.26 232.391 cv
cp
0 0 0 .71875 cmyk
@
117.26 232.391 mo
117.26 234.391 115.64 236.011 113.64 236.011 cv
111.63 236.011 110.01 234.391 110.01 232.391 cv
110.01 230.381 111.63 228.761 113.64 228.761 cv
115.64 228.761 117.26 230.381 117.26 232.391 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
110.81 233.111 mo
(194.0)
[1.2564 1.25641 1.2564 .62896 0 ]xsh
96.5305 190.401 mo
96.5305 192.401 94.9105 194.021 92.9105 194.021 cv
90.9004 194.021 89.2805 192.401 89.2805 190.401 cv
89.2805 188.401 90.9004 186.771 92.9105 186.771 cv
94.9105 186.771 96.5305 188.401 96.5305 190.401 cv
cp
0 0 0 .71875 cmyk
@
96.5305 190.401 mo
96.5305 192.401 94.9105 194.021 92.9105 194.021 cv
90.9004 194.021 89.2805 192.401 89.2805 190.401 cv
89.2805 188.401 90.9004 186.771 92.9105 186.771 cv
94.9105 186.771 96.5305 188.401 96.5305 190.401 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
90.0805 191.131 mo
(133.0)
[1.2564 1.25641 1.2564 .628204 0 ]xsh
70.6906 190.861 mo
70.6906 192.861 69.0703 194.491 67.0605 194.491 cv
65.0605 194.491 63.4406 192.861 63.4406 190.861 cv
63.4406 188.861 65.0605 187.241 67.0605 187.241 cv
69.0703 187.241 70.6906 188.861 70.6906 190.861 cv
cp
0 0 0 .71875 cmyk
@
70.6906 190.861 mo
70.6906 192.861 69.0703 194.491 67.0605 194.491 cv
65.0605 194.491 63.4406 192.861 63.4406 190.861 cv
63.4406 188.861 65.0605 187.241 67.0605 187.241 cv
69.0703 187.241 70.6906 188.861 70.6906 190.861 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
64.2406 191.591 mo
(127.0)
[1.2564 1.25641 1.2564 .628204 0 ]xsh
121.53 217.391 mo
121.53 219.391 119.9 221.011 117.9 221.011 cv
115.9 221.011 114.28 219.391 114.28 217.391 cv
114.28 215.391 115.9 213.761 117.9 213.761 cv
119.9 213.761 121.53 215.391 121.53 217.391 cv
cp
0 0 0 .71875 cmyk
@
121.53 217.391 mo
121.53 219.391 119.9 221.011 117.9 221.011 cv
115.9 221.011 114.28 219.391 114.28 217.391 cv
114.28 215.391 115.9 213.761 117.9 213.761 cv
119.9 213.761 121.53 215.391 121.53 217.391 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
115.07 218.121 mo
(104.0)
[1.2564 1.25641 1.2564 .629349 0 ]xsh
77.0703 207.481 mo
77.0703 209.481 75.4504 211.101 73.4504 211.101 cv
71.4406 211.101 69.8203 209.481 69.8203 207.481 cv
69.8203 205.481 71.4406 203.851 73.4504 203.851 cv
75.4504 203.851 77.0703 205.481 77.0703 207.481 cv
cp
0 0 0 .71875 cmyk
@
77.0703 207.481 mo
77.0703 209.481 75.4504 211.101 73.4504 211.101 cv
71.4406 211.101 69.8203 209.481 69.8203 207.481 cv
69.8203 205.481 71.4406 203.851 73.4504 203.851 cv
75.4504 203.851 77.0703 205.481 77.0703 207.481 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
71.2504 208.211 mo
(48.0)
[1.2564 1.25641 .628197 0 ]xsh
89.5406 177.301 mo
89.5406 179.311 87.9203 180.931 85.9203 180.931 cv
83.9203 180.931 82.2906 179.311 82.2906 177.301 cv
82.2906 175.301 83.9203 173.681 85.9203 173.681 cv
87.9203 173.681 89.5406 175.301 89.5406 177.301 cv
cp
0 0 0 .71875 cmyk
@
89.5406 177.301 mo
89.5406 179.311 87.9203 180.931 85.9203 180.931 cv
83.9203 180.931 82.2906 179.311 82.2906 177.301 cv
82.2906 175.301 83.9203 173.681 85.9203 173.681 cv
87.9203 173.681 89.5406 175.301 89.5406 177.301 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
83.7203 178.031 mo
(45.0)
[1.2564 1.25641 .628197 0 ]xsh
58.5406 173.521 mo
58.5406 175.521 56.9105 177.141 54.9105 177.141 cv
52.9105 177.141 51.2906 175.521 51.2906 173.521 cv
51.2906 171.511 52.9105 169.891 54.9105 169.891 cv
56.9105 169.891 58.5406 171.511 58.5406 173.521 cv
cp
0 0 0 .71875 cmyk
@
58.5406 173.521 mo
58.5406 175.521 56.9105 177.141 54.9105 177.141 cv
52.9105 177.141 51.2906 175.521 51.2906 173.521 cv
51.2906 171.511 52.9105 169.891 54.9105 169.891 cv
56.9105 169.891 58.5406 171.511 58.5406 173.521 cv
0 .503906 .274658 0 cmyk
f
0 0 0 1 cmyk
JGUUWX+ArialMT*1 [2.25972 0 0 -2.25972 0 0 ]msf
52.0906 174.241 mo
(179.0)
[1.2564 1.2564 1.2564 .628204 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/JGUUWX+ArialMT*1 uf
/JGUUWX+ArialMT uf
/PBAAAA+ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
